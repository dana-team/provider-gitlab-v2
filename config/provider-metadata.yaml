name: gitlabhq/gitlab
resources:
    gitlab_application:
        subCategory: ""
        description: 'The gitlab_application resource allows to manage the lifecycle of applications in gitlab. ~> In order to use a user for a user to create an application, they must have admin privileges at the instance level. To create an OIDC application, a scope of "openid". Upstream API: GitLab REST API docs https://docs.gitlab.com/api/applications/'
        name: gitlab_application
        title: gitlab_application Resource - terraform-provider-gitlab
        examples:
            - name: oidc
              manifest: |-
                {
                  "confidential": true,
                  "name": "company_oidc",
                  "redirect_url": "https://mycompany.com",
                  "scopes": [
                    "openid"
                  ]
                }
        argumentDocs:
            application_id: (String) Internal name of the application.
            confidential: (Boolean) The application is used where the client secret can be kept confidential. Native mobile apps and Single Page Apps are considered non-confidential. Defaults to true if not supplied
            id: (String) The ID of this Terraform resource. In the format of <application_id>.
            name: (String) Name of the application.
            redirect_url: (String) The URL gitlab should send the user to after authentication.
            scopes: |-
                (Set of String) Scopes of the application. Use "openid" if you plan to use this as an oidc authentication application. Valid options are: api, read_api, read_user, read_repository, write_repository, read_registry, write_registry, sudo, admin_mode, openid, profile, email.
                This is only populated when creating a new application. This attribute is not available for imported resources
            secret: (String, Sensitive) Application secret. Sensitive and must be kept secret. This is only populated when creating a new application. This attribute is not available for imported resources.
        importStatements:
            - |-
              # Gitlab applications can be imported with their id, e.g.
              terraform import gitlab_application.example "1"

              # NOTE: the secret and scopes cannot be imported
    gitlab_application_settings:
        subCategory: ""
        description: 'The gitlab_application_settings resource allows to manage the GitLab application settings. ~> This is an experimental resource. By nature it doesn''t properly fit into how Terraform resources are meant to work. Feel free to join the discussion https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/957 if you have any ideas or questions regarding this resource. ~> All gitlab_application_settings use the same ID gitlab. !> This resource does not implement any destroy logic, it''s a no-op at this point. It''s also not possible to revert to the previous settings. -> Requires at administrative privileges on GitLab. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/settings/'
        name: gitlab_application_settings
        title: gitlab_application_settings Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "default_branch_name": "main"
                }
            - name: this
              manifest: |-
                {
                  "require_two_factor_authentication": true,
                  "two_factor_grace_period": 24
                }
        argumentDocs:
            abuse_notification_email: (String) If set, abuse reports are sent to this address. Abuse reports are always available in the Admin Area.
            admin_mode: (Boolean) Require administrators to enable Admin Mode by re-authenticating for administrative tasks.
            after_sign_out_path: (String) Where to redirect users after logout.
            after_sign_up_text: (String) Text shown to the user after signing up.
            akismet_api_key: (String, Sensitive) API key for Akismet spam protection.
            akismet_enabled: '(Boolean) (If enabled, requires: akismet_api_key) Enable or disable Akismet spam protection.'
            allow_account_deletion: (Boolean) Set to true to allow users to delete their accounts. Premium and Ultimate only.
            allow_force_push: (Boolean) Allow force push for all users with push access.
            allow_group_owners_to_manage_ldap: (Boolean) Set to true to allow group owners to manage LDAP.
            allow_local_requests_from_system_hooks: (Boolean) Allow requests to the local network from system hooks.
            allow_local_requests_from_web_hooks_and_services: (Boolean) Allow requests to the local network from web hooks and services.
            allow_project_creation_for_guest_and_below: (Boolean) Indicates whether users assigned up to the Guest role can create groups and personal projects.
            allow_runner_registration_token: (Boolean) Allow using a registration token to create a runner.
            allowed_to_merge: (List of Number) An array of access levels allowed to merge. Supports Developer (30) or Maintainer (40).
            allowed_to_push: (List of Number) An array of access levels allowed to push. Supports Developer (30) or Maintainer (40).
            archive_builds_in_human_readable: '(String) Set the duration for which the jobs are considered as old and expired. After that time passes, the jobs are archived and no longer able to be retried. Make it empty to never expire jobs. It has to be no less than 1 day, for example: 15 days, 1 month, 2 years.'
            asciidoc_max_includes: '(Number) Maximum limit of AsciiDoc include directives being processed in any one document. Maximum: 64.'
            asset_proxy_allowlist: (List of String) Assets that match these domains are not proxied. Wildcards allowed. Your GitLab installation URL is automatically allowlisted. GitLab restart is required to apply changes.
            asset_proxy_enabled: '(Boolean) (If enabled, requires: asset_proxy_url) Enable proxying of assets. GitLab restart is required to apply changes.'
            asset_proxy_secret_key: (String, Sensitive) Shared secret with the asset proxy server. GitLab restart is required to apply changes.
            asset_proxy_url: (String) URL of the asset proxy server. GitLab restart is required to apply changes.
            authorized_keys_enabled: (Boolean) By default, we write to the authorized_keys file to support Git over SSH without additional configuration. GitLab can be optimized to authenticate SSH keys via the database file. Only disable this if you have configured your OpenSSH server to use the AuthorizedKeysCommand.
            auto_ban_user_on_excessive_projects_download: (Boolean) When enabled, users will get automatically banned from the application when they download more than the maximum number of unique projects in the time period specified by max_number_of_repository_downloads and max_number_of_repository_downloads_within_time_period respectively. Self-managed, Ultimate only.
            auto_devops_domain: (String) Specify a domain to use by default for every project’s Auto Review Apps and Auto Deploy stages.
            auto_devops_enabled: (Boolean) Enable Auto DevOps for projects by default. It automatically builds, tests, and deploys applications based on a predefined CI/CD configuration.
            automatic_purchased_storage_allocation: (Boolean) Enabling this permits automatic allocation of purchased storage in a namespace.
            bulk_import_concurrent_pipeline_batch_limit: (Number) Maximum simultaneous Direct Transfer batches to process.
            bulk_import_enabled: (Boolean) Enable migrating GitLab groups by direct transfer.
            bulk_import_max_download_file_size: (Number) Maximum download file size when importing from source GitLab instances by direct transfer.
            can_create_group: (Boolean) Indicates whether users can create top-level groups.
            check_namespace_plan: (Boolean) Enabling this makes only licensed EE features available to projects if the project namespace’s plan includes the feature or if the project is public.
            ci_max_includes: (Number) The maximum number of includes per pipeline.
            ci_max_total_yaml_size_bytes: (Number) The maximum amount of memory, in bytes, that can be allocated for the pipeline configuration, with all included YAML configuration files.
            commit_email_hostname: (String) Custom hostname (for private commit emails).
            concurrent_bitbucket_import_jobs_limit: (Number) Maximum number of simultaneous import jobs for the Bitbucket Cloud importer.
            concurrent_bitbucket_server_import_jobs_limit: (Number) Maximum number of simultaneous import jobs for the Bitbucket Server importer.
            concurrent_github_import_jobs_limit: (Number) Maximum number of simultaneous import jobs for the GitHub importer.
            container_expiration_policies_enable_historic_entries: (Boolean) Enable cleanup policies for all projects.
            container_registry_cleanup_tags_service_max_list_size: (Number) The maximum number of tags that can be deleted in a single execution of cleanup policies.
            container_registry_delete_tags_service_timeout: (Number) The maximum time, in seconds, that the cleanup process can take to delete a batch of tags for cleanup policies.
            container_registry_expiration_policies_caching: (Boolean) Caching during the execution of cleanup policies.
            container_registry_expiration_policies_worker_capacity: (Number) Number of workers for cleanup policies.
            container_registry_token_expire_delay: (Number) Container Registry token duration in minutes.
            deactivate_dormant_users: (Boolean) Enable automatic deactivation of dormant users.
            deactivate_dormant_users_period: (Number) Length of time (in days) after which a user is considered dormant.
            decompress_archive_file_timeout: (Number) Default timeout for decompressing archived files, in seconds. Set to 0 to disable timeouts.
            default_artifacts_expire_in: (String) Set the default expiration time for each job’s artifacts.
            default_branch_name: (String) Instance-level custom initial branch name
            default_branch_protection: '(Number) Determine if developers can push to the default branch. Can take: 0 (not protected, both users with the Developer role or Maintainer role can push new commits and force push), 1 (partially protected, users with the Developer role or Maintainer role can push new commits, but cannot force push) or 2 (fully protected, users with the Developer or Maintainer role cannot push new commits, but users with the Developer or Maintainer role can; no one can force push) as a parameter. Default is 2.'
            default_branch_protection_defaults: '(Block List, Max: 1) The default_branch_protection_defaults attribute describes the default branch protection defaults. All parameters are optional. (see below for nested schema)'
            default_ci_config_path: (String) Default CI/CD configuration file and path for new projects (.gitlab-ci.yml if not set).
            default_group_visibility: (String) What visibility level new groups receive. Can take private, internal and public as a parameter.
            default_preferred_language: (String) Default preferred language for users who are not logged in.
            default_project_creation: '(Number) Default project creation protection. Can take: 0 (No one), 1 (Maintainers) or 2 (Developers + Maintainers).'
            default_project_visibility: (String) What visibility level new projects receive. Can take private, internal and public as a parameter.
            default_projects_limit: (Number) Project limit per user.
            default_snippet_visibility: (String) What visibility level new snippets receive. Can take private, internal and public as a parameter.
            default_syntax_highlighting_theme: (Number) Default syntax highlighting theme for users who are new or not signed in. See IDs of available themes (https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/themes.rb#L16)
            delete_inactive_projects: (Boolean) Enable inactive project deletion feature.
            delete_unconfirmed_users: (Boolean) Specifies whether users who have not confirmed their email should be deleted. When set to true, unconfirmed users are deleted after unconfirmed_users_delete_after_days days. Self-managed, Premium and Ultimate only.
            deletion_adjourned_period: (Number) The number of days to wait before deleting a project or group that is marked for deletion. Value must be between 1 and 90.
            developer_can_initial_push: (Boolean) Allow developers to initial push.
            diagramsnet_enabled: (Boolean) (If enabled, requires diagramsnet_url) Enable Diagrams.net integration.
            diagramsnet_url: (String) The Diagrams.net instance URL for integration.
            diff_max_files: (Number) Maximum files in a diff.
            diff_max_lines: (Number) Maximum lines in a diff.
            diff_max_patch_bytes: (Number) Maximum diff patch size, in bytes.
            disable_admin_oauth_scopes: (Boolean) Stops administrators from connecting their GitLab accounts to non-trusted OAuth 2.0 applications that have the api, read_api, read_repository, write_repository, read_registry, write_registry, or sudo scopes.
            disable_feed_token: (Boolean) Disable display of RSS/Atom and calendar feed tokens.
            disable_personal_access_tokens: (Boolean) Disable personal access tokens. Self-managed, Premium and Ultimate only. There is no method available to enable a personal access token that’s been disabled through the API. This is a known issue.
            disabled_oauth_sign_in_sources: (List of String) Disabled OAuth sign-in sources.
            dns_rebinding_protection_enabled: (Boolean) Enforce DNS rebinding attack protection.
            domain_allowlist: (List of String) Force people to use only corporate emails for sign-up. Null means there is no restriction.
            domain_denylist: '(List of String) Users with email addresses that match these domains cannot sign up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com.'
            domain_denylist_enabled: '(Boolean) (If enabled, requires: domain_denylist) Allows blocking sign-ups from emails from specific domains.'
            downstream_pipeline_trigger_limit_per_project_user_sha: (Number) Maximum downstream pipeline trigger rate.
            dsa_key_restriction: (Number) The minimum allowed bit length of an uploaded DSA key. 0 means no restriction. -1 disables DSA keys.
            duo_features_enabled: (Boolean) Indicates whether GitLab Duo features are enabled for this instance. Self-managed, Premium and Ultimate only.
            ecdsa_key_restriction: (Number) The minimum allowed curve size (in bits) of an uploaded ECDSA key. 0 means no restriction. -1 disables ECDSA keys.
            ecdsa_sk_key_restriction: (Number) The minimum allowed curve size (in bits) of an uploaded ECDSA_SK key. 0 means no restriction. -1 disables ECDSA_SK keys.
            ed25519_key_restriction: (Number) The minimum allowed curve size (in bits) of an uploaded ED25519 key. 0 means no restriction. -1 disables ED25519 keys.
            ed25519_sk_key_restriction: (Number) The minimum allowed curve size (in bits) of an uploaded ED25519_SK key. 0 means no restriction. -1 disables ED25519_SK keys.
            eks_access_key_id: (String, Sensitive) AWS IAM access key ID.
            eks_account_id: (String) Amazon account ID.
            eks_integration_enabled: (Boolean) Enable integration with Amazon EKS.
            eks_secret_access_key: (String, Sensitive) AWS IAM secret access key.
            elasticsearch_aws: (Boolean) Enable the use of AWS hosted Elasticsearch.
            elasticsearch_aws_access_key: (String, Sensitive) AWS IAM access key.
            elasticsearch_aws_region: (String) The AWS region the Elasticsearch domain is configured.
            elasticsearch_aws_secret_access_key: (String, Sensitive) AWS IAM secret access key.
            elasticsearch_indexed_field_length_limit: (Number) Maximum size of text fields to index by Elasticsearch. 0 value means no limit. This does not apply to repository and wiki indexing.
            elasticsearch_indexed_file_size_limit_kb: (Number) Maximum size of repository and wiki files that are indexed by Elasticsearch.
            elasticsearch_indexing: (Boolean) Enable Elasticsearch indexing.
            elasticsearch_limit_indexing: (Boolean) Limit Elasticsearch to index certain namespaces and projects.
            elasticsearch_max_bulk_concurrency: (Number) Maximum concurrency of Elasticsearch bulk requests per indexing operation. This only applies to repository indexing operations.
            elasticsearch_max_bulk_size_mb: (Number) Maximum size of Elasticsearch bulk indexing requests in MB. This only applies to repository indexing operations.
            elasticsearch_max_code_indexing_concurrency: (Number) Maximum concurrency of Elasticsearch code indexing background jobs. This only applies to repository indexing operations. Premium and Ultimate only.
            elasticsearch_namespace_ids: (List of Number) The namespaces to index via Elasticsearch if elasticsearch_limit_indexing is enabled.
            elasticsearch_password: (String, Sensitive) The password of your Elasticsearch instance.
            elasticsearch_project_ids: (List of Number) The projects to index via Elasticsearch if elasticsearch_limit_indexing is enabled.
            elasticsearch_requeue_workers: (Boolean) Enable automatic requeuing of indexing workers. This improves non-code indexing throughput by enqueuing Sidekiq jobs until all documents are processed. Premium and Ultimate only.
            elasticsearch_search: (Boolean) Enable Elasticsearch search.
            elasticsearch_url: (List of String) The URL to use for connecting to Elasticsearch. Use a comma-separated list to support cluster (for example, http://localhost:9200, http://localhost:9201).
            elasticsearch_username: (String) The username of your Elasticsearch instance.
            elasticsearch_worker_number_of_shards: (Number) Number of indexing worker shards. This improves non-code indexing throughput by enqueuing more parallel Sidekiq jobs. Premium and Ultimate only.
            email_additional_text: (String) Additional text added to the bottom of every email for legal/auditing/compliance reasons.
            email_author_in_body: (Boolean) Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.
            email_confirmation_setting: (String) Specifies whether users must confirm their email before sign in. Possible values are off, soft, and hard.
            enable_artifact_external_redirect_warning_page: (Boolean) Show the external redirect page that warns you about user-generated content in GitLab Pages.
            enabled_git_access_protocol: '(String) Enabled protocols for Git access. Allowed values are: ssh, http, and nil to allow both protocols.'
            enforce_namespace_storage_limit: (Boolean) Enabling this permits enforcement of namespace storage limits.
            enforce_terms: '(Boolean) (If enabled, requires: terms) Enforce application ToS to all users.'
            external_auth_client_cert: '(String) (If enabled, requires: external_auth_client_key) The certificate to use to authenticate with the external authorization service.'
            external_auth_client_key: (String, Sensitive) Private key for the certificate when authentication is required for the external authorization service, this is encrypted when stored.
            external_auth_client_key_pass: (String, Sensitive) Passphrase to use for the private key when authenticating with the external service this is encrypted when stored.
            external_authorization_service_default_label: (String) The default classification label to use when requesting authorization and no classification label has been specified on the project.
            external_authorization_service_enabled: '(Boolean) (If enabled, requires: external_authorization_service_default_label, external_authorization_service_timeout and external_authorization_service_url) Enable using an external authorization service for accessing projects.'
            external_authorization_service_timeout: '(Number) The timeout after which an authorization request is aborted, in seconds. When a request times out, access is denied to the user. (min: 0.001, max: 10, step: 0.001).'
            external_authorization_service_url: (String) URL to which authorization requests are directed.
            external_pipeline_validation_service_timeout: (Number) How long to wait for a response from the pipeline validation service. Assumes OK if it times out.
            external_pipeline_validation_service_token: (String) Optional. Token to include as the X-Gitlab-Token header in requests to the URL in external_pipeline_validation_service_url.
            external_pipeline_validation_service_url: (String) URL to use for pipeline validation requests.
            failed_login_attempts_unlock_period_in_minutes: (Number) Time period in minutes after which the user is unlocked when maximum number of failed sign-in attempts reached.
            file_template_project_id: (Number) The ID of a project to load custom file templates from.
            first_day_of_week: (Number) Start day of the week for calendar views and date pickers. Valid values are 0 for Sunday, 1 for Monday, and 6 for Saturday.
            geo_node_allowed_ips: (String) Comma-separated list of IPs and CIDRs of allowed secondary nodes. For example, 1.1.1.1, 2.2.2.0/24.
            geo_status_timeout: (Number) The amount of seconds after which a request to get a secondary node status times out.
            git_rate_limit_users_alertlist: '(List of Number) List of user IDs that are emailed when the Git abuse rate limit is exceeded. Maximum: 100 user IDs. Self-managed, Ultimate only.'
            git_rate_limit_users_allowlist: '(List of String) List of usernames excluded from Git anti-abuse rate limits. Maximum: 100 usernames. Self-managed, Ultimate only.'
            git_two_factor_session_expiry: (Number) Maximum duration (in minutes) of a session for Git operations when 2FA is enabled.
            gitaly_timeout_default: (Number) Default Gitaly timeout, in seconds. This timeout is not enforced for Git fetch/push operations or Sidekiq jobs. Set to 0 to disable timeouts.
            gitaly_timeout_fast: (Number) Gitaly fast operation timeout, in seconds. Some Gitaly operations are expected to be fast. If they exceed this threshold, there may be a problem with a storage shard and ‘failing fast’ can help maintain the stability of the GitLab instance. Set to 0 to disable timeouts.
            gitaly_timeout_medium: (Number) Medium Gitaly timeout, in seconds. This should be a value between the Fast and the Default timeout. Set to 0 to disable timeouts.
            gitlab_dedicated_instance: (Boolean) Indicates whether the instance was provisioned for GitLab Dedicated.
            gitlab_environment_toolkit_instance: (Boolean) Indicates whether the instance was provisioned with the GitLab Environment Toolkit for Service Ping reporting.
            gitlab_shell_operation_limit: (Number) Maximum number of Git operations per minute a user can perform.
            gitpod_enabled: (Boolean) Enable Gitpod integration.
            gitpod_url: (String) The Gitpod instance URL for integration.
            globally_allowed_ips: (String) Comma-separated list of IP addresses and CIDRs always allowed for inbound traffic. For example, 1.1.1.1, 2.2.2.0/24.
            grafana_enabled: (Boolean) Enable Grafana.
            grafana_url: (String) Grafana URL.
            gravatar_enabled: (Boolean) Enable Gravatar.
            group_owners_can_manage_default_branch_protection: (Boolean) Prevent overrides of default branch protection.
            hashed_storage_enabled: '(Boolean) Create new projects using hashed storage paths: Enable immutable, hash-based paths and repository names to store repositories on disk. This prevents repositories from having to be moved or renamed when the Project URL changes and may improve disk I/O performance. (Always enabled in GitLab versions 13.0 and later, configuration is scheduled for removal in 14.0).'
            help_page_hide_commercial_content: (Boolean) Hide marketing-related entries from help.
            help_page_support_url: (String) Alternate support URL for help page and help dropdown.
            help_page_text: (String) Custom text displayed on the help page.
            help_text: (String) GitLab server administrator information.
            hide_third_party_offers: (Boolean) Do not display offers from third parties in GitLab.
            home_page_url: (String) Redirect to this URL when not logged in.
            housekeeping_enabled: |-
                (Boolean) Enable or disable Git housekeeping.
                If enabled, requires either housekeeping_optimize_repository_period OR housekeeping_bitmaps_enabled, housekeeping_full_repack_period, housekeeping_gc_period, and housekeeping_incremental_repack_period.
                Options housekeeping_bitmaps_enabled, housekeeping_full_repack_period, housekeeping_gc_period, and housekeeping_incremental_repack_period are deprecated. Use housekeeping_optimize_repository_period instead.
            housekeeping_full_repack_period: (Number, Deprecated) Number of Git pushes after which an incremental git repack is run.
            housekeeping_gc_period: (Number, Deprecated) Number of Git pushes after which git gc is run.
            housekeeping_incremental_repack_period: (Number, Deprecated) Number of Git pushes after which an incremental git repack is run.
            housekeeping_optimize_repository_period: (Number) Number of Git pushes after which an incremental git repack is run.
            html_emails_enabled: (Boolean) Enable HTML emails.
            id: (String) The ID of this resource.
            import_sources: '(List of String) Sources to allow project import from. Valid values are: github, bitbucket, bitbucket_server, fogbugz, git, gitlab_project, gitea, manifest'
            in_product_marketing_emails_enabled: (Boolean) Enable in-product marketing emails.
            inactive_projects_delete_after_months: (Number) If delete_inactive_projects is true, the time (in months) to wait before deleting inactive projects.
            inactive_projects_min_size_mb: (Number) If delete_inactive_projects is true, the minimum repository size for projects to be checked for inactivity.
            inactive_projects_send_warning_email_after_months: (Number) If delete_inactive_projects is true, sets the time (in months) to wait before emailing maintainers that the project is scheduled be deleted because it is inactive.
            include_optional_metrics_in_service_ping: (Boolean) Whether or not optional metrics are enabled in Service Ping.
            invisible_captcha_enabled: (Boolean) Enable Invisible CAPTCHA spam detection during sign-up.
            issues_create_limit: (Number) Max number of issue creation requests per minute per user.
            jira_connect_application_key: (String) ID of the OAuth application used to authenticate with the GitLab for Jira Cloud app.
            jira_connect_proxy_url: (String) URL of the GitLab instance used as a proxy for the GitLab for Jira Cloud app.
            jira_connect_public_key_storage_enabled: (Boolean) Enable public key storage for the GitLab for Jira Cloud app.
            keep_latest_artifact: (Boolean) Prevent the deletion of the artifacts from the most recent successful jobs, regardless of the expiry time.
            local_markdown_version: (Number) Increase this value when any cached Markdown should be invalidated.
            lock_duo_features_enabled: (Boolean) Indicates whether the GitLab Duo features enabled setting is enforced for all subgroups. Self-managed, Premium and Ultimate only.
            lock_memberships_to_ldap: (Boolean) Set to true to lock all memberships to LDAP. Premium and Ultimate only.
            mailgun_events_enabled: (Boolean) Enable Mailgun event receiver.
            mailgun_signing_key: (String, Sensitive) The Mailgun HTTP webhook signing key for receiving events from webhook.
            maintenance_mode: (Boolean) When instance is in maintenance mode, non-administrative users can sign in with read-only access and make read-only API requests.
            maintenance_mode_message: (String) Message displayed when instance is in maintenance mode.
            maven_package_requests_forwarding: (Boolean) Use repo.maven.apache.org as a default remote repository when the package is not found in the GitLab Package Registry for Maven. Premium and Ultimate only.
            max_artifacts_size: (Number) Maximum artifacts size in MB.
            max_attachment_size: (Number) Limit attachment size in MB.
            max_decompressed_archive_size: (Number) Maximum decompressed archive size in bytes.
            max_export_size: (Number) Maximum export size in MB. 0 for unlimited.
            max_import_remote_file_size: (Number) Maximum remote file size for imports from external object storages.
            max_import_size: (Number) Maximum import size in MB. 0 for unlimited.
            max_login_attempts: (Number) Maximum number of sign-in attempts before locking out the user.
            max_number_of_repository_downloads: '(Number) Maximum number of unique repositories a user can download in the specified time period before they are banned. Maximum: 10,000 repositories.'
            max_number_of_repository_downloads_within_time_period: '(Number) Reporting time period (in seconds). Maximum: 864000 seconds (10 days).'
            max_pages_size: (Number) Maximum size of pages repositories in MB.
            max_personal_access_token_lifetime: (Number) Maximum allowable lifetime for access tokens in days.
            max_ssh_key_lifetime: (Number) Maximum allowable lifetime for SSH keys in days.
            max_terraform_state_size_bytes: (Number) Maximum size in bytes of the Terraform state files. Set this to 0 for unlimited file size.
            metrics_method_call_threshold: (Number) A method call is only tracked when it takes longer than the given amount of milliseconds.
            minimum_password_length: (Number) Indicates whether passwords require a minimum length. Premium and Ultimate only.
            mirror_available: (Boolean) Allow repository mirroring to configured by project Maintainers. If disabled, only Administrators can configure repository mirroring.
            mirror_capacity_threshold: (Number) Minimum capacity to be available before scheduling more mirrors preemptively.
            mirror_max_capacity: (Number) Maximum number of mirrors that can be synchronizing at the same time.
            mirror_max_delay: (Number) Maximum time (in minutes) between updates that a mirror can have when scheduled to synchronize.
            npm_package_requests_forwarding: (Boolean) Use npmjs.org as a default remote repository when the package is not found in the GitLab Package Registry for npm.
            nuget_skip_metadata_url_validation: (Boolean) Indicates whether to skip metadata URL validation for the NuGet package. Introduced in GitLab 17.0.
            outbound_local_requests_whitelist: (List of String) Define a list of trusted domains or IP addresses to which local requests are allowed when local requests for hooks and services are disabled.
            package_metadata_purl_types: (List of Number) List of package registry metadata to sync. See the list of the available values (https://gitlab.com/gitlab-org/gitlab/-/blob/ace16c20d5da7c4928dd03fb139692638b557fe3/app/models/concerns/enums/package_metadata.rb#L5). Self-managed, Ultimate only.
            package_registry_allow_anyone_to_pull_option: (Boolean) Enable to allow anyone to pull from Package Registry visible and changeable.
            package_registry_cleanup_policies_worker_capacity: (Number) Number of workers assigned to the packages cleanup policies.
            pages_domain_verification_enabled: (Boolean) Require users to prove ownership of custom domains. Domain verification is an essential security measure for public GitLab sites. Users are required to demonstrate they control a domain before it is enabled.
            password_authentication_enabled_for_git: (Boolean) Enable authentication for Git over HTTP(S) via a GitLab account password.
            password_authentication_enabled_for_web: (Boolean) Enable authentication for the web interface via a GitLab account password.
            password_lowercase_required: (Boolean) Indicates whether passwords require at least one lowercase letter.
            password_number_required: (Boolean) Indicates whether passwords require at least one number.
            password_symbol_required: (Boolean) Indicates whether passwords require at least one symbol character.
            password_uppercase_required: (Boolean) Indicates whether passwords require at least one uppercase letter.
            performance_bar_allowed_group_path: (String) Path of the group that is allowed to toggle the performance bar.
            personal_access_token_prefix: (String) Prefix for all generated personal access tokens.
            pipeline_limit_per_project_user_sha: (Number) Maximum number of pipeline creation requests per minute per user and commit.
            plantuml_enabled: '(Boolean) (If enabled, requires: plantuml_url) Enable PlantUML integration.'
            plantuml_url: (String) The PlantUML instance URL for integration.
            polling_interval_multiplier: (Number) Interval multiplier used by endpoints that perform polling. Set to 0 to disable polling.
            project_export_enabled: (Boolean) Enable project export.
            project_jobs_api_rate_limit: (Number) Maximum authenticated requests to /project/:id/jobs per minute.
            projects_api_rate_limit_unauthenticated: (Number) Max number of requests per 10 minutes per IP address for unauthenticated requests to the list all projects API. To disable throttling set to 0.
            prometheus_metrics_enabled: (Boolean) Enable Prometheus metrics.
            protected_ci_variables: (Boolean) CI/CD variables are protected by default.
            push_event_activities_limit: (Number) Number of changes (branches or tags) in a single push to determine whether individual push events or bulk push events are created. Bulk push events are created if it surpasses that value.
            push_event_hooks_limit: (Number) Number of changes (branches or tags) in a single push to determine whether webhooks and services fire or not. Webhooks and services aren’t submitted if it surpasses that value.
            pypi_package_requests_forwarding: (Boolean) Use pypi.org as a default remote repository when the package is not found in the GitLab Package Registry for PyPI.
            rate_limiting_response_text: (String) When rate limiting is enabled via the throttle_* settings, send this plain text response when a rate limit is exceeded. ‘Retry later’ is sent if this is blank.
            raw_blob_request_limit: (Number) Max number of requests per minute for each raw path. To disable throttling set to 0.
            recaptcha_enabled: '(Boolean) (If enabled, requires: recaptcha_private_key and recaptcha_site_key) Enable reCAPTCHA.'
            recaptcha_private_key: (String, Sensitive) Private key for reCAPTCHA.
            recaptcha_site_key: (String, Sensitive) Site key for reCAPTCHA.
            receive_max_input_size: (Number) Maximum push size (MB).
            receptive_cluster_agents_enabled: (Boolean) Enable receptive mode for GitLab Agents for Kubernetes.
            remember_me_enabled: (Boolean) Enable Remember me setting.
            repository_checks_enabled: (Boolean) GitLab periodically runs git fsck in all project and wiki repositories to look for silent disk corruption issues.
            repository_size_limit: (Number) Size limit per repository (MB).
            repository_storages: (List of String) (GitLab 13.0 and earlier) List of names of enabled storage paths, taken from gitlab.yml. New projects are created in one of these stores, chosen at random.
            repository_storages_weighted: (Map of Number) (GitLab 13.1 and later) Hash of names of taken from gitlab.yml to weights. New projects are created in one of these stores, chosen by a weighted random selection.
            require_admin_approval_after_user_signup: (Boolean) When enabled, any user that signs up for an account using the registration form is placed under a Pending approval state and has to be explicitly approved by an administrator.
            require_admin_two_factor_authentication: (Boolean) Allow administrators to require 2FA for all administrators on the instance.
            require_personal_access_token_expiry: (Boolean) When enabled, users must set an expiration date when creating a group or project access token, or a personal access token owned by a non-service account.
            require_two_factor_authentication: '(Boolean) (If enabled, requires: two_factor_grace_period) Require all users to set up Two-factor authentication.'
            restricted_visibility_levels: (List of String) Selected levels cannot be used by non-Administrator users for groups, projects or snippets. Can take private, internal and public as a parameter. Null means there is no restriction.
            rsa_key_restriction: (Number) The minimum allowed bit length of an uploaded RSA key. 0 means no restriction. -1 disables RSA keys.
            search_rate_limit: (Number) Max number of requests per minute for performing a search while authenticated. To disable throttling set to 0.
            search_rate_limit_unauthenticated: (Number) Max number of requests per minute for performing a search while unauthenticated. To disable throttling set to 0.
            security_approval_policies_limit: '(Number) Maximum number of active merge request approval policies per security policy project. Maximum: 20'
            security_policy_global_group_approvers_enabled: (Boolean) Whether to look up merge request approval policy approval groups globally or within project hierarchies.
            security_txt_content: (String) Public security contact information.
            send_user_confirmation_email: (Boolean) Send confirmation email on sign-up.
            service_access_tokens_expiration_enforced: (Boolean) Flag to indicate if token expiry date can be optional for service account users
            session_expire_delay: (Number) Session duration in minutes. GitLab restart is required to apply changes.
            shared_runners_enabled: '(Boolean) (If enabled, requires: shared_runners_text and shared_runners_minutes) Enable shared runners for new projects.'
            shared_runners_minutes: (Number) Set the maximum number of CI/CD minutes that a group can use on shared runners per month.
            shared_runners_text: (String) Shared runners text.
            sidekiq_job_limiter_compression_threshold_bytes: (Number) The threshold in bytes at which Sidekiq jobs are compressed before being stored in Redis.
            sidekiq_job_limiter_limit_bytes: (Number) The threshold in bytes at which Sidekiq jobs are rejected. 0 means do not reject any job.
            sidekiq_job_limiter_mode: (String) track or compress. Sets the behavior for Sidekiq job size limits.
            sign_in_text: (String) Text on the login page.
            signup_enabled: (Boolean) Enable registration.
            silent_admin_exports_enabled: (Boolean) Enable Silent admin exports.
            silent_mode_enabled: (Boolean) Enable Silent mode.
            slack_app_enabled: '(Boolean) (If enabled, requires: slack_app_id, slack_app_secret and slack_app_secret) Enable Slack app.'
            slack_app_id: (String) The app ID of the Slack-app.
            slack_app_secret: (String, Sensitive) The app secret of the Slack-app.
            slack_app_signing_secret: (String, Sensitive) The signing secret of the Slack-app.
            slack_app_verification_token: (String) The verification token of the Slack-app.
            snippet_size_limit: (Number) Max snippet content size in bytes.
            snowplow_app_id: (String) The Snowplow site name / application ID. (for example, gitlab)
            snowplow_collector_hostname: (String) The Snowplow collector hostname. (for example, snowplow.trx.gitlab.net)
            snowplow_cookie_domain: (String) The Snowplow cookie domain. (for example, .gitlab.com)
            snowplow_database_collector_hostname: (String) The Snowplow collector for database events hostname. (for example, db-snowplow.trx.gitlab.net)
            snowplow_enabled: (Boolean) Enable snowplow tracking.
            sourcegraph_enabled: (Boolean) Enables Sourcegraph integration. If enabled, requires sourcegraph_url.
            sourcegraph_public_only: (Boolean) Blocks Sourcegraph from being loaded on private and internal projects.
            sourcegraph_url: (String) The Sourcegraph instance URL for integration.
            spam_check_api_key: (String, Sensitive) API key used by GitLab for accessing the Spam Check service endpoint.
            spam_check_endpoint_enabled: (Boolean) Enables spam checking using external Spam Check API endpoint.
            spam_check_endpoint_url: (String) URL of the external Spamcheck service endpoint. Valid URI schemes are grpc or tls. Specifying tls forces communication to be encrypted.
            static_objects_external_storage_auth_token: (String, Sensitive) Authentication token for the external storage linked in static_objects_external_storage_url.
            static_objects_external_storage_url: (String, Sensitive) URL to an external storage for repository static objects.
            suggest_pipeline_enabled: (Boolean) Enable pipeline suggestion banner.
            terminal_max_session_time: (Number) Maximum time for web terminal websocket connection (in seconds). Set to 0 for unlimited time.
            terms: '(String) (Required by: enforce_terms) Markdown content for the ToS.'
            throttle_authenticated_api_enabled: '(Boolean) (If enabled, requires: throttle_authenticated_api_period_in_seconds and throttle_authenticated_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).'
            throttle_authenticated_api_period_in_seconds: (Number) Rate limit period (in seconds).
            throttle_authenticated_api_requests_per_period: (Number) Maximum requests per period per user.
            throttle_authenticated_packages_api_enabled: '(Boolean) (If enabled, requires: throttle_authenticated_packages_api_period_in_seconds and throttle_authenticated_packages_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.'
            throttle_authenticated_packages_api_period_in_seconds: (Number) Rate limit period (in seconds). View Package Registry rate limits for more details.
            throttle_authenticated_packages_api_requests_per_period: (Number) Maximum requests per period per user. View Package Registry rate limits for more details.
            throttle_authenticated_web_enabled: '(Boolean) (If enabled, requires: throttle_authenticated_web_period_in_seconds and throttle_authenticated_web_requests_per_period) Enable authenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).'
            throttle_authenticated_web_period_in_seconds: (Number) Rate limit period (in seconds).
            throttle_authenticated_web_requests_per_period: (Number) Maximum requests per period per user.
            throttle_unauthenticated_api_enabled: '(Boolean) (If enabled, requires: throttle_unauthenticated_api_period_in_seconds and throttle_unauthenticated_api_requests_per_period) Enable unauthenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).'
            throttle_unauthenticated_api_period_in_seconds: (Number) Rate limit period in seconds.
            throttle_unauthenticated_api_requests_per_period: (Number) Max requests per period per IP.
            throttle_unauthenticated_packages_api_enabled: '(Boolean) (If enabled, requires: throttle_unauthenticated_packages_api_period_in_seconds and throttle_unauthenticated_packages_api_requests_per_period) Enable authenticated API request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots). View Package Registry rate limits for more details.'
            throttle_unauthenticated_packages_api_period_in_seconds: (Number) Rate limit period (in seconds). View Package Registry rate limits for more details.
            throttle_unauthenticated_packages_api_requests_per_period: (Number) Maximum requests per period per user. View Package Registry rate limits for more details.
            throttle_unauthenticated_web_enabled: '(Boolean) (If enabled, requires: throttle_unauthenticated_web_period_in_seconds and throttle_unauthenticated_web_requests_per_period) Enable unauthenticated web request rate limit. Helps reduce request volume (for example, from crawlers or abusive bots).'
            throttle_unauthenticated_web_period_in_seconds: (Number) Rate limit period in seconds.
            throttle_unauthenticated_web_requests_per_period: (Number) Max requests per period per IP.
            time_tracking_limit_to_hours: (Boolean) Limit display of time tracking units to hours.
            two_factor_grace_period: (Number) Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication.
            unconfirmed_users_delete_after_days: (Number) Specifies how many days after sign-up to delete users who have not confirmed their email. Only applicable if delete_unconfirmed_users is set to true. Must be 1 or greater. Self-managed, Premium and Ultimate only.
            unique_ips_limit_enabled: '(Boolean) (If enabled, requires: unique_ips_limit_per_user and unique_ips_limit_time_window) Limit sign in from multiple IPs.'
            unique_ips_limit_per_user: (Number) Maximum number of IPs per user.
            unique_ips_limit_time_window: (Number) How many seconds an IP is counted towards the limit.
            update_runner_versions_enabled: (Boolean) Fetch GitLab Runner release version data from GitLab.com.
            usage_ping_enabled: (Boolean) Every week GitLab reports license usage back to GitLab, Inc.
            use_clickhouse_for_analytics: (Boolean) Enables ClickHouse as a data source for analytics reports. ClickHouse must be configured for this setting to take effect. Available on Premium and Ultimate only.
            user_deactivation_emails_enabled: (Boolean) Send an email to users upon account deactivation.
            user_default_external: (Boolean) Newly registered users are external by default.
            user_default_internal_regex: (String) Specify an email address regex pattern to identify default internal users.
            user_defaults_to_private_profile: (Boolean) Newly created users have private profile by default.
            user_oauth_applications: (Boolean) Allow users to register any application to use GitLab as an OAuth provider.
            user_show_add_ssh_key_message: (Boolean) When set to false disable the You won't be able to pull or push project code via SSH warning shown to users with no uploaded SSH key.
            valid_runner_registrars: (List of String) List of types which are allowed to register a GitLab Runner. Can be [], ['group'], ['project'] or ['group', 'project'].
            version_check_enabled: (Boolean) Let GitLab inform you when an update is available.
            web_ide_clientside_preview_enabled: (Boolean) Live Preview (allow live previews of JavaScript projects in the Web IDE using CodeSandbox Live Preview).
            whats_new_variant: '(String) What''s new variant, possible values: all_tiers, current_tier, and disabled.'
            wiki_page_max_content_bytes: (Number) Maximum wiki page content size in bytes. The minimum value is 1024 bytes.
        importStatements: []
    gitlab_branch:
        subCategory: ""
        description: 'The gitlab_branch resource allows to manage the lifecycle of a repository branch. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/branches/'
        name: gitlab_branch
        title: gitlab_branch Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "name": "example",
                  "project": "${gitlab_project.example.id}",
                  "ref": "main"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
        argumentDocs:
            author_email: (String)
            author_name: (String)
            authored_date: (String)
            can_push: (Boolean) Bool, true if you can push to the branch.
            commit: (Set of Object) The commit associated with the branch ref. (see below for nested schema)
            committed_date: (String)
            committer_email: (String)
            committer_name: (String)
            default: (Boolean) Bool, true if branch is the default branch for the project.
            developer_can_merge: (Boolean) Bool, true if developer level access allows to merge branch.
            developer_can_push: (Boolean) Bool, true if developer level access allows git push.
            id: (String) The ID of this resource.
            keep_on_destroy: (Boolean) Indicates whether the branch is kept once the resource destroyed (must be applied before a destroy).
            merged: (Boolean) Bool, true if the branch has been merged into its parent.
            message: (String)
            name: (String) The name for this branch.
            parent_ids: (Set of String)
            project: (String) The ID or full path of the project which the branch is created against.
            protected: (Boolean) Bool, true if branch has branch protection.
            ref: (String) The ref which the branch is created from.
            short_id: (String)
            title: (String)
            web_url: (String) The url of the created branch (https).
        importStatements:
            - |-
              # Gitlab branches can be imported with a key composed of `<project_id>:<branch_name>`, e.g.
              terraform import gitlab_branch.example "12345:develop"
    gitlab_branch_protection:
        subCategory: ""
        description: 'The gitlab_branch_protection resource allows to manage the lifecycle of a protected branch of a repository. ~> Branch Protection Behavior for the default branch Depending on the GitLab instance, group or project setting the default branch of a project is created automatically by GitLab behind the scenes. Due to some https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/792 limitations https://discuss.hashicorp.com/t/ignore-the-order-of-a-complex-typed-list/42242 in the Terraform Provider SDK and the GitLab API, when creating a new project and trying to manage the branch protection setting for its default branch the gitlab_branch_protection resource will automatically take ownership of the default branch without an explicit import by unprotecting and properly protecting it again. Having multiple gitlab_branch_protection resources for the same project and default branch will result in them overriding each other - make sure to only have a single one. This behavior might change in the future. ~> The allowed_to_push, allowed_to_merge, allowed_to_unprotect, unprotect_access_level and code_owner_approval_required attributes require a GitLab Enterprise instance. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/protected_branches/'
        name: gitlab_branch_protection
        title: gitlab_branch_protection Resource - terraform-provider-gitlab
        examples:
            - name: BranchProtect
              manifest: |-
                {
                  "allow_force_push": true,
                  "allowed_to_merge": [
                    {
                      "user_id": 15
                    },
                    {
                      "user_id": 37
                    }
                  ],
                  "allowed_to_push": [
                    {
                      "user_id": 5
                    },
                    {
                      "user_id": 521
                    }
                  ],
                  "allowed_to_unprotect": [
                    {
                      "user_id": 15
                    },
                    {
                      "group_id": 42
                    }
                  ],
                  "branch": "BranchProtected",
                  "code_owner_approval_required": true,
                  "merge_access_level": "developer",
                  "project": "12345",
                  "push_access_level": "developer",
                  "unprotect_access_level": "developer"
                }
            - name: main
              manifest: |-
                {
                  "branch": "main",
                  "dynamic": {
                    "allowed_to_push": [
                      {
                        "content": [
                          {
                            "user_id": "${allowed_to_push.value}"
                          }
                        ],
                        "for_each": [
                          50,
                          55,
                          60
                        ]
                      }
                    ]
                  },
                  "merge_access_level": "maintainer",
                  "project": "12345",
                  "push_access_level": "maintainer",
                  "unprotect_access_level": "maintainer"
                }
              references:
                dynamic.content.user_id: allowed_to_push.value
        argumentDocs:
            access_level: '(String) Access levels allowed to merge to protected branch. Valid values are: no one, developer, maintainer.'
            access_level_description: (String) Readable description of access level.
            allow_force_push: (Boolean) Can be set to true to allow users with push access to force push.
            allowed_to_merge: (Block Set) Array of access levels and user(s)/group(s) allowed to merge to protected branch. (see below for nested schema)
            allowed_to_push: (Block Set) Array of access levels and user(s)/group(s) allowed to push to protected branch. (see below for nested schema)
            allowed_to_unprotect: (Block Set) Array of access levels and user(s)/group(s) allowed to unprotect push to protected branch. (see below for nested schema)
            branch: (String) Name of the branch.
            branch_protection_id: (Number) The ID of the branch protection (not the branch name).
            code_owner_approval_required: (Boolean) Can be set to true to require code owner approval before merging. Only available for Premium and Ultimate instances.
            deploy_key_id: (Number) The ID of a GitLab deploy key allowed to perform the relevant action. Mutually exclusive with group_id and user_id. This field is read-only until Gitlab 17.5.
            group_id: (Number) The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with user_id.
            id: (String) The ID of this Terraform resource. In the format of <project-id:branch>.
            merge_access_level: '(String) Access levels allowed to merge. Valid values are: no one, developer, maintainer.'
            project: (String) The id of the project.
            push_access_level: '(String) Access levels allowed to push. Valid values are: no one, developer, maintainer.'
            unprotect_access_level: '(String) Access levels allowed to unprotect. Valid values are: developer, maintainer, admin.'
            user_id: (Number) The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with group_id.
        importStatements:
            - |-
              # Gitlab protected branches can be imported with a key composed of `<project_id>:<branch>`, e.g.
              terraform import gitlab_branch_protection.BranchProtect "12345:main"
    gitlab_cluster_agent:
        subCategory: ""
        description: 'The gitlab_cluster_agent resource allows to manage the lifecycle of a GitLab Agent for Kubernetes. -> Note that this resource only registers the agent, but doesn''t configure it. The configuration needs to be manually added as described in the docs https://docs.gitlab.com/user/clusters/agent/install/index/#create-an-agent-configuration-file. However, a gitlab_repository_file resource may be used to achieve that. -> Requires at least maintainer permissions on the project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/cluster_agents/'
        name: gitlab_cluster_agent
        title: gitlab_cluster_agent Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "name": "agent-1",
                  "project": "12345"
                }
              dependencies:
                gitlab_repository_file.example_agent_config: |-
                    {
                      "author_email": "terraform@example.com",
                      "author_name": "Terraform",
                      "branch": "main",
                      "commit_message": "feature: add agent config for ${gitlab_cluster_agent.example.name} [skip ci]",
                      "content": "${base64encode(\u003c\u003cCONTENT\n# the GitLab Agent for Kubernetes configuration goes here ...\n  CONTENT\n  )}",
                      "file_path": ".gitlab/agents/${gitlab_cluster_agent.example.name}/config.yaml",
                      "project": "${gitlab_cluster_agent.example.project}"
                    }
        argumentDocs:
            agent_id: (Number) The ID of the agent.
            created_at: (String) The ISO8601 datetime when the agent was created.
            created_by_user_id: (Number) The ID of the user who created the agent.
            id: (String) The ID of this resource.
            name: (String) The Name of the agent.
            project: (String) ID or full path of the project maintained by the authenticated user.
        importStatements:
            - |-
              # GitLab Agent for Kubernetes can be imported with the following command and the id pattern `<project>:<agent-id>`
              terraform import gitlab_cluster_agent.example '12345:42'
    gitlab_cluster_agent_token:
        subCategory: ""
        description: 'The gitlab_cluster_agent_token resource allows to manage the lifecycle of a token for a GitLab Agent for Kubernetes. -> Requires at least maintainer permissions on the project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/cluster_agents/#create-an-agent-token'
        name: gitlab_cluster_agent_token
        title: gitlab_cluster_agent_token Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "agent_id": 42,
                  "description": "some token",
                  "name": "some-token",
                  "project": "12345"
                }
              dependencies:
                gitlab_cluster_agent.this: |-
                    {
                      "name": "my-agent",
                      "project": "${data.gitlab_project.this.id}"
                    }
                helm_release.gitlab_agent: |-
                    {
                      "chart": "gitlab-agent",
                      "create_namespace": true,
                      "name": "gitlab-agent",
                      "namespace": "gitlab-agent",
                      "repository": "https://charts.gitlab.io",
                      "set": [
                        {
                          "name": "config.token",
                          "value": "${gitlab_cluster_agent_token.this.token}"
                        }
                      ],
                      "version": "1.2.0"
                    }
            - name: this
              manifest: |-
                {
                  "agent_id": "${gitlab_cluster_agent.this.agent_id}",
                  "description": "Token for the my-agent used with `gitlab-agent` Helm Chart",
                  "name": "my-agent-token",
                  "project": "${data.gitlab_project.this.id}"
                }
              references:
                agent_id: gitlab_cluster_agent.this.agent_id
                project: data.gitlab_project.this.id
              dependencies:
                gitlab_cluster_agent.this: |-
                    {
                      "name": "my-agent",
                      "project": "${data.gitlab_project.this.id}"
                    }
                helm_release.gitlab_agent: |-
                    {
                      "chart": "gitlab-agent",
                      "create_namespace": true,
                      "name": "gitlab-agent",
                      "namespace": "gitlab-agent",
                      "repository": "https://charts.gitlab.io",
                      "set": [
                        {
                          "name": "config.token",
                          "value": "${gitlab_cluster_agent_token.this.token}"
                        }
                      ],
                      "version": "1.2.0"
                    }
        argumentDocs:
            agent_id: (Number) The ID of the agent.
            created_at: (String) The ISO8601 datetime when the agent was created.
            created_by_user_id: (Number) The ID of the user who created the agent.
            description: (String) The Description for the agent.
            id: (String) The ID of this resource.
            last_used_at: (String) The ISO8601 datetime when the token was last used.
            name: (String) The Name of the agent.
            project: (String) ID or full path of the project maintained by the authenticated user.
            status: (String) The status of the token. Valid values are active, revoked.
            token: (String, Sensitive) The secret token for the agent. The token is not available in imported resources.
            token_id: (Number) The ID of the token.
        importStatements:
            - |-
              # A token for a GitLab Agent for Kubernetes can be imported with the following command and the id pattern `<project>:<agent-id>:<token-id>`:
              terraform import gitlab_cluster_agent_token.example '12345:42:1'

              # ATTENTION: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_compliance_framework:
        subCategory: ""
        description: 'The gitlab_compliance_framework resource allows to manage the lifecycle of a compliance framework on top-level groups. There can be only one default compliance framework. Of all the configured compliance frameworks marked as default, the last one applied will be the default compliance framework. -> This resource requires a GitLab Enterprise instance with a Premium license to create the compliance framework. -> This resource requires a GitLab Enterprise instance with an Ultimate license to specify a compliance pipeline configuration in the compliance framework. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationcreatecomplianceframework'
        name: gitlab_compliance_framework
        title: gitlab_compliance_framework Resource - terraform-provider-gitlab
        examples:
            - name: sample
              manifest: |-
                {
                  "color": "#87BEEF",
                  "default": false,
                  "description": "A HIPAA Compliance Framework",
                  "name": "HIPAA",
                  "namespace_path": "top-level-group",
                  "pipeline_configuration_full_path": ".hipaa.yml@top-level-group/compliance-frameworks"
                }
        argumentDocs:
            color: '(String) New color representation of the compliance framework in hex format. e.g. #FCA121.'
            default: '(Boolean) Set this compliance framework as the default framework for the group. Default: false'
            description: (String) Description for the compliance framework.
            framework_id: (String) Globally unique ID of the compliance framework.
            id: (String) The ID of this Terraform resource. In the format of <namespace_path>:<framework_id>.
            name: (String) Name for the compliance framework.
            namespace_path: (String) Full path of the namespace to add the compliance framework to.
            pipeline_configuration_full_path: '(String) Full path of the compliance pipeline configuration stored in a project repository, such as .gitlab/.compliance-gitlab-ci.yml@compliance/hipaa. Required format: path/file.y[a]ml@group-name/project-name Note: Ultimate license required.'
        importStatements:
            - |-
              # Gitlab compliance frameworks can be imported with a key composed of `<namespace_path>:<framework_id>`, e.g.
              terraform import gitlab_compliance_framework.sample "top-level-group:gid://gitlab/ComplianceManagement::Framework/12345"
    gitlab_deploy_key:
        subCategory: ""
        description: 'The gitlab_deploy_key resource allows to manage the lifecycle of a deploy key. -> To enable an already existing deploy key for another project use the gitlab_deploy_key_enable resource. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/deploy_keys/'
        name: gitlab_deploy_key
        title: gitlab_deploy_key Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "key": "ssh-ed25519 AAAA...",
                  "project": "example/deploying",
                  "title": "Example deploy key"
                }
        argumentDocs:
            can_push: (Boolean) Allow this deploy key to be used to push changes to the project. Defaults to false.
            deploy_key_id: (Number) The id of the project deploy key.
            id: (String) The ID of this resource.
            key: (String) The public ssh key body.
            project: (String) The name or id of the project to add the deploy key to.
            title: (String) A title to describe the deploy key with.
        importStatements:
            - |-
              # GitLab deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.
              # `project_id` can be whatever the [get single project api][get_single_project] takes for
              # its `:id` value, so for example:
              terraform import gitlab_deploy_key.test 1:3
              terraform import gitlab_deploy_key.test richardc/example:3
    gitlab_deploy_key_enable:
        subCategory: ""
        description: 'The gitlab_deploy_key_enable resource allows to enable an already existing deploy key (see gitlab_deploy_key resource) for a specific project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/deploy_keys/#enable-a-deploy-key'
        name: gitlab_deploy_key_enable
        title: gitlab_deploy_key_enable Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "key_id": "${gitlab_deploy_key.parent.deploy_key_id}",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                key_id: gitlab_deploy_key.parent.deploy_key_id
                project: gitlab_project.foo.id
              dependencies:
                gitlab_deploy_key.parent: |-
                    {
                      "key": "ssh-ed25519 AAAA...",
                      "project": "${gitlab_project.parent.id}",
                      "title": "Example deploy key"
                    }
                gitlab_project.foo: |-
                    {
                      "name": "foo_project"
                    }
                gitlab_project.parent: |-
                    {
                      "name": "parent_project"
                    }
        argumentDocs:
            can_push: (Boolean) Can deploy key push to the project's repository.
            id: (String) The ID of this resource.
            key: (String) Deploy key.
            key_id: (String) The Gitlab key id for the pre-existing deploy key
            project: (String) The name or id of the project to add the deploy key to.
            title: (String) Deploy key's title.
        importStatements:
            - |-
              # GitLab enabled deploy keys can be imported using an id made up of `{project_id}:{deploy_key_id}`, e.g.
              # `project_id` can be whatever the [get single project api][get_single_project] takes for
              # its `:id` value, so for example:
              terraform import gitlab_deploy_key_enable.example 12345:67890
              terraform import gitlab_deploy_key_enable.example richardc/example:67890
    gitlab_deploy_token:
        subCategory: ""
        description: 'The gitlab_deploy_token resource allows to manage the lifecycle of group and project deploy tokens. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/deploy_tokens/'
        name: gitlab_deploy_token
        title: gitlab_deploy_token Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "expires_at": "2020-03-14T00:00:00.000Z",
                  "name": "Example deploy token",
                  "project": "example/deploying",
                  "scopes": [
                    "read_repository",
                    "read_registry"
                  ],
                  "username": "example-username"
                }
            - name: example-two
              manifest: |-
                {
                  "expires_at": "${timeadd(timestamp(), \"24h\")}",
                  "name": "Example deploy token expires in 24h",
                  "project": "12345678"
                }
            - name: example
              manifest: |-
                {
                  "group": "example/deploying",
                  "name": "Example group deploy token",
                  "scopes": [
                    "read_repository"
                  ]
                }
        argumentDocs:
            deploy_token_id: (Number) The id of the deploy token.
            expires_at: (String) Time the token will expire it, RFC3339 format. Will not expire per default.
            group: (String) The name or id of the group to add the deploy token to.
            id: (String) The ID of this resource.
            name: (String) A name to describe the deploy token with.
            project: (String) The name or id of the project to add the deploy token to.
            scopes: '(Set of String) Valid values: read_repository, read_registry, read_package_registry, write_registry, write_package_registry.'
            token: '(String, Sensitive) The secret token. This is only populated when creating a new deploy token. Note: The token is not available for imported resources.'
            username: (String) A username for the deploy token. Default is gitlab+deploy-token-{n}.
        importStatements:
            - |-
              # GitLab deploy tokens can be imported using an id made up of `{type}:{type_id}:{deploy_token_id}`, where type is one of: project, group.
              terraform import gitlab_deploy_token.group_token group:1:3
              terraform import gitlab_deploy_token.project_token project:1:4

              # Note: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_global_level_notifications:
        subCategory: ""
        description: 'The gitlab_global_level_notifications resource allows to manage global notifications. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/notification_settings/#group--project-level-notification-settings'
        name: gitlab_global_level_notifications
        title: gitlab_global_level_notifications Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "level": "watch"
                }
            - name: foo
              manifest: |-
                {
                  "level": "custom",
                  "new_merge_request": true
                }
        argumentDocs:
            close_issue: (Boolean) Enable notifications for closed issues. Can only be used when level is custom.
            close_merge_request: (Boolean) Enable notifications for closed merge requests. Can only be used when level is custom.
            failed_pipeline: (Boolean) Enable notifications for failed pipelines. Can only be used when level is custom.
            fixed_pipeline: (Boolean) Enable notifications for fixed pipelines. Can only be used when level is custom.
            id: (String) The ID of the resource.This is a static value named gitlab
            issue_due: (Boolean) Enable notifications for due issues. Can only be used when level is custom.
            level: '(String) The level of the notification. Valid values are: disabled, participating, watch, global, mention, custom.'
            merge_merge_request: (Boolean) Enable notifications for merged merge requests. Can only be used when level is custom.
            merge_when_pipeline_succeeds: (Boolean) Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when level is custom.
            moved_project: (Boolean) Enable notifications for moved projects. Can only be used when level is custom.
            new_issue: (Boolean) Enable notifications for new issues. Can only be used when level is custom.
            new_merge_request: (Boolean) Enable notifications for new merge requests. Can only be used when level is custom.
            new_note: (Boolean) Enable notifications for new notes on merge requests. Can only be used when level is custom.
            push_to_merge_request: (Boolean) Enable notifications for push to merge request branches. Can only be used when level is custom.
            reassign_issue: (Boolean) Enable notifications for issue reassignments. Can only be used when level is custom.
            reassign_merge_request: (Boolean) Enable notifications for merge request reassignments. Can only be used when level is custom.
            reopen_issue: (Boolean) Enable notifications for reopened issues. Can only be used when level is custom.
            reopen_merge_request: (Boolean) Enable notifications for reopened merge requests. Can only be used when level is custom.
            success_pipeline: (Boolean) Enable notifications for successful pipelines. Can only be used when level is custom.
        importStatements:
            - |-
              # Note: You can import a global notification state using "gitlab" as the ID.
              # The ID will always be gitlab, because the global notificatio only exists
              # once per user

              terraform import gitlab_global_level_notifications.example gitlab
    gitlab_group:
        subCategory: ""
        description: 'The gitlab_group resource allows to manage the lifecycle of a group. -> On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use this provider nor the API to do this. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/'
        name: gitlab_group
        title: gitlab_group Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "An example group",
                  "name": "example",
                  "path": "example"
                }
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
            - name: example-two
              manifest: |-
                {
                  "description": "An example group with push rules",
                  "name": "example-two",
                  "path": "example-two",
                  "push_rules": [
                    {
                      "author_email_regex": "@example\\.com$",
                      "commit_committer_check": true,
                      "member_check": true,
                      "prevent_secrets": true
                    }
                  ]
                }
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
            - name: example-three
              manifest: |-
                {
                  "default_branch_protection_defaults": [
                    {
                      "allow_force_push": true,
                      "allowed_to_merge": [
                        "developer",
                        "maintainer"
                      ],
                      "allowed_to_push": [
                        "developer"
                      ],
                      "developer_can_initial_push": true
                    }
                  ],
                  "description": "An example group with default branch protection defaults",
                  "name": "example-three",
                  "path": "example-three"
                }
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
            - name: example-four
              manifest: |-
                {
                  "default_branch_protection_defaults": [
                    {
                      "allow_force_push": true,
                      "allowed_to_merge": [
                        "no one"
                      ],
                      "allowed_to_push": [
                        "no one"
                      ],
                      "developer_can_initial_push": true
                    }
                  ],
                  "description": "An example group with default branch protection defaults",
                  "name": "example-four",
                  "path": "example-four"
                }
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
            - name: example-five
              manifest: |-
                {
                  "default_branch": "develop",
                  "description": "An example group with a default branch name",
                  "name": "example",
                  "path": "example"
                }
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
        argumentDocs:
            allow_force_push: (Boolean) Allow force push for all users with push access.
            allowed_email_domains_list: (List of String) A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
            allowed_to_merge: '(List of String) An array of access levels allowed to merge. Valid values are: developer, maintainer, no one.'
            allowed_to_push: '(List of String) An array of access levels allowed to push. Valid values are: developer, maintainer, no one.'
            author_email_regex: (String) All commit author emails must match this regex, e.g. @my-company.com$.
            auto_devops_enabled: (Boolean) Default to Auto DevOps pipeline for all projects within this group.
            avatar: '(String) A local path to the avatar image to upload. Note: not available for imported resources.'
            avatar_hash: '(String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it''s not given, but an avatar is given, the avatar will be updated each time.'
            avatar_url: (String) The URL of the avatar image.
            branch_name_regex: (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
            commit_committer_check: (Boolean) Only commits pushed using verified emails are allowed.
            commit_committer_name_check: (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
            commit_message_negative_regex: (String) No commit message is allowed to match this regex, for example ssh\:\/\/.
            commit_message_regex: (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
            default_branch: (String) Initial default branch name.
            default_branch_protection: '(Number, Deprecated) See https://docs.gitlab.com/api/groups/#options-for-default_branch_protection. Valid values are: 0, 1, 2, 3, 4.'
            default_branch_protection_defaults: '(Block List, Max: 1) The default branch protection defaults (see below for nested schema)'
            deny_delete_tag: (Boolean) Deny deleting a tag.
            description: (String) The group's description.
            developer_can_initial_push: (Boolean) Allow developers to initial push.
            emails_enabled: (Boolean) Enable email notifications.
            extra_shared_runners_minutes_limit: (Number) Can be set by administrators only. Additional CI/CD minutes for this group.
            file_name_regex: (String) Filenames matching the regular expression provided in this attribute are not allowed, for example, (jar|exe)$.
            full_name: (String) The full name of the group.
            full_path: (String) The full path of the group.
            id: (String) The ID of this resource.
            ip_restriction_ranges: (List of String) A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
            lfs_enabled: (Boolean) Enable/disable Large File Storage (LFS) for the projects in this group.
            max_file_size: (Number) Maximum file size (MB) allowed.
            member_check: (Boolean) Allows only GitLab users to author commits.
            membership_lock: (Boolean) Users cannot be added to projects in this group.
            mentions_disabled: (Boolean) Disable the capability of a group from getting mentioned.
            name: (String) The name of the group.
            parent_id: (Number) Id of the parent group (creates a nested group).
            path: (String) The path of the group.
            permanently_remove_on_delete: (Boolean) Whether the group should be permanently removed during a delete operation. This only works with subgroups. Must be configured via an apply before the destroy is run.
            prevent_forking_outside_group: (Boolean) Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
            prevent_secrets: (Boolean) GitLab will reject any files that are likely to contain secrets.
            project_creation_level: '(String) Determine if developers can create projects in the group. Valid values are: noone, owner, maintainer, developer'
            push_rules: '(Block List, Max: 1) Push rules for the group. (see below for nested schema)'
            reject_non_dco_commits: (Boolean) Reject commit when it’s not DCO certified.
            reject_unsigned_commits: (Boolean) Only commits signed through GPG are allowed.
            request_access_enabled: (Boolean) Allow users to request member access.
            require_two_factor_authentication: (Boolean) Require all users in this group to setup Two-factor authentication.
            runners_token: (String, Sensitive) The group level registration token to use during runner setup.
            share_with_group_lock: (Boolean) Prevent sharing a project with another group within this group.
            shared_runners_minutes_limit: (Number) Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
            shared_runners_setting: '(String) Enable or disable shared runners for a group’s subgroups and projects. Valid values are: enabled, disabled_and_overridable, disabled_and_unoverridable, disabled_with_override.'
            subgroup_creation_level: '(String) Allowed to create subgroups. Valid values are: owner, maintainer.'
            two_factor_grace_period: (Number) Defaults to 48. Time before Two-factor authentication is enforced (in hours).
            visibility_level: '(String) The group''s visibility. Can be private, internal, or public. Valid values are: private, internal, public.'
            web_url: (String) Web URL of the group.
            wiki_access_level: (String) The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are disabled, private, enabled.
        importStatements:
            - |-
              # You can import a group state using `terraform import <resource> <id>`.  The
              # `id` can be whatever the [details of a group][details_of_a_group] api takes for
              # its `:id` value, so for example:
              terraform import gitlab_group.example example
    gitlab_group_access_token:
        subCategory: ""
        description: 'The gitlab_group_access_token resource allows to manage the lifecycle of a group access token. ~> Observability scopes are in beta and may not work on all instances. See more details in the documentation https://docs.gitlab.com/operations/tracing/ ~> Use rotation_configuration to automatically rotate tokens instead of using timestamp() as timestamp will cause changes with every plan. terraform apply must still be run to rotate the token. ~> Due to Automatic reuse detection https://docs.gitlab.com/api/group_access_tokens/#automatic-reuse-detection it''s possible that a new Group Access Token will immediately be revoked. Check if an old process using the old token is running if this happens. Upstream API: GitLab REST API https://docs.gitlab.com/api/group_access_tokens/'
        name: gitlab_group_access_token
        title: gitlab_group_access_token Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "access_level": "developer",
                  "expires_at": "2020-03-14",
                  "group": "25",
                  "name": "Example group access token",
                  "scopes": [
                    "api"
                  ]
                }
              dependencies:
                gitlab_group_variable.example: |-
                    {
                      "group": "25",
                      "key": "gat",
                      "value": "${gitlab_group_access_token.example.token}"
                    }
        argumentDocs:
            access_level: '(String) The access level for the group access token. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner. Default is maintainer.'
            active: (Boolean) True if the token is active.
            created_at: (String) Time the token has been created, RFC3339 format.
            description: (String) The description of the group access token.
            expiration_days: (Number) The duration (in days) the new token should be valid for.
            expires_at: (String) When the token will expire, YYYY-MM-DD format.
            group: (String) The ID or full path of the group.
            id: (String) The ID of the group access token.
            name: (String) The name of the group access token.
            revoked: (Boolean) True if the token is revoked.
            rotate_before_days: (Number) The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when terraform apply is run in that timeframe.
            rotation_configuration: (Attributes) The configuration for when to rotate a token automatically. Will not rotate a token until terraform apply is run. (see below for nested schema)
            scopes: '(Set of String) The scopes of the group access token. Valid values are: api, read_api, read_registry, write_registry, read_repository, write_repository, create_runner, manage_runner, ai_features, k8s_proxy, read_observability, write_observability'
            token: '(String, Sensitive) The token of the group access token. Note: the token is not available for imported resources.'
            user_id: (Number) The user_id associated to the token.
        importStatements:
            - |-
              # A GitLab Group Access Token can be imported using a key composed of `<group-id>:<token-id>`, e.g.
              terraform import gitlab_group_access_token.example "12345:1"

              # ATTENTION: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_group_badge:
        subCategory: ""
        description: 'The gitlab_group_badge resource allows to manage the lifecycle of group badges. Upstream API: GitLab REST API docs https://docs.gitlab.com/user/project/badges/#group-badges'
        name: gitlab_group_badge
        title: gitlab_group_badge Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "group": "${gitlab_group.foo.id}",
                  "image_url": "https://example.com/badge-123.svg",
                  "link_url": "https://example.com/badge-123"
                }
              references:
                group: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "name": "foo-group"
                    }
            - name: gitlab_pipeline
              manifest: |-
                {
                  "group": "${gitlab_group.foo.id}",
                  "image_url": "https://gitlab.example.com/%{project_path}/badges/%{default_branch}/pipeline.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/pipelines?ref=%{default_branch}"
                }
              references:
                group: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "name": "foo-group"
                    }
            - name: gitlab_coverage
              manifest: |-
                {
                  "group": "${gitlab_group.foo.id}",
                  "image_url": "https://gitlab.example.com/%{project_path}/badges/%{default_branch}/coverage.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/jobs"
                }
              references:
                group: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "name": "foo-group"
                    }
            - name: gitlab_release
              manifest: |-
                {
                  "group": "${gitlab_group.foo.id}",
                  "image_url": "https://gitlab.example.com/%{project_path}/-/badges/release.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/releases"
                }
              references:
                group: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "name": "foo-group"
                    }
        argumentDocs:
            group: (String) The ID or URL-encoded path of the group to add the badge to.
            id: (String) The ID of this Terraform resource. In the format of <group-id>:<badge-id>.
            image_url: (String) The image url which will be presented on group overview.
            link_url: (String) The url linked with the badge.
            name: (String) The name of the badge.
            rendered_image_url: (String) The image_url argument rendered (in case of use of placeholders).
            rendered_link_url: (String) The link_url argument rendered (in case of use of placeholders).
        importStatements:
            - |-
              # GitLab group badges can be imported using an id made up of `{group_id}:{badge_id}`, e.g.
              terraform import gitlab_group_badge.foo 1:3
    gitlab_group_cluster:
        subCategory: ""
        description: 'The gitlab_group_cluster resource allows to manage the lifecycle of a group cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_clusters/'
        name: gitlab_group_cluster
        title: gitlab_group_cluster Resource - terraform-provider-gitlab
        examples:
            - name: bar
              manifest: |-
                {
                  "domain": "example.com",
                  "enabled": true,
                  "environment_scope": "*",
                  "group": "${gitlab_group.foo.id}",
                  "kubernetes_api_url": "https://124.124.124",
                  "kubernetes_authorization_type": "rbac",
                  "kubernetes_ca_cert": "some-cert",
                  "kubernetes_token": "some-token",
                  "management_project_id": "123456",
                  "name": "bar-cluster"
                }
              references:
                group: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "name": "foo-group",
                      "path": "foo-path"
                    }
        argumentDocs:
            cluster_type: (String) Cluster type.
            created_at: (String) Create time.
            domain: (String) The base domain of the cluster.
            enabled: (Boolean) Determines if cluster is active or not. Defaults to true. This attribute cannot be read.
            environment_scope: (String) The associated environment to the cluster. Defaults to *.
            group: (String) The id of the group to add the cluster to.
            id: (String) The ID of this resource.
            kubernetes_api_url: (String) The URL to access the Kubernetes API.
            kubernetes_authorization_type: (String) The cluster authorization type. Valid values are rbac, abac, unknown_authorization. Defaults to rbac.
            kubernetes_ca_cert: (String) TLS certificate (needed if API is using a self-signed TLS certificate).
            kubernetes_token: (String, Sensitive) The token to authenticate against Kubernetes.
            managed: (Boolean) Determines if cluster is managed by gitlab or not. Defaults to true. This attribute cannot be read.
            management_project_id: (String) The ID of the management project for the cluster.
            name: (String) The name of cluster.
            platform_type: (String) Platform type.
            provider_type: (String) Provider type.
        importStatements:
            - |-
              # GitLab group clusters can be imported using an id made up of `groupid:clusterid`, e.g.
              terraform import gitlab_group_cluster.bar 123:321
    gitlab_group_custom_attribute:
        subCategory: ""
        description: 'The gitlab_group_custom_attribute resource allows to manage custom attributes for a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/custom_attributes/'
        name: gitlab_group_custom_attribute
        title: gitlab_group_custom_attribute Resource - terraform-provider-gitlab
        examples:
            - name: attr
              manifest: |-
                {
                  "group": "42",
                  "key": "location",
                  "value": "Greenland"
                }
        argumentDocs:
            group: (Number) The id of the group.
            id: (String) The ID of this resource.
            key: (String) Key for the Custom Attribute.
            value: (String) Value for the Custom Attribute.
        importStatements:
            - |-
              # You can import a group custom attribute using the an id made up of `{group-id}:{key}`, e.g.
              terraform import gitlab_group_custom_attribute.attr 42:location
    gitlab_group_dependency_proxy:
        subCategory: ""
        description: 'The gitlab_group_dependency_proxy resource allows managing the group docker dependency proxy. More than one dependency proxy per group will conflict with each other. If you''re looking to manage the project-level package dependency proxy, see the gitlab_project_package_registry_proxy resource instead. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationupdatedependencyproxysettings'
        name: gitlab_group_dependency_proxy
        title: gitlab_group_dependency_proxy Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "enabled": true,
                  "group": "1234",
                  "identity": "newidentity",
                  "secret": "somesecret"
                }
        argumentDocs:
            enabled: (Boolean) Indicates whether the proxy is enabled.
            group: (String) The ID or URL-encoded path of the group.
            id: (String) The ID of this Terraform resource. In the format of <group-id>.
            identity: (String) Identity credential used to authenticate with Docker Hub when pulling images. Can be a username (for password or personal access token (PAT)) or organization name (for organization access token (OAT)).
            secret: (String, Sensitive) Secret credential used to authenticate with Docker Hub when pulling images. Can be a password, personal access token (PAT), or organization access token (OAT). Cannot be imported.
        importStatements:
            - |-
              # You can import a group dependency proxy using the group id. e.g. `{group-id}`
              # "secret" will not populate when importing the dependency proxy, but will still
              # be required in the configuration.
              terraform import gitlab_group_dependency_proxy.foo 42
    gitlab_group_epic_board:
        subCategory: ""
        description: 'The gitlab_group_epic_board resource allows to manage the lifecycle of a epic board in a group. ~> Multiple epic boards on one group requires a GitLab Premium or above License. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_boards/'
        name: gitlab_group_epic_board
        title: gitlab_group_epic_board Resource - terraform-provider-gitlab
        examples:
            - name: epic_board
              manifest: |-
                {
                  "group": "${gitlab_group.example.path}",
                  "lists": [
                    {
                      "label_id": "${gitlab_group_label.label_1.label_id}"
                    }
                  ],
                  "name": "epic board 6"
                }
              references:
                group: gitlab_group.example.path
                lists.label_id: gitlab_group_label.label_1.label_id
              dependencies:
                gitlab_group.example: |-
                    {
                      "description": "An example group",
                      "name": "test_group",
                      "path": "test_group"
                    }
                gitlab_group_label.label_1: |-
                    {
                      "color": "#FF0000",
                      "group": "${gitlab_group.example.id}",
                      "name": "red-label"
                    }
                gitlab_group_label.label_3: |-
                    {
                      "color": "#003000",
                      "group": "${gitlab_group.example.id}",
                      "name": "label-3"
                    }
        argumentDocs:
            group: (String) The ID or URL-encoded path of the group owned by the authenticated user.
            id: (String) The ID of this Terraform resource. In the format of <group-id>:<epic-board-id>.
            label_id: (Number) The ID of the label the list should be scoped to.
            lists: (Block Set) The list of epic board lists. (see below for nested schema)
            name: (String) The name of the board.
            position: (Number) The position of the list within the board. The position for the list is sed on the its position in the lists array.
        importStatements:
            - |-
              # You can import this resource with an id made up of `{group-id}:{epic-board-id}`, e.g.
              terraform import gitlab_group_epic_board.agile 70:156
    gitlab_group_hook:
        subCategory: ""
        description: 'The gitlab_group_hook resource allows to manage the lifecycle of a group hook. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_webhooks/'
        name: gitlab_group_hook
        title: gitlab_group_hook Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Example Group Webhook",
                  "group": "example/hooked",
                  "merge_requests_events": true,
                  "name": "Example",
                  "url": "https://example.com/hook/example"
                }
            - name: all_attributes
              manifest: |-
                {
                  "branch_filter_strategy": "wildcard",
                  "confidential_issues_events": false,
                  "confidential_note_events": true,
                  "deployment_events": true,
                  "description": "Example Group Webhook",
                  "enable_ssl_verification": false,
                  "feature_flag_events": true,
                  "group": 1,
                  "issues_events": false,
                  "job_events": true,
                  "merge_requests_events": true,
                  "name": "Example",
                  "note_events": true,
                  "pipeline_events": true,
                  "push_events": true,
                  "push_events_branch_filter": "devel",
                  "releases_events": true,
                  "subgroup_events": true,
                  "tag_push_events": true,
                  "token": "supersecret",
                  "url": "http://example.com",
                  "wiki_page_events": true
                }
            - name: all_attributes
              manifest: |-
                {
                  "custom_headers": [
                    {
                      "key": "X-Custom-Header",
                      "value": "example"
                    },
                    {
                      "key": "X-Custom-Header-Second",
                      "value": "example-second"
                    }
                  ],
                  "group": "example/hooked",
                  "merge_requests_events": true,
                  "url": "https://example.com/hook/example"
                }
        argumentDocs:
            branch_filter_strategy: '(String) Filter push events by branch. Valid values are: wildcard, regex, all_branches.'
            confidential_issues_events: (Boolean) Invoke the hook for confidential issues events.
            confidential_note_events: (Boolean) Invoke the hook for confidential note events.
            custom_headers: (Attributes List) Custom headers for the project webhook. (see below for nested schema)
            custom_webhook_template: (String) Custom webhook template.
            deployment_events: (Boolean) Invoke the hook for deployment events.
            description: (String) Description of the group webhook.
            enable_ssl_verification: (Boolean) Enable SSL verification when invoking the hook.
            feature_flag_events: (Boolean) Invoke the hook for feature flag events.
            group: (String) The full path or id of the group to add the hook to.
            group_id: (Number) The id of the group for the hook.
            hook_id: (Number) The id of the group hook.
            id: (String) The id of the group hook. In the format of group:hook_id
            issues_events: (Boolean) Invoke the hook for issues events.
            job_events: (Boolean) Invoke the hook for job events.
            key: (String) Key of the custom header.
            merge_requests_events: (Boolean) Invoke the hook for merge requests events.
            name: (String) Name of the group webhook.
            note_events: (Boolean) Invoke the hook for note events.
            pipeline_events: (Boolean) Invoke the hook for pipeline events.
            push_events: (Boolean) Invoke the hook for push events.
            push_events_branch_filter: (String) Invoke the hook for push events on matching branches only.
            releases_events: (Boolean) Invoke the hook for release events.
            subgroup_events: (Boolean) Invoke the hook for subgroup events.
            tag_push_events: (Boolean) Invoke the hook for tag push events.
            token: (String, Sensitive) A token to present when invoking the hook. The token is not available for imported resources.
            url: (String) The url of the hook to invoke. Forces re-creation to preserve token.
            value: (String, Sensitive) Value of the custom header. This value cannot be imported.
            wiki_page_events: (Boolean) Invoke the hook for wiki page events.
        importStatements:
            - |-
              # A GitLab Group Hook can be imported using a key composed of `<group-id>:<hook-id>`, e.g.
              terraform import gitlab_group_hook.example "12345:1"

              # NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_group_issue_board Resource - terraform-provider-gitlab:
        subCategory: ""
        description: 'The gitlab_group_issue_board resource allows to manage the lifecycle of a issue board in a group. ~> Multiple issue boards on one group requires a GitLab Premium or above License. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_boards/'
        name: gitlab_group_issue_board Resource - terraform-provider-gitlab
        title: gitlab_group_issue_board Resource - terraform-provider-gitlab
        argumentDocs:
            group: (String) The ID or URL-encoded path of the group owned by the authenticated user.
            id: (String) The ID of this Terraform resource. In the format of <group-id>:<issue-board-id>.
            label_id: (Number) The ID of the label the list should be scoped to.
            labels: (Set of String) The list of label names which the board should be scoped to.
            lists: (Block Set) The list of issue board lists. (see below for nested schema)
            milestone_id: (Number) The milestone the board should be scoped to.
            name: (String) The name of the board.
            position: (Number) The explicit position of the list within the board, zero based.
        importStatements: []
    gitlab_group_label:
        subCategory: ""
        description: 'The gitlab_group_label resource allows to manage the lifecycle of labels within a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_labels/'
        name: gitlab_group_label
        title: gitlab_group_label Resource - terraform-provider-gitlab
        examples:
            - name: fixme
              manifest: |-
                {
                  "color": "#ffcc00",
                  "description": "issue with failing tests",
                  "group": "example",
                  "name": "fixme"
                }
        argumentDocs:
            color: '(String) The color of the label given in 6-digit hex notation with leading ''#'' sign (e.g. #FFAABB) or one of the CSS color names.'
            description: (String) The description of the label.
            group: (String) The name or id of the group to add the label to.
            id: (String) The ID of this Terraform resource. In the format of <group-id>:<label-id>.
            label_id: (Number) The id of the group label.
            name: (String) The name of the label.
        importStatements:
            - |-
              # Gitlab group labels can be imported using an id made up of `{group_id}:{group_label_id}`, e.g.
              terraform import gitlab_group_label.example 12345:fixme
    gitlab_group_ldap_link:
        subCategory: ""
        description: 'The gitlab_group_ldap_link resource allows to manage the lifecycle of an LDAP integration with a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/#ldap-group-links'
        name: gitlab_group_ldap_link
        title: gitlab_group_ldap_link Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "cn": "testuser",
                  "group_access": "developer",
                  "group_id": "12345",
                  "ldap_provider": "ldapmain"
                }
        argumentDocs:
            access_level: '(String, Deprecated) Minimum access level for members of the LDAP group. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            cn: (String) The CN of the LDAP group to link with. Required if filter is not provided.
            filter: (String) The LDAP filter for the group. Required if cn is not provided. Requires GitLab Premium or above.
            force: (Boolean) If true, then delete and replace an existing LDAP link if one exists. Will also remove an LDAP link if the parent group is not found.
            group: (String) The ID or URL-encoded path of the group
            group_access: '(String) Minimum access level for members of the LDAP group. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            id: (String) The ID of this resource.
            ldap_provider: '(String) The name of the LDAP provider as stored in the GitLab database. Note that this is NOT the value of the label attribute as shown in the web UI. In most cases this will be ldapmain but you may use the LDAP check rake task for receiving the LDAP server name: LDAP: ... Server: ldapmain'
            member_role_id: (Number) The ID of a custom member role. Only available for Ultimate instances. When using a custom role, the group_access must match the base role used to create the custom role.
        importStatements:
            - |-
              # GitLab group ldap links can be imported using an id made up of `group_id:ldap_provider:cn:filter`. CN and Filter are mutually exclusive, so one will be missing.

              # If using the CN for the group link, the ID will end with a blank filter (":"). e.g.,
              terraform import gitlab_group_ldap_link.test "12345:ldapmain:testcn:"

              # If using the Filter for the group link, the ID will have two "::" in the middle due to having a blank CN. e.g.,
              terraform import gitlab_group_ldap_link.test "12345:ldapmain::testfilter"
    gitlab_group_membership:
        subCategory: ""
        description: 'The gitlab_group_membership resource allows to manage the lifecycle of a users group membership. -> If a group should grant membership to another group use the gitlab_group_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/members/'
        name: gitlab_group_membership
        title: gitlab_group_membership Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "access_level": "guest",
                  "expires_at": "2020-12-31",
                  "group_id": 12345,
                  "user_id": 1337
                }
        argumentDocs:
            access_level: '(String) Access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner.'
            expires_at: '(String) Expiration date for the group membership. Format: YYYY-MM-DD'
            group_id: (Number) The ID of the group.
            id: (String) The ID of the group membership. In the format of <group-id:user-id>.
            member_role_id: (Number) The ID of a custom member role. Only available for Ultimate instances.
            skip_subresources_on_destroy: (Boolean) Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
            unassign_issuables_on_destroy: (Boolean) Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
            user_id: (Number) The ID of the user.
        importStatements:
            - |-
              # GitLab group membership can be imported using an id made up of `group_id:user_id`, e.g.
              terraform import gitlab_group_membership.test "12345:1337"
    gitlab_group_project_file_template:
        subCategory: ""
        description: 'The gitlab_group_project_file_template resource allows setting a project from which custom file templates will be loaded. In order to use this resource, the project selected must be a direct child of the group selected. After the resource has run, gitlab_project_template.template_project_id is available for use. For more information about which file types are available as templates, view GitLab''s documentation https://docs.gitlab.com/user/group/custom_project_templates/ -> This resource requires a GitLab Enterprise instance with a Premium license. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/#update-group'
        name: gitlab_group_project_file_template
        title: gitlab_group_project_file_template Resource - terraform-provider-gitlab
        examples:
            - name: template_link
              manifest: |-
                {
                  "file_template_project_id": "${gitlab_project.bar.id}",
                  "group_id": "${gitlab_group.foo.id}"
                }
              references:
                file_template_project_id: gitlab_project.bar.id
                group_id: gitlab_group.foo.id
              dependencies:
                gitlab_group.foo: |-
                    {
                      "description": "An example group",
                      "name": "group",
                      "path": "group"
                    }
                gitlab_project.bar: |-
                    {
                      "description": "contains file templates",
                      "name": "template project",
                      "namespace_id": "${gitlab_group.foo.id}",
                      "visibility_level": "public"
                    }
        argumentDocs:
            file_template_project_id: |-
                (Number) The ID of the project that will be used for file templates. This project must be the direct
                child of the project defined by the group_id
            group_id: |-
                (Number) The ID of the group that will use the file template project. This group must be the direct
                parent of the project defined by project_id
            id: (String) The ID of this resource.
        importStatements: []
    gitlab_group_protected_environment:
        subCategory: ""
        description: 'The gitlab_group_protected_environment resource allows to manage the lifecycle of a protected environment in a group. ~> In order to use a user_id in the deploy_access_levels configuration, you need to make sure that users have access to the group with Maintainer role or higher. In order to use a group_id in the deploy_access_levels configuration, the group_id must be a sub-group under the given group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_protected_environments/'
        name: gitlab_group_protected_environment
        title: gitlab_group_protected_environment Resource - terraform-provider-gitlab
        examples:
            - name: example_with_access_level
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "production",
                  "group": 12345
                }
            - name: example_with_group
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "group_id": 456
                    }
                  ],
                  "environment": "staging",
                  "group": 12345
                }
            - name: example_with_user
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "user_id": 789
                    }
                  ],
                  "environment": "other",
                  "group": 12345
                }
            - name: example_with_multiple
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "access_level": "developer",
                      "required_approvals": 2
                    },
                    {
                      "group_id": 456
                    },
                    {
                      "user_id": 789
                    }
                  ],
                  "environment": "development",
                  "group": 12345
                }
            - name: example_with_multiple
              manifest: |-
                {
                  "approval_rules": [
                    {
                      "access_level": "developer",
                      "required_approvals": 2
                    }
                  ],
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "testing",
                  "group": 12345
                }
            - name: example_with_multiple
              manifest: |-
                {
                  "approval_rules": [
                    {
                      "user_id": 789
                    },
                    {
                      "access_level": "developer",
                      "required_approvals": 2
                    },
                    {
                      "group_id": 456
                    }
                  ],
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "production",
                  "group": 12345
                }
        argumentDocs:
            access_level: (String) Levels of access required to deploy to this protected environment. Mutually exclusive with user_id and group_id. Valid values are developer, maintainer.
            access_level_description: (String) Readable description of level of access.
            approval_rules: (Attributes Set) Array of approval rules to deploy, with each described by a hash. Elements in the approval_rules should be one of user_id, group_id or access_level. (see below for nested schema)
            deploy_access_levels: (Attributes Set) Array of access levels allowed to deploy, with each described by a hash. Elements in the deploy_access_levels should be one of user_id, group_id or access_level. (see below for nested schema)
            environment: (String) The deployment tier of the environment.  Valid values are production, staging, testing, development, other.
            group: (String) The ID or full path of the group which the protected environment is created against.
            group_id: (Number) The ID of the group allowed to deploy to this protected environment. The group must be a sub-group under the given group. Mutually exclusive with access_level and user_id.
            group_inheritance_type: '(Number) Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are 0, 1. 0 => Direct group membership only, 1 => All inherited groups. Default: 0'
            id: (String) The ID of this Terraform resource. In the format of <group>:<environment-name>.
            required_approvals: (Number) The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
            user_id: (Number) The ID of the user allowed to deploy to this protected environment. The user must be a member of the group with Maintainer role or higher. Mutually exclusive with access_level and group_id.
        importStatements:
            - |-
              # GitLab group protected environments can be imported using an id made up of `groupId:environmentName`, e.g.
              terraform import gitlab_group_protected_environment.bar 123:production
    gitlab_group_saml_link:
        subCategory: ""
        description: 'The gitlab_group_saml_link resource allows to manage the lifecycle of an SAML integration with a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/#saml-group-links'
        name: gitlab_group_saml_link
        title: gitlab_group_saml_link Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "access_level": "developer",
                  "group": "12345",
                  "saml_group_name": "samlgroupname1"
                }
            - name: test_custom_role
              manifest: |-
                {
                  "access_level": "developer",
                  "group": "12345",
                  "member_role_id": 123,
                  "saml_group_name": "samlgroupname1"
                }
        argumentDocs:
            access_level: '(String) Access level for members of the SAML group. Valid values are: guest, reporter, developer, maintainer, owner.'
            group: (String) The ID or path of the group to add the SAML Group Link to.
            id: (String) The ID of this resource.
            member_role_id: (Number) The ID of a custom member role. Only available for Ultimate instances. When using a custom role, the access_level must match the base role used to create the custom role.
            saml_group_name: (String) The name of the SAML group.
        importStatements:
            - |-
              # GitLab group saml links can be imported using an id made up of `group_id:saml_group_name`, e.g.
              terraform import gitlab_group_saml_link.test "12345:samlgroupname1"
    gitlab_group_security_policy_attachment:
        subCategory: ""
        description: 'The gitlab_group_security_policy_attachment resource allows to attach a security policy project to a group. ~> Policies https://docs.gitlab.com/user/application_security/policies/ are files stored in a policy project as raw YAML, to allow maximum flexibility with support of all kind of policy and all their options. See the examples for how to create a policy project, add a policy, and link it. Use the gitlab_repository_file resource to create policies instead of a specific policy resource. This ensures all policy options are immediately via Terraform once released. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/index/#mutationsecuritypolicyprojectassign'
        name: gitlab_group_security_policy_attachment
        title: gitlab_group_security_policy_attachment Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "group": 1234,
                  "policy_project": 4567
                }
              dependencies:
                gitlab_project.my-policy-project: |-
                    {
                      "name": "security-policy-project"
                    }
                gitlab_repository_file.policy-yml: |-
                    {
                      "branch": "master",
                      "content": "---\napproval_policy:\n- name: test\ndescription: test\nenabled: true\nrules:\n- type: any_merge_request\n    branch_type: protected\n    commits: any\napproval_settings:\n    block_branch_modification: true\n    prevent_pushing_and_force_pushing: true\n    prevent_approval_by_author: true\n    prevent_approval_by_commit_author: true\n    remove_approvals_with_new_commit: true\n    require_password_to_approve: false\nfallback_behavior:\n    fail: closed\npolicy_scope:\n  compliance_frameworks:\n  - id: 1010101\n  - id: 0101010\nactions:\n- type: send_bot_message\n    enabled: true\n",
                      "encoding": "text",
                      "file_path": ".gitlab/security-policies/my-policy.yml",
                      "project": "${gitlab_project.my-policy-project.id}"
                    }
            - name: my-policy
              manifest: |-
                {
                  "group": 1234,
                  "policy_project": "${gitlab_project.my-policy-project.id}"
                }
              references:
                policy_project: gitlab_project.my-policy-project.id
              dependencies:
                gitlab_project.my-policy-project: |-
                    {
                      "name": "security-policy-project"
                    }
                gitlab_repository_file.policy-yml: |-
                    {
                      "branch": "master",
                      "content": "---\napproval_policy:\n- name: test\ndescription: test\nenabled: true\nrules:\n- type: any_merge_request\n    branch_type: protected\n    commits: any\napproval_settings:\n    block_branch_modification: true\n    prevent_pushing_and_force_pushing: true\n    prevent_approval_by_author: true\n    prevent_approval_by_commit_author: true\n    remove_approvals_with_new_commit: true\n    require_password_to_approve: false\nfallback_behavior:\n    fail: closed\npolicy_scope:\n  compliance_frameworks:\n  - id: 1010101\n  - id: 0101010\nactions:\n- type: send_bot_message\n    enabled: true\n",
                      "encoding": "text",
                      "file_path": ".gitlab/security-policies/my-policy.yml",
                      "project": "${gitlab_project.my-policy-project.id}"
                    }
        argumentDocs:
            group: (String) The ID or Full Path of the group which will have the security policy project assigned to it.
            group_graphql_id: (String) The GraphQL ID of the group to which the security policty project will be attached.
            id: (String) The ID of this Terraform resource. In the format of <group>:<policy_project>.
            policy_project: (String) The ID or Full Path of the security policy project.
            policy_project_graphql_id: (String) The GraphQL ID of the security policy project.
        importStatements:
            - |-
              # GitLab group security policy attachments can be imported using an id made up of `group:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
              terraform import gitlab_group_security_policy_attachment.foo 1:2
    gitlab_group_service_account:
        subCategory: ""
        description: 'The gitlab_group_service_account resource allows creating a GitLab group service account. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_service_accounts/'
        name: gitlab_group_service_account
        title: gitlab_group_service_account Resource - terraform-provider-gitlab
        examples:
            - name: example_sa
              manifest: |-
                {
                  "group": "${gitlab_group.example.id}",
                  "name": "example-name",
                  "username": "example-username"
                }
              references:
                group: gitlab_group.example.id
              dependencies:
                gitlab_group.example: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_group.example_subgroup: |-
                    {
                      "description": "An example subgroup",
                      "name": "subgroup",
                      "path": "example/subgroup"
                    }
                gitlab_group_membership.example_membership: |-
                    {
                      "access_level": "developer",
                      "expires_at": "2020-03-14",
                      "group_id": "${gitlab_group.example_subgroup.id}",
                      "user_id": "${gitlab_group_service_account.example_sa.service_account_id}"
                    }
        argumentDocs:
            group: (String) The ID or URL-encoded path of the group that the service account is created in. Must be a top level group.
            id: (String) The ID of this Terraform resource. In the format of <group>:<service_account_id>.
            name: (String) The name of the user. If not specified, the default Service account user name is used.
            service_account_id: (String) The service account id.
            username: (String) The username of the user. If not specified, it’s automatically generated.
        importStatements:
            - |-
              # You can import a group service account using `terraform import <resource> <id>`.  The
              # `id` is in the form of <group_id>:<service_account_id>
              terraform import gitlab_group_service_account.example example
    gitlab_group_service_account_access_token:
        subCategory: ""
        description: 'The gitlab_group_service_account_access_token resource allows to manage the lifecycle of a group service account access token. ~> Use of the timestamp() function with expires_at will cause the resource to be re-created with every apply, it''s recommended to use plantimestamp() or a static value instead. ~> Reading the access token status of a service account requires an admin token or a top-level group owner token on gitlab.com. As a result, this resource will ignore permission errors when attempting to read the token status, and will rely on the values in state instead. This can lead to apply-time failures if the token configured for the provider doesn''t have permissions to rotate tokens for the service account. ~> Use rotation_configuration to automatically rotate tokens instead of using timestamp() as timestamp will cause changes with every plan. terraform apply must still be run to rotate the token. ~> Due to a limitation in the API, the rotation_configuration is unable to set the new expiry date before GitLab 17.9. Instead, when the resource is created, it will default the expiry date to 7 days in the future. On each subsequent apply, the new expiry will be 7 days from the date of the apply. Upstream API: GitLab API docs https://docs.gitlab.com/api/group_service_accounts/#create-a-personal-access-token-for-a-service-account-user'
        name: gitlab_group_service_account_access_token
        title: gitlab_group_service_account_access_token Resource - terraform-provider-gitlab
        examples:
            - name: example_sa_token
              manifest: |-
                {
                  "expires_at": "2020-03-14",
                  "group": "${gitlab_group.example.id}",
                  "name": "Example service account access token",
                  "scopes": [
                    "api"
                  ],
                  "user_id": "${gitlab_group_service_account.example_sa.service_account_id}"
                }
              references:
                group: gitlab_group.example.id
                user_id: gitlab_group_service_account.example_sa.service_account_id
              dependencies:
                gitlab_group.example: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_group_membership.example_membership: |-
                    {
                      "access_level": "developer",
                      "expires_at": "2020-03-14",
                      "group_id": "${gitlab_group.example.id}",
                      "user_id": "${gitlab_group_service_account.example_sa.service_account_id}"
                    }
                gitlab_group_service_account.example_sa: |-
                    {
                      "group": "${gitlab_group.example.id}",
                      "name": "example-name",
                      "username": "example-username"
                    }
            - name: example_sa_token
              manifest: |-
                {
                  "group": "${gitlab_group.example.id}",
                  "name": "Example service account access token",
                  "rotation_configuration": {
                    "rotate_before_days": 2
                  },
                  "scopes": [
                    "api"
                  ],
                  "user_id": "${gitlab_group_service_account.example_sa.service_account_id}"
                }
              references:
                group: gitlab_group.example.id
                user_id: gitlab_group_service_account.example_sa.service_account_id
              dependencies:
                gitlab_group.example: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_group_membership.example_membership: |-
                    {
                      "access_level": "developer",
                      "expires_at": "2020-03-14",
                      "group_id": "${gitlab_group.example.id}",
                      "user_id": "${gitlab_group_service_account.example_sa.service_account_id}"
                    }
                gitlab_group_service_account.example_sa: |-
                    {
                      "group": "${gitlab_group.example.id}",
                      "name": "example-name",
                      "username": "example-username"
                    }
        argumentDocs:
            active: (Boolean) True if the token is active.
            created_at: (String) Time the token has been created, RFC3339 format.
            expiration_days: (Number) The duration (in days) the new token should be valid for.
            expires_at: (String) The service account access token expiry date. When left blank, the token follows the standard rule of expiry for personal access tokens.
            group: (String) The ID or URL-encoded path of the group containing the service account. Must be a top level group.
            id: (String) The ID of the group service account access token.
            name: (String) The name of the personal access token.
            revoked: (Boolean) True if the token is revoked.
            rotate_before_days: (Number) The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when terraform apply is run in that timeframe.
            rotation_configuration: (Attributes) The configuration for when to rotate a token automatically. Will not rotate a token until terraform apply is run. (see below for nested schema)
            scopes: '(Set of String) The scopes of the group service account access token. valid values are: api, read_api, read_registry, write_registry, read_repository, write_repository, create_runner, manage_runner, ai_features, k8s_proxy, read_observability, write_observability'
            token: '(String, Sensitive) The token of the group service account access token. Note: the token is not available for imported resources.'
            user_id: (Number) The ID of a service account user.
        importStatements:
            - |-
              # You can import a service account access token using `terraform import <resource> <id>`.  The
              # `id` is in the form of <group_id>:<service_account_id>:<access_token_id>
              # Importing an access token does not import the access token value.
              terraform import gitlab_group_service_account_access_token.example 1:2:3
    gitlab_group_share_group:
        subCategory: ""
        description: 'The gitlab_group_share_group resource allows managing the lifecycle of a group shared with another group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/#share-groups-with-groups'
        name: gitlab_group_share_group
        title: gitlab_group_share_group Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "expires_at": "2099-01-01",
                  "group_access": "guest",
                  "group_id": "${gitlab_group.foo.id}",
                  "share_group_id": "${gitlab_group.bar.id}"
                }
              references:
                group_id: gitlab_group.foo.id
                share_group_id: gitlab_group.bar.id
        argumentDocs:
            expires_at: '(String) Share expiration date. Format: YYYY-MM-DD'
            group_access: '(String) The access level to grant the group. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            group_id: (String) The id of the main group to be shared.
            id: (String) The ID of this resource. In the format of group-id:share-group-id.
            member_role_id: (Number) The ID of a custom member role. Only available for Ultimate instances.
            share_group_id: (Number) The id of the additional group with which the main group will be shared.
        importStatements:
            - |-
              # GitLab group shares can be imported using an id made up of `mainGroupId:shareGroupId`, e.g.
              terraform import gitlab_group_share_group.test 12345:1337
    gitlab_group_variable:
        subCategory: ""
        description: 'The gitlab_group_variable resource allows creating a GitLab group level variables. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/group_level_variables/'
        name: gitlab_group_variable
        title: gitlab_group_variable Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "environment_scope": "*",
                  "group": "12345",
                  "key": "group_variable_key",
                  "masked": false,
                  "protected": false,
                  "value": "group_variable_value"
                }
            - name: example
              manifest: |-
                {
                  "hidden": true,
                  "key": "group_variable_key",
                  "masked": true,
                  "project": "12345",
                  "protected": false,
                  "value": "group_variable_value"
                }
        argumentDocs:
            description: (String) The description of the variable.
            environment_scope: (String) The environment scope of the variable. Defaults to all environment (*). Note that in Community Editions of Gitlab, values other than * will cause inconsistent plans.
            group: (String) The name or id of the group.
            hidden: (Boolean) If set to true, the value of the variable will be hidden in the CI/CD User Interface. The value must meet the hidden requirements.
            id: (String) The ID of this Terraform resource. In the format of <group>:<key>:<environment_scope>.
            key: (String) The name of the variable.
            masked: (Boolean) If set to true, the value of the variable will be masked in job logs. The value must meet the masking requirements.
            protected: (Boolean) If set to true, the variable will be passed only to pipelines running on protected branches and tags.
            raw: (Boolean) Whether the variable is treated as a raw string. When true, variables in the value are not expanded.
            value: (String) The value of the variable.
            variable_type: '(String) The type of a variable. Valid values are: env_var, file.'
        importStatements:
            - |-
              # GitLab group variables can be imported using an id made up of `groupid:variablename:scope`, e.g.
              terraform import gitlab_group_variable.example 12345:group_variable_key:*
    gitlab_instance_cluster:
        subCategory: ""
        description: 'The gitlab_instance_cluster resource allows to manage the lifecycle of an instance cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/api/instance_clusters/'
        name: gitlab_instance_cluster
        title: gitlab_instance_cluster Resource - terraform-provider-gitlab
        examples:
            - name: bar
              manifest: |-
                {
                  "domain": "example.com",
                  "enabled": true,
                  "environment_scope": "*",
                  "kubernetes_api_url": "https://124.124.124",
                  "kubernetes_authorization_type": "rbac",
                  "kubernetes_ca_cert": "some-cert",
                  "kubernetes_namespace": "namespace",
                  "kubernetes_token": "some-token",
                  "management_project_id": "123456",
                  "name": "bar-cluster"
                }
        argumentDocs:
            cluster_type: (String) Cluster type.
            created_at: (String) Create time.
            domain: (String) The base domain of the cluster.
            enabled: (Boolean) Determines if cluster is active or not. Defaults to true. This attribute cannot be read.
            environment_scope: (String) The associated environment to the cluster. Defaults to *.
            id: (String) The ID of this resource.
            kubernetes_api_url: (String) The URL to access the Kubernetes API.
            kubernetes_authorization_type: (String) The cluster authorization type. Valid values are rbac, abac, unknown_authorization. Defaults to rbac.
            kubernetes_ca_cert: (String) TLS certificate (needed if API is using a self-signed TLS certificate).
            kubernetes_namespace: (String) The unique namespace related to the instance.
            kubernetes_token: (String, Sensitive) The token to authenticate against Kubernetes. This attribute cannot be read.
            managed: (Boolean) Determines if cluster is managed by gitlab or not. Defaults to true. This attribute cannot be read.
            management_project_id: (String) The ID of the management project for the cluster.
            name: (String) The name of cluster.
            platform_type: (String) Platform type.
            provider_type: (String) Provider type.
        importStatements:
            - |-
              # GitLab instance clusters can be imported using a `clusterid`, e.g.
              terraform import gitlab_instance_cluster.bar 123
    gitlab_instance_service_account:
        subCategory: ""
        description: 'The gitlab_instance_service_account resource allows creating a GitLab instance service account. ~> In order for a user to create a user account, they must have admin privileges at the instance level. This makes this feature unavailable on gitlab.com Upstream API: GitLab REST API docs https://docs.gitlab.com/api/user_service_accounts/'
        name: gitlab_instance_service_account
        title: gitlab_instance_service_account Resource - terraform-provider-gitlab
        examples:
            - name: example_sa
              manifest: |-
                {
                  "name": "example-name",
                  "timeouts": {
                    "delete": "3m"
                  },
                  "username": "example-username"
                }
        argumentDocs:
            delete: (String) A string that can be parsed as a duration consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
            id: (String) The ID of this Terraform resource. This matches the service account id.
            name: (String) The name of the user. If not specified, the default Service account user name is used.
            service_account_id: (String) The service account id.
            timeouts: (Attributes) (see below for nested schema)
            username: (String) The username of the user. If not specified, it’s automatically generated.
        importStatements:
            - |-
              # You can import a group service account using `terraform import <resource> <id>`.  The
              # `id` is the id of the service account
              terraform import gitlab_instance_service_account.example example
    gitlab_instance_variable:
        subCategory: ""
        description: 'The gitlab_instance_variable resource allows to manage the lifecycle of an instance-level CI/CD variable. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/instance_level_ci_variables/'
        name: gitlab_instance_variable
        title: gitlab_instance_variable Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "key": "instance_variable_key",
                  "masked": false,
                  "protected": false,
                  "value": "instance_variable_value"
                }
        argumentDocs:
            description: (String) The description of the variable. Maximum of 255 characters.
            id: (String) The ID of this resource.
            key: (String) The name of the variable.
            masked: (Boolean) If set to true, the value of the variable will be hidden in job logs. The value must meet the masking requirements. Defaults to false.
            protected: (Boolean) If set to true, the variable will be passed only to pipelines running on protected branches and tags. Defaults to false.
            raw: '(Boolean) Whether the variable is treated as a raw string. Default: false. When true, variables in the value are not expanded.'
            value: (String) The value of the variable.
            variable_type: '(String) The type of a variable. Valid values are: env_var, file. Default is env_var.'
        importStatements:
            - |-
              # GitLab instance variables can be imported using an id made up of `variablename`, e.g.
              terraform import gitlab_instance_variable.example instance_variable_key
    gitlab_integration_custom_issue_tracker:
        subCategory: ""
        description: 'The gitlab_integration_custom_issue_tracker resource allows to manage the lifecycle of a project integration with Custom Issue Tracker. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#custom-issue-tracker'
        name: gitlab_integration_custom_issue_tracker
        title: gitlab_integration_custom_issue_tracker Resource - terraform-provider-gitlab
        examples:
            - name: tracker
              manifest: |-
                {
                  "issues_url": "https://customtracker.com/TEST-:id",
                  "project": "${gitlab_project.awesome_project.id}",
                  "project_url": "https://customtracker.com/issues"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            id: (String) The ID of this Terraform resource. In the format of <project>.
            issues_url: (String) The URL to view an issue in the external issue tracker. Must contain :id.
            project: (String) The ID or full path of the project for the custom issue tracker.
            project_url: (String) The URL to the project in the external issue tracker.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_integration_custom_issue_tracker state using the project ID, e.g.
              terraform import gitlab_integration_custom_issue_tracker.tracker 1
    gitlab_integration_emails_on_push:
        subCategory: ""
        description: 'The gitlab_integration_emails_on_push resource allows to manage the lifecycle of a project integration with Emails on Push Service. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#emails-on-push'
        name: gitlab_integration_emails_on_push
        title: gitlab_integration_emails_on_push Resource - terraform-provider-gitlab
        examples:
            - name: emails
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "recipients": "myrecipient@example.com myotherrecipient@example.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are all, default, protected, default_and_protected. Notifications are always fired for tag pushes.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            disable_diffs: (Boolean) Disable code diffs.
            id: (String) The ID of this resource.
            project: (String) ID or full-path of the project you want to activate integration on.
            push_events: (Boolean) Enable notifications for push events.
            recipients: (String) Emails separated by whitespace.
            send_from_committer_email: (Boolean) Send from committer.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            title: (String) Title of the integration.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_integration_emails_on_push state using the project ID, e.g.
              terraform import gitlab_integration_emails_on_push.emails 1
    gitlab_integration_external_wiki:
        subCategory: ""
        description: 'The gitlab_integration_external_wiki resource allows to manage the lifecycle of a project integration with External Wiki Service. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#external-wiki'
        name: gitlab_integration_external_wiki
        title: gitlab_integration_external_wiki Resource - terraform-provider-gitlab
        examples:
            - name: wiki
              manifest: |-
                {
                  "external_wiki_url": "https://MyAwesomeExternalWikiURL.com",
                  "project": "${gitlab_project.awesome_project.id}"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            external_wiki_url: (String) The URL of the external wiki.
            id: (String) The ID of this resource.
            project: (String) ID of the project you want to activate integration on.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            title: (String) Title of the integration.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_integration_external_wiki state using the project ID, e.g.
              terraform import gitlab_integration_external_wiki.wiki 1
    gitlab_integration_github:
        subCategory: ""
        description: 'The gitlab_integration_github resource allows to manage the lifecycle of a project integration with GitHub. -> This resource requires a GitLab Enterprise instance. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#github'
        name: gitlab_integration_github
        title: gitlab_integration_github Resource - terraform-provider-gitlab
        examples:
            - name: github
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "repository_url": "https://github.com/gitlabhq/terraform-provider-gitlab",
                  "token": "REDACTED"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            project: (String) ID of the project you want to activate integration on.
            repository_url: (String) The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.
            static_context: (Boolean) Append instance name instead of branch to the status. Must enable to set a GitLab status check as required in GitHub. See [Static / dynamic status check names] to learn more.
            title: (String) Title.
            token: (String, Sensitive) A GitHub personal access token with at least repo:status scope.
            updated_at: (String) Update time.
        importStatements:
            - |-
              # You can import a gitlab_integration_github state using `terraform import <resource> <project_id>`:
              terraform import gitlab_integration_github.github 1
    gitlab_integration_harbor:
        subCategory: ""
        description: 'The gitlab_integration_harbor resource allows to manage the lifecycle of a project integration with Harbor. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#harbor'
        name: gitlab_integration_harbor
        title: gitlab_integration_harbor Resource - terraform-provider-gitlab
        examples:
            - name: harbor
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "project_name": "my_project_name",
                  "url": "http://harbor.example.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            id: (String) The ID or full path of the resource. Matches the project value.
            password: (String, Sensitive) Password for authentication with the Harbor server, if authentication is required by the server.
            project: (String) ID of the GitLab project you want to activate integration on.
            project_name: '(String) The URL-friendly Harbor project name. This project needs to already exist in Harbor. Example: my_project_name.'
            url: '(String) Harbor URL. Example: http://harbor.example.com'
            use_inherited_settings: (Boolean) Indicates whether or not to inherit default settings. Defaults to false.
            username: (String) Username for authentication with the Harbor server, if authentication is required by the server.
        importStatements:
            - |-
              # You can import a gitlab_integration_harbor state using `terraform import <resource> <project_id>`:
              terraform import gitlab_integration_harbor.harbor 1
    gitlab_integration_jenkins:
        subCategory: ""
        description: 'The gitlab_integration_jenkins resource allows to manage the lifecycle of a project integration with Jenkins. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#jenkins'
        name: gitlab_integration_jenkins
        title: gitlab_integration_jenkins Resource - terraform-provider-gitlab
        examples:
            - name: jenkins
              manifest: |-
                {
                  "jenkins_url": "http://jenkins.example.com",
                  "project": "${gitlab_project.awesome_project.id}",
                  "project_name": "my_project_name"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            enable_ssl_verification: (Boolean) Enable SSL verification. Defaults to true (enabled).
            id: (String) The ID of the resource. Matches the project value.
            jenkins_url: (String) Jenkins URL like http://jenkins.example.com
            merge_request_events: (Boolean) Enable notifications for merge request events.
            password: (String, Sensitive) Password for authentication with the Jenkins server, if authentication is required by the server.
            project: (String) ID of the project you want to activate integration on.
            project_name: '(String) The URL-friendly project name. Example: my_project_name.'
            push_events: (Boolean) Enable notifications for push events.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            username: (String) Username for authentication with the Jenkins server, if authentication is required by the server.
        importStatements:
            - |-
              # You can import a gitlab_integration_jenkins state using `terraform import <resource> <project_id>`:
              terraform import gitlab_integration_jenkins.jenkins 1
    gitlab_integration_jira:
        subCategory: ""
        description: 'The gitlab_integration_jira resource allows to manage the lifecycle of a project integration with Jira. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#jira-issues'
        name: gitlab_integration_jira
        title: gitlab_integration_jira Resource - terraform-provider-gitlab
        examples:
            - name: jira
              manifest: |-
                {
                  "password": "mypass",
                  "project": "${gitlab_project.awesome_project.id}",
                  "url": "https://jira.example.com",
                  "username": "user"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            api_url: (String) The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
            comment_on_event_enabled: (Boolean) Enable comments inside Jira issues on each GitLab event (commit / merge request)
            commit_events: (Boolean) Enable notifications for commit events
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            issues_enabled: (Boolean) Enable viewing Jira issues in GitLab.
            jira_auth_type: (Number) The authentication method to be used with Jira. 0 means Basic Authentication. 1 means Jira personal access token. Defaults to 0.
            jira_issue_prefix: (String) Prefix to match Jira issue keys.
            jira_issue_regex: (String) Regular expression to match Jira issue keys.
            jira_issue_transition_automatic: (Boolean) Enable automatic issue transitions. Takes precedence over jira_issue_transition_id if enabled. Defaults to false. This value cannot be imported, and will not perform drift detection if changed outside Terraform.
            jira_issue_transition_id: (String) The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
            merge_requests_events: (Boolean) Enable notifications for merge request events
            password: (String, Sensitive) The Jira API token, password, or personal access token to be used with Jira. When your authentication method is basic (jira_auth_type is 0), use an API token for Jira Cloud or a password for Jira Data Center or Jira Server. When your authentication method is a Jira personal access token (jira_auth_type is 1), use the personal access token.
            project: (String) ID of the project you want to activate integration on.
            project_key: (String, Deprecated) The short identifier for your JIRA project. Must be all uppercase. For example, PROJ.
            project_keys: (List of String) Keys of Jira projects. When issues_enabled is true, this setting specifies which Jira projects to view issues from in GitLab.
            title: (String) Title.
            updated_at: (String) Update time.
            url: (String) The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
            use_inherited_settings: (Boolean) Indicates whether or not to inherit default settings. Defaults to false.
            username: (String) The email or username to be used with Jira. For Jira Cloud use an email, for Jira Data Center and Jira Server use a username. Required when using Basic authentication (jira_auth_type is 0).
        importStatements:
            - |-
              # You can import a gitlab_integration_jira state using the project ID, e.g.
              terraform import gitlab_integration_jira.jira 1
    gitlab_integration_mattermost:
        subCategory: ""
        description: 'The gitlab_integration_mattermost resource allows to manage the lifecycle of a project integration with Mattermost. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#mattermost-notifications'
        name: gitlab_integration_mattermost
        title: gitlab_integration_mattermost Resource - terraform-provider-gitlab
        examples:
            - name: mattermost
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "push_channel": "push_chan",
                  "push_events": true,
                  "username": "myuser",
                  "webhook": "https://webhook.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are "all", "default", "protected", and "default_and_protected".
            confidential_issue_channel: (String) The name of the channel to receive confidential issue events notifications.
            confidential_issues_events: (Boolean) Enable notifications for confidential issues events.
            confidential_note_channel: (String) The name of the channel to receive confidential note events notifications.
            confidential_note_events: (Boolean) Enable notifications for confidential note events.
            id: (String) The ID of this resource.
            issue_channel: (String) The name of the channel to receive issue events notifications.
            issues_events: (Boolean) Enable notifications for issues events.
            merge_request_channel: (String) The name of the channel to receive merge request events notifications.
            merge_requests_events: (Boolean) Enable notifications for merge requests events.
            note_channel: (String) The name of the channel to receive note events notifications.
            note_events: (Boolean) Enable notifications for note events.
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines.
            pipeline_channel: (String) The name of the channel to receive pipeline events notifications.
            pipeline_events: (Boolean) Enable notifications for pipeline events.
            project: (String) ID of the project you want to activate integration on.
            push_channel: (String) The name of the channel to receive push events notifications.
            push_events: (Boolean) Enable notifications for push events.
            tag_push_channel: (String) The name of the channel to receive tag push events notifications.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            username: (String) Username to use.
            webhook: (String) Webhook URL (Example, https://mattermost.yourdomain.com/hooks/...). This value cannot be imported.
            wiki_page_channel: (String) The name of the channel to receive wiki page events notifications.
            wiki_page_events: (Boolean) Enable notifications for wiki page events.
        importStatements:
            - |-
              # You can import a gitlab_integration_mattermost.mattermost state using the project ID, e.g.
              terraform import gitlab_integration_mattermost.mattermost 1
    gitlab_integration_microsoft_teams:
        subCategory: ""
        description: 'The gitlab_integration_microsoft_teams resource allows to manage the lifecycle of a project integration with Microsoft Teams. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#microsoft-teams-notifications'
        name: gitlab_integration_microsoft_teams
        title: gitlab_integration_microsoft_teams Resource - terraform-provider-gitlab
        examples:
            - name: teams
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "push_events": true,
                  "webhook": "https://testurl.com/?token=XYZ"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default_and_protected”. The default value is “default”
            confidential_issues_events: (Boolean) Enable notifications for confidential issue events
            confidential_note_events: (Boolean) Enable notifications for confidential note events
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            issues_events: (Boolean) Enable notifications for issue events
            merge_requests_events: (Boolean) Enable notifications for merge request events
            note_events: (Boolean) Enable notifications for note events
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines
            pipeline_events: (Boolean) Enable notifications for pipeline events
            project: (String) ID of the project you want to activate integration on.
            push_events: (Boolean) Enable notifications for push events
            tag_push_events: (Boolean) Enable notifications for tag push events
            updated_at: (String) Update time.
            webhook: (String) The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
            wiki_page_events: (Boolean) Enable notifications for wiki page events
        importStatements:
            - |-
              # You can import a gitlab_integration_microsoft_teams state using the project ID, e.g.
              terraform import gitlab_integration_microsoft_teams.teams 1
    gitlab_integration_pipelines_email:
        subCategory: ""
        description: 'The gitlab_integration_pipelines_email resource allows to manage the lifecycle of a project integration with Pipeline Emails Service. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#pipeline-status-emails'
        name: gitlab_integration_pipelines_email
        title: gitlab_integration_pipelines_email Resource - terraform-provider-gitlab
        examples:
            - name: email
              manifest: |-
                {
                  "branches_to_be_notified": "all",
                  "notify_only_broken_pipelines": true,
                  "project": "${gitlab_project.awesome_project.id}",
                  "recipients": [
                    "gitlab@user.create"
                  ]
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are all, default, protected, and default_and_protected. Default is default
            id: (String) The ID of this resource.
            notify_only_broken_pipelines: (Boolean) Notify only broken pipelines. Default is true.
            project: (String) ID of the project you want to activate integration on.
            recipients: (Set of String) ) email addresses where notifications are sent.
        importStatements:
            - |-
              # You can import a gitlab_integration_pipelines_email state using the project ID, e.g.
              terraform import gitlab_integration_pipelines_email.email 1
    gitlab_integration_slack:
        subCategory: ""
        description: 'The gitlab_integration_slack resource allows to manage the lifecycle of a project integration with Slack. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#slack-notifications'
        name: gitlab_integration_slack
        title: gitlab_integration_slack Resource - terraform-provider-gitlab
        examples:
            - name: slack
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "push_channel": "push_chan",
                  "push_events": true,
                  "username": "myuser",
                  "webhook": "https://webhook.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are "all", "default", "protected", and "default_and_protected".
            confidential_issue_channel: (String) The name of the channel to receive confidential issue events notifications.
            confidential_issues_events: (Boolean) Enable notifications for confidential issues events.
            confidential_note_channel: (String) The name of the channel to receive confidential note events notifications.
            confidential_note_events: (Boolean) Enable notifications for confidential note events.
            id: (String) The ID of this resource.
            issue_channel: (String) The name of the channel to receive issue events notifications.
            issues_events: (Boolean) Enable notifications for issues events.
            job_events: '(Boolean) Enable notifications for job events. ATTENTION: This attribute is currently not being submitted to the GitLab API, due to https://gitlab.com/gitlab-org/api/client-go/issues/1354.'
            merge_request_channel: (String) The name of the channel to receive merge request events notifications.
            merge_requests_events: (Boolean) Enable notifications for merge requests events.
            note_channel: (String) The name of the channel to receive note events notifications.
            note_events: (Boolean) Enable notifications for note events.
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines.
            notify_only_default_branch: (Boolean, Deprecated) This parameter has been replaced with branches_to_be_notified.
            pipeline_channel: (String) The name of the channel to receive pipeline events notifications.
            pipeline_events: (Boolean) Enable notifications for pipeline events.
            project: (String) ID of the project you want to activate integration on.
            push_channel: (String) The name of the channel to receive push events notifications.
            push_events: (Boolean) Enable notifications for push events.
            tag_push_channel: (String) The name of the channel to receive tag push events notifications.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            username: (String) Username to use.
            webhook: (String) Webhook URL (Example, https://hooks.slack.com/services/...). This value cannot be imported.
            wiki_page_channel: (String) The name of the channel to receive wiki page events notifications.
            wiki_page_events: (Boolean) Enable notifications for wiki page events.
        importStatements:
            - |-
              # You can import a gitlab_integration_slack.slack state using the project ID, e.g.
              terraform import gitlab_integration_slack.slack 1
    gitlab_integration_telegram:
        subCategory: ""
        description: 'The gitlab_integration_telegram resource allows to manage the lifecycle of a project integration with Telegram. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#telegram'
        name: gitlab_integration_telegram
        title: gitlab_integration_telegram Resource - terraform-provider-gitlab
        examples:
            - name: default
              manifest: |-
                {
                  "branches_to_be_notified": "all",
                  "confidential_issues_events": false,
                  "confidential_note_events": false,
                  "issues_events": false,
                  "merge_requests_events": false,
                  "note_events": false,
                  "notify_only_broken_pipelines": false,
                  "pipeline_events": false,
                  "push_events": false,
                  "room": "-1000000000000000",
                  "tag_push_events": false,
                  "token": "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
                  "wiki_page_events": false
                }
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are all, default, protected, default_and_protected.
            confidential_issues_events: (Boolean) Enable notifications for confidential issues events.
            confidential_note_events: (Boolean) Enable notifications for confidential note events.
            id: (String) The ID of this Terraform resource. In the format of <project>.
            issues_events: (Boolean) Enable notifications for issues events.
            merge_requests_events: (Boolean) Enable notifications for merge requests events.
            note_events: (Boolean) Enable notifications for note events.
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines.
            pipeline_events: (Boolean) Enable notifications for pipeline events.
            project: (String) The ID or full path of the project to integrate with Telegram.
            push_events: (Boolean) Enable notifications for push events.
            room: (String) Unique identifier for the target chat or the username of the target channel (in the format @channelusername)
            tag_push_events: (Boolean) Enable notifications for tag push events.
            token: (String, Sensitive) The Telegram bot token.
            wiki_page_events: (Boolean) Enable notifications for wiki page events.
        importStatements:
            - |-
              # You can import a gitlab_integration_telegram state using the project ID, e.g.
              terraform import gitlab_integration_telegram.default 1
    gitlab_label Resource - terraform-provider-gitlab:
        subCategory: ""
        description: 'The gitlab_label resource allows to manage the lifecycle of a project label. ~> This resource is deprecated. use gitlab_project_labelinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/labels/#project-labels'
        name: gitlab_label Resource - terraform-provider-gitlab
        title: gitlab_label Resource - terraform-provider-gitlab
        argumentDocs:
            color: '(String) The color of the label given in 6-digit hex notation with leading ''#'' sign (e.g. #FFAABB) or one of the CSS color names.'
            description: (String) The description of the label.
            id: (String) The ID of this resource.
            label_id: (Number) The id of the project label.
            name: (String) The name of the label.
            project: (String) The name or id of the project to add the label to.
        importStatements: []
    gitlab_member_role:
        subCategory: ""
        description: 'The gitlab_member_role resource allows to manage the lifecycle of a custom member role. Custom roles allow an organization to create user roles with the precise privileges and permissions required for that organization’s needs. -> This resource requires an Ultimate license. -> Most custom roles are considered billable users that use a seat. Custom roles billing and seat usage https://docs.gitlab.com/user/custom_roles/#billing-and-seat-usage -> There can be only 10 custom roles on your instance or namespace. See issue 450929 https://gitlab.com/gitlab-org/gitlab/-/issues/450929 for more details. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationmemberrolecreate'
        name: gitlab_member_role
        title: gitlab_member_role Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "base_access": "REPORTER",
                  "description": "This is a read only role for security analysts",
                  "enable_permissions": [
                    "READ_VULNERABILITY"
                  ],
                  "group_path": "example-org",
                  "name": "Security Analyst"
                }
            - name: example
              manifest: |-
                {
                  "base_access": "DEVELOPER",
                  "description": "This role gives the developers additonal access to manage CI/CD variables and vulnerabilities",
                  "enable_permissions": [
                    "ADMIN_CICD_VARIABLES",
                    "ADMIN_VULNERABILITY"
                  ],
                  "name": "Enhanced Developer"
                }
        argumentDocs:
            base_access_level: '(String) The base access level for the custom role. Valid values are: DEVELOPER, GUEST, MAINTAINER, MINIMAL_ACCESS, OWNER, REPORTER'
            created_at: (String) Timestamp of when the member role was created. Only available with GitLab version 17.3 or higher.
            description: (String) Description for the member role.
            edit_path: (String) The Web UI path to edit the member role
            enabled_permissions: '(Set of String) All permissions enabled for the custom role. Valid values are: ADMIN_CICD_VARIABLES, ADMIN_COMPLIANCE_FRAMEWORK, ADMIN_GROUP_MEMBER, ADMIN_INTEGRATIONS, ADMIN_MERGE_REQUEST, ADMIN_PROTECTED_BRANCH, ADMIN_PUSH_RULES, ADMIN_RUNNERS, ADMIN_TERRAFORM_STATE, ADMIN_VULNERABILITY, ADMIN_WEB_HOOK, ARCHIVE_PROJECT, MANAGE_DEPLOY_TOKENS, MANAGE_GROUP_ACCESS_TOKENS, MANAGE_MERGE_REQUEST_SETTINGS, MANAGE_PROJECT_ACCESS_TOKENS, MANAGE_SECURITY_POLICY_LINK, READ_ADMIN_CICD, READ_ADMIN_DASHBOARD, READ_CODE, READ_COMPLIANCE_DASHBOARD, READ_CRM_CONTACT, READ_DEPENDENCY, READ_RUNNERS, READ_VULNERABILITY, REMOVE_GROUP, REMOVE_PROJECT'
            group_path: (String) Full path of the namespace to create the member role in. Required for SAAS Not allowed for self-managed
            id: (String) Globally unique ID of the member role. In the format of gid://gitlab/MemberRole/1
            iid: (Number) The id integer value extracted from the id attribute
            name: (String) Name for the member role.
        importStatements:
            - |-
              # GitLab member role can be imported using the id made up of `gid://gitlab/MemberRole/<ID>` e.g.

              terraform import gitlab_member_role.example 'gid://gitlab/MemberRole/123'
    gitlab_pages_domain:
        subCategory: ""
        description: 'The gitlab_pages_domain resource allows connecting custom domains and TLS certificates in GitLab Pages. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/pages_domains/'
        name: gitlab_pages_domain
        title: gitlab_pages_domain Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "auto_ssl_enabled": true,
                  "domain": "example.com",
                  "project": 123
                }
            - name: this
              manifest: |-
                {
                  "certificate": "${file(\"${path.module}/cert.pem\")}",
                  "domain": "example.com",
                  "key": "${file(\"${path.module}/key.pem\")}",
                  "project": 123
                }
        argumentDocs:
            auto_ssl_enabled: (Boolean) Enables automatic generation of SSL certificates issued by Let’s Encrypt for custom domains. When this is set to "true", certificate can't be provided.
            certificate: (String) The certificate in PEM format with intermediates following in most specific to least specific order.
            domain: (String) The custom domain indicated by the user.
            expired: (Boolean) Whether the certificate is expired.
            id: (String) The ID of this Terraform resource. In the format of <project>:<domain>.
            key: (String) The certificate key in PEM format.
            project: (String) The ID or URL-encoded path of the project owned by the authenticated user.
            url: (String) The URL for the given domain.
            verification_code: (String, Sensitive) The verification code for the domain.
            verified: (Boolean) The certificate data.
        importStatements:
            - |-
              # GitLab pages domain can be imported using an id made up of `projectId:domain` _without_ the http protocol, e.g.
              terraform import gitlab_pages_domain.this 123:example.com
    gitlab_personal_access_token:
        subCategory: ""
        description: 'The gitlab_personal_access_token resource allows to manage the lifecycle of a personal access token. -> This resource requires administration privileges. ~> Use of the timestamp() function with expires_at will cause the resource to be re-created with every apply, it''s recommended to use plantimestamp() or a static value instead. ~> Observability scopes are in beta and may not work on all instances. See more details in the documentation https://docs.gitlab.com/operations/tracing/ ~> Use rotation_configuration to automatically rotate tokens instead of using timestamp() as timestamp will cause changes with every plan. terraform apply must still be run to rotate the token. ~> Due to Automatic reuse detection https://docs.gitlab.com/api/personal_access_tokens/#automatic-reuse-detection it''s possible that a new Personal Access Token will immediately be revoked. Check if an old process using the old token is running if this happens. Upstream API: GitLab API docs https://docs.gitlab.com/api/personal_access_tokens/'
        name: gitlab_personal_access_token
        title: gitlab_personal_access_token Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "expires_at": "2020-03-14",
                  "name": "Example personal access token",
                  "scopes": [
                    "api"
                  ],
                  "user_id": "25"
                }
              dependencies:
                gitlab_project_variable.example: |-
                    {
                      "key": "pat",
                      "project": "${gitlab_project.example.id}",
                      "value": "${gitlab_personal_access_token.example.token}"
                    }
        argumentDocs:
            active: (Boolean) True if the token is active.
            created_at: (String) Time the token has been created, RFC3339 format.
            description: (String) The description of the personal access token.
            expiration_days: (Number) The duration (in days) the new token should be valid for.
            expires_at: (String) When the token will expire, YYYY-MM-DD format. Is automatically set when rotation_configuration is used.
            id: (String) The ID of the personal access token.
            name: (String) The name of the personal access token.
            revoked: (Boolean) True if the token is revoked.
            rotate_before_days: (Number) The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when terraform apply is run in that timeframe.
            rotation_configuration: (Attributes) The configuration for when to rotate a token automatically. Will not rotate a token until terraform apply is run. (see below for nested schema)
            scopes: '(Set of String) The scopes of the personal access token. valid values are: api, read_user, read_api, read_repository, write_repository, read_registry, write_registry, sudo, admin_mode, create_runner, manage_runner, ai_features, k8s_proxy, read_service_ping'
            token: '(String, Sensitive) The token of the personal access token. Note: the token is not available for imported resources.'
            user_id: (Number) The ID of the user.
        importStatements:
            - |-
              # A GitLab Personal Access Token can be imported using a key composed of `<user-id>:<token-id>`, e.g.
              terraform import gitlab_personal_access_token.example "12345:1"

              # NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_pipeline_schedule:
        subCategory: ""
        description: 'The gitlab_pipeline_schedule resource allows to manage the lifecycle of a scheduled pipeline. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/pipeline_schedules/'
        name: gitlab_pipeline_schedule
        title: gitlab_pipeline_schedule Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "cron": "0 1 * * *",
                  "description": "Used to schedule builds",
                  "project": "12345",
                  "ref": "refs/heads/main"
                }
        argumentDocs:
            active: (Boolean) The activation of pipeline schedule. If false is set, the pipeline schedule will deactivated initially.
            cron: (String) The cron (e.g. 0 1 * * *).
            cron_timezone: (String) The timezone.
            description: (String) The description of the pipeline schedule.
            id: (String) The ID of this Terraform resource. In the format of <project-id>:<pipeline-schedule-id>.
            owner: (Number) The ID of the user that owns the pipeline schedule.
            pipeline_schedule_id: (Number) The pipeline schedule id.
            project: (String) The name or id of the project to add the schedule to.
            ref: '(String) The branch/tag name to be triggered. This must be the full branch reference, for example: refs/heads/main, not main.'
            take_ownership: (Boolean) When set to true, the user represented by the token running Terraform will take ownership of the scheduled pipeline prior to editing it. This can help when managing scheduled pipeline drift when other users are making changes outside Terraform.
        importStatements:
            - |-
              # GitLab pipeline schedules can be imported using an id made up of `{project_id}:{pipeline_schedule_id}`, e.g.
              terraform import gitlab_pipeline_schedule.test 1:3
    gitlab_pipeline_schedule_variable:
        subCategory: ""
        description: 'The gitlab_pipeline_schedule_variable resource allows to manage the lifecycle of a variable for a pipeline schedule. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/pipeline_schedules/#pipeline-schedule-variables'
        name: gitlab_pipeline_schedule_variable
        title: gitlab_pipeline_schedule_variable Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "key": "EXAMPLE_KEY",
                  "pipeline_schedule_id": "${gitlab_pipeline_schedule.example.pipeline_schedule_id}",
                  "project": "${gitlab_pipeline_schedule.example.project}",
                  "value": "example"
                }
              references:
                pipeline_schedule_id: gitlab_pipeline_schedule.example.pipeline_schedule_id
                project: gitlab_pipeline_schedule.example.project
              dependencies:
                gitlab_pipeline_schedule.example: |-
                    {
                      "cron": "0 1 * * *",
                      "description": "Used to schedule builds",
                      "project": "12345",
                      "ref": "master"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Name of the variable.
            pipeline_schedule_id: (Number) The id of the pipeline schedule.
            project: (String) The id of the project to add the schedule to.
            value: (String) Value of the variable.
            variable_type: '(String) The type of a variable. Available types are: env_var, file. Default is env_var.'
        importStatements:
            - |-
              # Pipeline schedule variables can be imported using an id made up of `project_id:pipeline_schedule_id:key`, e.g.
              terraform import gitlab_pipeline_schedule_variable.example 123456789:13:mykey
    gitlab_pipeline_trigger:
        subCategory: ""
        description: 'The gitlab_pipeline_trigger resource allows to manage the lifecycle of a pipeline trigger. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/pipeline_triggers/'
        name: gitlab_pipeline_trigger
        title: gitlab_pipeline_trigger Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Used to trigger builds",
                  "project": "12345"
                }
        argumentDocs:
            description: (String) The description of the pipeline trigger.
            id: (String) The ID of this resource.
            pipeline_trigger_id: (Number) The pipeline trigger id.
            project: (String) The name or id of the project to add the trigger to.
            token: (String, Sensitive) The pipeline trigger token. This value is not available during import.
        importStatements:
            - |-
              # GitLab pipeline triggers can be imported using an id made up of `{project_id}:{pipeline_trigger_id}`, e.g.
              terraform import gitlab_pipeline_trigger.test 1:3
    gitlab_project:
        subCategory: ""
        description: 'The gitlab_project resource allows to manage the lifecycle of a project. A project can either be created in a group or user namespace. -> Default Branch Protection Workaround Projects are created with default branch protection. Since this default branch protection is not currently managed via Terraform, to workaround this limitation, you can remove the default branch protection via the API and create your desired Terraform managed branch protection. In the gitlab_project resource, define a local-exec provisioner which invokes the /projects/:id/protected_branches/:name API via curl to delete the branch protection on the default branch using a DELETE request. Then define the desired branch protection using the gitlab_branch_protection resource. Upstream API: GitLab REST API docs https://docs.gitlab.com/ce/api/projects/'
        name: gitlab_project
        title: gitlab_project Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "My awesome codebase",
                  "name": "example",
                  "visibility_level": "public"
                }
            - name: example-two
              manifest: |-
                {
                  "name": "example-two",
                  "push_rules": [
                    {
                      "author_email_regex": "@example\\.com$",
                      "commit_committer_check": true,
                      "member_check": true,
                      "prevent_secrets": true
                    }
                  ]
                }
            - name: peters_repo
              manifest: |-
                {
                  "description": "This is a description",
                  "name": "peters-repo",
                  "namespace_id": "${data.gitlab_user.peter_parker.namespace_id}"
                }
              references:
                namespace_id: data.gitlab_user.peter_parker.namespace_id
            - name: fork
              manifest: |-
                {
                  "description": "This is a fork",
                  "forked_from_project_id": "${gitlab_project.example.id}",
                  "name": "my-fork"
                }
              references:
                forked_from_project_id: gitlab_project.example.id
            - name: fork
              manifest: |-
                {
                  "description": "This is a fork",
                  "forked_from_project_id": "${gitlab_project.example.id}",
                  "import_url": "${gitlab_project.example.http_url_to_repo}",
                  "mirror": true,
                  "name": "my-fork"
                }
              references:
                forked_from_project_id: gitlab_project.example.id
                import_url: gitlab_project.example.http_url_to_repo
            - name: import_public
              manifest: |-
                {
                  "import_url": "https://gitlab.example.com/repo.git",
                  "name": "import-from-public-project"
                }
            - name: import_public_with_mirror
              manifest: |-
                {
                  "import_url": "https://gitlab.example.com/repo.git",
                  "mirror": true,
                  "name": "import-from-public-project"
                }
            - name: import_private
              manifest: |-
                {
                  "import_url": "https://gitlab.example.com/repo.git",
                  "import_url_password": "pass",
                  "import_url_username": "user",
                  "name": "import-from-public-project"
                }
            - name: import_private_with_mirror
              manifest: |-
                {
                  "import_url": "https://gitlab.example.com/repo.git",
                  "import_url_password": "pass",
                  "import_url_username": "user",
                  "mirror": true,
                  "name": "import-from-public-project"
                }
            - name: import_private
              manifest: |-
                {
                  "import_url": "https://user:pass@gitlab.example.com/repo.git",
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${import_url}"
                      ]
                    }
                  ],
                  "name": "import-from-public-project"
                }
              references:
                lifecycle.ignore_changes: import_url
        argumentDocs:
            allow_merge_on_skipped_pipeline: (Boolean) Set to true if you want to treat skipped pipelines as if they finished with success.
            allow_pipeline_trigger_approve_deployment: (Boolean) Set whether or not a pipeline triggerer is allowed to approve deployments. Premium and Ultimate only.
            analytics_access_level: (String) Set the analytics access level. Valid values are disabled, private, enabled.
            approvals_before_merge: |-
                (Number) Number of merge request approvals required for merging. Default is 0.
                This field does not work well in combination with the gitlab_project_approval_rule resource
                and is most likely gonna be deprecated in a future GitLab version (see this upstream epic).
                In the meantime we recommend against using this attribute and use gitlab_project_approval_rule instead.
            archive_on_destroy: (Boolean) Set to true to archive the project instead of deleting on destroy. If set to true it will entire omit the DELETE operation.
            archived: (Boolean) Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
            author_email_regex: (String) All commit author emails must match this regex, e.g. @my-company.com$.
            auto_cancel_pending_pipelines: (String) Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
            auto_devops_deploy_strategy: (String) Auto Deploy strategy. Valid values are continuous, manual, timed_incremental.
            auto_devops_enabled: (Boolean) Enable Auto DevOps for this project.
            autoclose_referenced_issues: (Boolean) Set whether auto-closing referenced issues on default branch.
            avatar: '(String) A local path to the avatar image to upload. Note: not available for imported resources.'
            avatar_hash: '(String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it''s not given, but an avatar is given, the avatar will be updated each time.'
            avatar_url: (String) The URL of the avatar image.
            branch_name_regex: (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
            build_coverage_regex: (String, Deprecated) Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
            build_git_strategy: (String) The Git strategy. Defaults to fetch. Valid values are clone, fetch.
            build_timeout: (Number) The maximum amount of time, in seconds, that a job can run.
            builds_access_level: (String) Set the builds access level. Valid values are disabled, private, enabled.
            cadence: '(String) The cadence of the policy. Valid values are: 1d, 7d, 14d, 1month, 3month.'
            ci_config_path: (String) Custom Path to CI config file.
            ci_default_git_depth: (Number) Default number of revisions for shallow cloning.
            ci_delete_pipelines_in_seconds: (Number) Pipelines older than the configured time are deleted.
            ci_forward_deployment_enabled: (Boolean) When a new deployment job starts, skip older deployment jobs that are still pending.
            ci_id_token_sub_claim_components: (List of String) Fields included in the sub claim of the ID Token. Accepts an array starting with project_path. The array might also include ref_type and ref. Defaults to ["project_path", "ref_type", "ref"]. Introduced in GitLab 17.10.
            ci_pipeline_variables_minimum_override_role: (String) The minimum role required to set variables when running pipelines and jobs. Introduced in GitLab 17.1. Valid values are developer, maintainer, owner, no_one_allowed
            ci_restrict_pipeline_cancellation_role: (String) The role required to cancel a pipeline or job. Premium and Ultimate only. Valid values are developer, maintainer, no one
            ci_separated_caches: (Boolean) Use separate caches for protected branches.
            commit_committer_check: (Boolean) Users can only push commits to this repository that were committed with one of their own verified emails.
            commit_committer_name_check: (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
            commit_message_negative_regex: (String) No commit message is allowed to match this regex, e.g. ssh\:\/\/.
            commit_message_regex: (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
            container_expiration_policy: '(Block List, Max: 1) Set the image cleanup policy for this project. Note: this field is sometimes named container_expiration_policy_attributes in the GitLab Upstream API. (see below for nested schema)'
            container_registry_access_level: (String) Set visibility of container registry, for this project. Valid values are disabled, private, enabled.
            container_registry_enabled: (Boolean, Deprecated) Enable container registry for the project.
            create: (String)
            default_branch: (String) The default branch for the project.
            delete: (String)
            deny_delete_tag: (Boolean) Deny deleting a tag.
            description: (String) A description of the project.
            emails_enabled: (Boolean) Enable email notifications.
            empty_repo: (Boolean) Whether the project is empty.
            enabled: (Boolean) If true, the policy is enabled.
            environments_access_level: (String) Set the environments access level. Valid values are disabled, private, enabled.
            external_authorization_classification_label: (String) The classification label for the project.
            feature_flags_access_level: (String) Set the feature flags access level. Valid values are disabled, private, enabled.
            file_name_regex: (String) All committed filenames must not match this regex, e.g. (jar|exe)$.
            forked_from_project_id: (Number) The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
            forking_access_level: (String) Set the forking access level. Valid values are disabled, private, enabled.
            group_runners_enabled: (Boolean) Enable group runners for this project.
            group_with_project_templates_id: (Number) For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
            http_url_to_repo: (String) URL that can be provided to git clone to clone the
            id: (String) The ID of this resource.
            import_url: (String) Git URL to a repository to be imported. Together with mirror = true it will setup a Pull Mirror. This can also be used together with forked_from_project_id to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in import_url_username and import_url_password. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. They can also not be imported using terraform import. See the examples section for how to properly use it.
            import_url_password: (String, Sensitive) The password for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider. This field cannot be imported using terraform import. See the examples section for how to properly use it.
            import_url_username: (String) The username for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider. This field cannot be imported using terraform import.  See the examples section for how to properly use it.
            infrastructure_access_level: (String) Set the infrastructure access level. Valid values are disabled, private, enabled.
            initialize_with_readme: (Boolean) Create main branch with first commit containing a README.md file. Must be set to true if importing an uninitialized project with a different default_branch.
            issues_access_level: (String) Set the issues access level. Valid values are disabled, private, enabled.
            issues_enabled: (Boolean) Enable issue tracking for the project.
            issues_template: (String) Sets the template for new issues in the project.
            keep_latest_artifact: (Boolean) Disable or enable the ability to keep the latest artifact for this project.
            keep_n: (Number) The number of images to keep.
            lfs_enabled: (Boolean) Enable LFS for the project.
            max_file_size: (Number) Maximum file size (MB).
            member_check: (Boolean) Restrict commits by author (email) to existing GitLab users.
            merge_commit_template: (String) Template used to create merge commit message in merge requests.
            merge_method: (String) Set the merge method. Valid values are merge, rebase_merge, ff.
            merge_pipelines_enabled: (Boolean) Enable or disable merge pipelines.
            merge_requests_access_level: (String) Set the merge requests access level. Valid values are disabled, private, enabled.
            merge_requests_enabled: (Boolean) Enable merge requests for the project.
            merge_requests_template: (String) Sets the template for new merge requests in the project.
            merge_trains_enabled: (Boolean) Enable or disable merge trains. Requires merge_pipelines_enabled to be set to true to take effect.
            mirror: (Boolean) Enable project pull mirror.
            mirror_overwrites_diverged_branches: (Boolean) Enable overwrite diverged branches for a mirrored project.
            mirror_trigger_builds: (Boolean) Enable trigger builds on pushes for a mirrored project.
            model_experiments_access_level: (String) Set visibility of machine learning model experiments. Valid values are disabled, private, enabled.
            model_registry_access_level: (String) Set visibility of machine learning model registry. Valid values are disabled, private, enabled.
            monitor_access_level: (String) Set the monitor access level. Valid values are disabled, private, enabled.
            mr_default_target_self: (Boolean) For forked projects, target merge requests to this project. If false, the target will be the upstream project.
            name: (String) The name of the project.
            name_regex: (String, Deprecated) The regular expression to match image names to delete.
            name_regex_delete: (String) The regular expression to match image names to delete.
            name_regex_keep: (String) The regular expression to match image names to keep.
            namespace_id: (Number) The namespace (group or user) of the project. Defaults to your user.
            next_run_at: (String) The next time the policy will run.
            older_than: (String) The number of days to keep images.
            only_allow_merge_if_all_discussions_are_resolved: (Boolean) Set to true if you want allow merges only if all discussions are resolved.
            only_allow_merge_if_pipeline_succeeds: (Boolean) Set to true if you want allow merges only if a pipeline succeeds.
            only_mirror_protected_branches: (Boolean) Enable only mirror protected branches for a mirrored project.
            packages_enabled: (Boolean) Enable packages repository for the project.
            pages_access_level: (String) Enable pages access control. Valid values are public, private, enabled, disabled.
            path: (String) The path of the repository.
            path_with_namespace: (String) The path of the repository with namespace.
            permanently_delete_on_destroy: (Boolean) Set to true to immediately permanently delete the project instead of scheduling a delete for Premium and Ultimate tiers.
            pipelines_enabled: (Boolean, Deprecated) Enable pipelines for the project. The pipelines_enabled field is being sent as jobs_enabled in the GitLab API calls.
            pre_receive_secret_detection_enabled: (Boolean) Whether Secret Push Detection is enabled. Requires GitLab Ultimate and at least GitLab 17.3.
            prevent_merge_without_jira_issue: (Boolean) Set whether merge requests require an associated issue from Jira. Premium and Ultimate only.
            prevent_secrets: (Boolean) GitLab will reject any files that are likely to contain secrets.
            printing_merge_request_link_enabled: (Boolean) Show link to create/view merge request when pushing from the command line
            public_builds: (Boolean, Deprecated) If true, jobs can be viewed by non-project members.
            public_jobs: (Boolean) If true, jobs can be viewed by non-project members.
            push_rules: '(Block List, Max: 1) Push rules for the project. (see below for nested schema)'
            reject_non_dco_commits: (Boolean) Reject commit when it’s not DCO certified.
            reject_unsigned_commits: (Boolean) Reject commit when it’s not signed through GPG.
            releases_access_level: (String) Set the releases access level. Valid values are disabled, private, enabled.
            remove_source_branch_after_merge: (Boolean) Enable Delete source branch option by default for all new merge requests.
            repository_access_level: (String) Set the repository access level. Valid values are disabled, private, enabled.
            repository_storage: (String) Which storage shard the repository is on. (administrator only)
            request_access_enabled: (Boolean) Allow users to request member access.
            requirements_access_level: (String) Set the requirements access level. Valid values are disabled, private, enabled.
            resolve_outdated_diff_discussions: (Boolean) Automatically resolve merge request diffs discussions on lines changed with a push.
            restrict_user_defined_variables: (Boolean) Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
            runners_token: (String, Sensitive) Registration token to use during runner setup.
            security_and_compliance_access_level: (String) Set the security and compliance access level. Valid values are disabled, private, enabled.
            shared_runners_enabled: (Boolean) Enable shared runners for this project.
            skip_wait_for_default_branch_protection: |-
                (Boolean) If true, the default behavior to wait for the default branch protection to be created is skipped.
                This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
                There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
                This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
            snippets_access_level: (String) Set the snippets access level. Valid values are disabled, private, enabled.
            snippets_enabled: (Boolean) Enable snippets for the project.
            squash_commit_template: (String) Template used to create squash commit message in merge requests.
            squash_option: (String) Squash commits when merge request is merged. Valid values are never (Do not allow), always (Require), default_on (Encourage), or default_off (Allow). The default value is default_off (Allow).
            ssh_url_to_repo: (String) URL that can be provided to git clone to clone the
            suggestion_commit_message: (String) The commit message used to apply merge request suggestions.
            tags: (Set of String) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
            template_name: (String) When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with template_project_id.
            template_project_id: (Number) When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with template_name. See gitlab_group_project_file_template to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
            timeouts: (Block, Optional) (see below for nested schema)
            topics: (Set of String) The list of topics for the project.
            use_custom_template: |-
                (Boolean) Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
                ~> When using a custom template, Group Tokens won't work. You must use a real user's Personal Access Token.
            visibility_level: (String) Set to public to create a public project. Valid values are private, internal, public.
            web_url: (String) URL that can be used to find the project in a browser.
            wiki_access_level: (String) Set the wiki access level. Valid values are disabled, private, enabled.
            wiki_enabled: (Boolean) Enable wiki for the project.
        importStatements:
            - |-
              # You can import a project state using `terraform import <resource> <id>`.  The
              # `id` can be whatever the [get single project api][get_single_project] takes for
              # its `:id` value, so for example:
              terraform import gitlab_project.example richardc/example

              # NOTE: the `import_url_username` and `import_url_password` cannot be imported.
    gitlab_project_access_token:
        subCategory: ""
        description: 'The gitlab_project_access_token resource allows to manage the lifecycle of a project access token. ~> Observability scopes are in beta and may not work on all instances. See more details in the documentation https://docs.gitlab.com/operations/tracing/ ~> Use rotation_configuration to automatically rotate tokens instead of using timestamp() as timestamp will cause changes with every plan. terraform apply must still be run to rotate the token. ~> Due to Automatic reuse detection https://docs.gitlab.com/api/project_access_tokens/#automatic-reuse-detection it''s possible that a new Project Access Token will immediately be revoked. Check if an old process using the old token is running if this happens. Upstream API: GitLab API docs https://docs.gitlab.com/api/project_access_tokens/'
        name: gitlab_project_access_token
        title: gitlab_project_access_token Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "access_level": "reporter",
                  "expires_at": "2020-03-14",
                  "name": "Example project access token",
                  "project": "25",
                  "scopes": [
                    "api"
                  ]
                }
              dependencies:
                gitlab_project_variable.example: |-
                    {
                      "key": "pat",
                      "project": "${gitlab_project.example.id}",
                      "value": "${gitlab_project_access_token.example.token}"
                    }
        argumentDocs:
            access_level: '(String) The access level for the project access token. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner. Default is maintainer.'
            active: (Boolean) True if the token is active.
            created_at: (String) Time the token has been created, RFC3339 format.
            description: (String) The description of the project access token.
            expiration_days: (Number) The duration (in days) the new token should be valid for.
            expires_at: (String) When the token will expire, YYYY-MM-DD format. Is automatically set when rotation_configuration is used.
            id: (String) The ID of the project access token.
            name: (String) The name of the project access token.
            project: (String) The ID or full path of the project.
            revoked: (Boolean) True if the token is revoked.
            rotate_before_days: (Number) The duration (in days) before the expiration when the token should be rotated. As an example, if set to 7 days, the token will rotate 7 days before the expiration date, but only when terraform apply is run in that timeframe.
            rotation_configuration: (Attributes) The configuration for when to rotate a token automatically. Will not rotate a token until terraform apply is run. (see below for nested schema)
            scopes: '(Set of String) The scopes of the project access token. valid values are: api, read_api, read_registry, write_registry, read_repository, write_repository, create_runner, manage_runner, ai_features, k8s_proxy, read_observability, write_observability'
            token: '(String, Sensitive) The token of the project access token. Note: the token is not available for imported resources.'
            user_id: (Number) The user_id associated to the token.
        importStatements:
            - |-
              # A GitLab Project Access Token can be imported using a key composed of `<project-id>:<token-id>`, e.g.
              terraform import gitlab_project_access_token.example "12345:1"

              # NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_project_approval_rule:
        subCategory: ""
        description: 'The gitlab_project_approval_rule resource allows to manage the lifecycle of a project-level approval rule. -> This resource requires a GitLab Enterprise instance. ~> A project is limited to one "any_approver" rule at a time, any attempt to create a second rule of type "any_approver" will fail. As a result, if an "any_approver" rule is already present on a project at creation time, and that rule requires 0 approvers, the rule will be automatically imported to prevent a common error with this resource. ~> Since a project is limited to one "any_approver" rule, attempting to add two "any_approver" rules to the same project in terraform will result in terraform identifying changes with every "plan" operation, and may result in an error during the "apply" operation. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/merge_request_approvals/#project-level-mr-approvals'
        name: gitlab_project_approval_rule
        title: gitlab_project_approval_rule Resource - terraform-provider-gitlab
        examples:
            - name: example-one
              manifest: |-
                {
                  "approvals_required": 3,
                  "group_ids": [
                    51
                  ],
                  "name": "Example Rule",
                  "project": 5,
                  "user_ids": [
                    50,
                    500
                  ]
                }
              dependencies:
                gitlab_branch_protection.example: |-
                    {
                      "branch": "release/*",
                      "merge_access_level": "developer",
                      "project": 5,
                      "push_access_level": "maintainer"
                    }
            - name: example-two
              manifest: |-
                {
                  "approvals_required": 3,
                  "group_ids": [
                    51
                  ],
                  "name": "Example Rule 2",
                  "project": 5,
                  "protected_branch_ids": [
                    "${gitlab_branch_protection.example.branch_protection_id}"
                  ],
                  "user_ids": [
                    50,
                    500
                  ]
                }
              references:
                protected_branch_ids: gitlab_branch_protection.example.branch_protection_id
              dependencies:
                gitlab_branch_protection.example: |-
                    {
                      "branch": "release/*",
                      "merge_access_level": "developer",
                      "project": 5,
                      "push_access_level": "maintainer"
                    }
            - name: example-three
              manifest: |-
                {
                  "approvals_required": 3,
                  "name": "Example Rule 3",
                  "project": 5,
                  "user_ids": "${[for user in data.gitlab_user.users : user.id]}"
                }
              dependencies:
                gitlab_branch_protection.example: |-
                    {
                      "branch": "release/*",
                      "merge_access_level": "developer",
                      "project": 5,
                      "push_access_level": "maintainer"
                    }
            - name: any_approver
              manifest: |-
                {
                  "approvals_required": 1,
                  "name": "Any name",
                  "project": 5,
                  "rule_type": "any_approver"
                }
              dependencies:
                gitlab_branch_protection.example: |-
                    {
                      "branch": "release/*",
                      "merge_access_level": "developer",
                      "project": 5,
                      "push_access_level": "maintainer"
                    }
            - name: example-four
              manifest: |-
                {
                  "applies_to_all_protected_branches": true,
                  "approvals_required": 3,
                  "group_ids": [
                    51
                  ],
                  "name": "Example Rule 4",
                  "project": 5,
                  "user_ids": [
                    50,
                    500
                  ]
                }
              dependencies:
                gitlab_branch_protection.example: |-
                    {
                      "branch": "release/*",
                      "merge_access_level": "developer",
                      "project": 5,
                      "push_access_level": "maintainer"
                    }
        argumentDocs:
            applies_to_all_protected_branches: (Boolean) Whether the rule is applied to all protected branches. If set to 'true', the value of protected_branch_ids is ignored. Default is 'false'.
            approvals_required: (Number) The number of approvals required for this rule.
            disable_importing_default_any_approver_rule_on_create: (Boolean) When this flag is set, the default any_approver rule will not be imported if present.
            group_ids: (Set of Number) A list of group IDs whose members can approve of the merge request.
            id: (String) The ID of this resource.
            name: (String) The name of the approval rule.
            project: (String) The name or id of the project to add the approval rules.
            protected_branch_ids: (Set of Number) A list of protected branch IDs (not branch names) for which the rule applies.
            report_type: (String) Report type is required when the rule_type is report_approver. Valid values are code_coverage.
            rule_type: (String) String, defaults to 'regular'. The type of rule. any_approver is a pre-configured default rule with approvals_required at 0. Valid values are regular, any_approver, report_approver.
            user_ids: (Set of Number) A list of specific User IDs to add to the list of approvers.
        importStatements:
            - |-
              # GitLab project approval rules can be imported using a key composed of `<project-id>:<rule-id>`, e.g.
              terraform import gitlab_project_approval_rule.example "12345:6"
    gitlab_project_badge:
        subCategory: ""
        description: 'The gitlab_project_badge resource allows to manage the lifecycle of project badges. Upstream API: GitLab REST API docs https://docs.gitlab.com/user/project/badges/#project-badges'
        name: gitlab_project_badge
        title: gitlab_project_badge Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "image_url": "https://example.com/badge-123.svg",
                  "link_url": "https://example.com/badge-123",
                  "name": "badge-123",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "name": "foo-project"
                    }
            - name: gitlab_pipeline
              manifest: |-
                {
                  "image_url": "https://gitlab.example.com/%{project_path}/badges/%{default_branch}/pipeline.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/pipelines?ref=%{default_branch}",
                  "name": "badge-pipeline",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "name": "foo-project"
                    }
            - name: gitlab_coverage
              manifest: |-
                {
                  "image_url": "https://gitlab.example.com/%{project_path}/badges/%{default_branch}/coverage.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/jobs",
                  "name": "badge-coverage",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "name": "foo-project"
                    }
            - name: gitlab_release
              manifest: |-
                {
                  "image_url": "https://gitlab.example.com/%{project_path}/-/badges/release.svg",
                  "link_url": "https://gitlab.example.com/%{project_path}/-/releases",
                  "name": "badge-release",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "name": "foo-project"
                    }
        argumentDocs:
            id: (String) The ID of this resource.
            image_url: (String) The image url which will be presented on project overview.
            link_url: (String) The url linked with the badge.
            name: (String) The name of the badge.
            project: (String) The id of the project to add the badge to.
            rendered_image_url: (String) The image_url argument rendered (in case of use of placeholders).
            rendered_link_url: (String) The link_url argument rendered (in case of use of placeholders).
        importStatements:
            - |-
              # GitLab project badges can be imported using an id made up of `{project_id}:{badge_id}`, e.g.
              terraform import gitlab_project_badge.foo 1:3
    gitlab_project_cluster:
        subCategory: ""
        description: 'The gitlab_project_cluster resource allows to manage the lifecycle of a project cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_clusters/'
        name: gitlab_project_cluster
        title: gitlab_project_cluster Resource - terraform-provider-gitlab
        examples:
            - name: bar
              manifest: |-
                {
                  "domain": "example.com",
                  "enabled": true,
                  "environment_scope": "*",
                  "kubernetes_api_url": "https://124.124.124",
                  "kubernetes_authorization_type": "rbac",
                  "kubernetes_ca_cert": "some-cert",
                  "kubernetes_namespace": "namespace",
                  "kubernetes_token": "some-token",
                  "management_project_id": "123456",
                  "name": "bar-cluster",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "name": "foo-project"
                    }
        argumentDocs:
            cluster_type: (String) Cluster type.
            created_at: (String) Create time.
            domain: (String) The base domain of the cluster.
            enabled: (Boolean) Determines if cluster is active or not. Defaults to true. This attribute cannot be read.
            environment_scope: (String) The associated environment to the cluster. Defaults to *.
            id: (String) The ID of this resource.
            kubernetes_api_url: (String) The URL to access the Kubernetes API.
            kubernetes_authorization_type: (String) The cluster authorization type. Valid values are rbac, abac, unknown_authorization. Defaults to rbac.
            kubernetes_ca_cert: (String) TLS certificate (needed if API is using a self-signed TLS certificate).
            kubernetes_namespace: (String) The unique namespace related to the project.
            kubernetes_token: (String, Sensitive) The token to authenticate against Kubernetes.
            managed: (Boolean) Determines if cluster is managed by gitlab or not. Defaults to true. This attribute cannot be read.
            management_project_id: (String) The ID of the management project for the cluster.
            name: (String) The name of cluster.
            platform_type: (String) Platform type.
            project: (String) The id of the project to add the cluster to.
            provider_type: (String) Provider type.
        importStatements:
            - |-
              # GitLab project clusters can be imported using an id made up of `projectid:clusterid`, e.g.
              terraform import gitlab_project_cluster.bar 123:321
    gitlab_project_compliance_framework:
        subCategory: ""
        description: 'The gitlab_project_compliance_framework resource allows to manage the lifecycle of a compliance framework on a project. -> This resource requires a GitLab Enterprise instance with a Premium license to set the compliance framework on a project. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationprojectsetcomplianceframework'
        name: gitlab_project_compliance_framework
        title: gitlab_project_compliance_framework Resource - terraform-provider-gitlab
        examples:
            - name: sample
              manifest: |-
                {
                  "compliance_framework_id": "${gitlab_compliance_framework.sample.framework_id}",
                  "project": "12345678"
                }
              references:
                compliance_framework_id: gitlab_compliance_framework.sample.framework_id
              dependencies:
                gitlab_compliance_framework.sample: |-
                    {
                      "color": "#87BEEF",
                      "default": false,
                      "description": "A HIPAA Compliance Framework",
                      "name": "HIPAA",
                      "namespace_path": "top-level-group",
                      "pipeline_configuration_full_path": ".hipaa.yml@top-level-group/compliance-frameworks"
                    }
        argumentDocs:
            compliance_framework_id: (String) Globally unique ID of the compliance framework to assign to the project.
            id: (String) The ID of this Terraform resource.
            project: (String) The ID or full path of the project to change the compliance framework of.
        importStatements:
            - |-
              # Gitlab project compliance frameworks can be imported with a key composed of `<project_id>`, e.g.
              terraform import gitlab_project_compliance_framework.sample "42"
    gitlab_project_compliance_frameworks:
        subCategory: ""
        description: 'The gitlab_project_compliance_frameworks resource allows to manage the lifecycle of compliance frameworks on a project. -> This resource requires a GitLab Enterprise instance with a Premium license to set the compliance frameworks on a project. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationprojectupdatecomplianceframeworks'
        name: gitlab_project_compliance_frameworks
        title: gitlab_project_compliance_frameworks Resource - terraform-provider-gitlab
        examples:
            - name: sample
              manifest: |-
                {
                  "compliance_framework_ids": [
                    "${gitlab_compliance_framework.alpha.framework_id}",
                    "${gitlab_compliance_framework.beta.framework_id}"
                  ],
                  "project": "12345678"
                }
              references:
                compliance_framework_ids: gitlab_compliance_framework.alpha.framework_id
              dependencies:
                gitlab_compliance_framework.alpha: |-
                    {
                      "color": "#87BEEF",
                      "default": false,
                      "description": "A HIPAA Compliance Framework",
                      "name": "HIPAA",
                      "namespace_path": "top-level-group"
                    }
                gitlab_compliance_framework.beta: |-
                    {
                      "color": "#223344",
                      "default": false,
                      "description": "A SOC Compliance Framework",
                      "name": "SOC",
                      "namespace_path": "top-level-group"
                    }
        argumentDocs:
            compliance_framework_ids: (Set of String) Globally unique IDs of the compliance frameworks to assign to the project.
            id: (String) The ID of this Terraform resource.
            project: (String) The ID or full path of the project to change the compliance frameworks of.
        importStatements:
            - |-
              # Gitlab project compliance frameworks can be imported with a key composed of `<project_id>`, e.g.
              terraform import gitlab_project_compliance_frameworks.sample "42"
    gitlab_project_custom_attribute:
        subCategory: ""
        description: 'The gitlab_project_custom_attribute resource allows to manage custom attributes for a project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/custom_attributes/'
        name: gitlab_project_custom_attribute
        title: gitlab_project_custom_attribute Resource - terraform-provider-gitlab
        examples:
            - name: attr
              manifest: |-
                {
                  "key": "location",
                  "project": "42",
                  "value": "Greenland"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Key for the Custom Attribute.
            project: (Number) The id of the project.
            value: (String) Value for the Custom Attribute.
        importStatements:
            - |-
              # You can import a project custom attribute using an id made up of `{project-id}:{key}`, e.g.
              terraform import gitlab_project_custom_attribute.attr 42:location
    gitlab_project_environment:
        subCategory: ""
        description: 'The gitlab_project_environment resource allows to manage the lifecycle of an environment in a project. -> During a terraform destroy this resource by default will not attempt to stop the environment first. An environment is required to be in a stopped state before a deletion of the environment can occur. Set the stop_before_destroy flag to attempt to automatically stop the environment before deletion. If the environment''s auto_stop_setting is set to with_action, the environment will be force-stopped. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/environments/'
        name: gitlab_project_environment
        title: gitlab_project_environment Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "external_url": "www.example.com",
                  "name": "example",
                  "project": "${gitlab_project.this.id}"
                }
              references:
                project: gitlab_project.this.id
              dependencies:
                gitlab_group.this: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_project.this: |-
                    {
                      "initialize_with_readme": true,
                      "name": "example",
                      "namespace_id": "${gitlab_group.this.id}"
                    }
        argumentDocs:
            auto_stop_at: (String) The ISO8601 date/time that this environment will be automatically stopped at in UTC.
            auto_stop_setting: (String) The auto stop setting for the environment. Allowed values are always, with_action. If this is set to with_action and stop_before_destroy is true, the environment will be force-stopped.
            cluster_agent_id: (Number) The cluster agent to associate with this environment.
            created_at: (String) The ISO8601 date/time that this environment was created at in UTC.
            description: (String) The description of the environment.
            external_url: (String) Place to link to for this environment.
            flux_resource_path: (String) The Flux resource path to associate with this environment.
            id: (String) The ID of this resource.
            kubernetes_namespace: (String) The Kubernetes namespace to associate with this environment.
            name: (String) The name of the environment.
            project: (String) The ID or full path of the project to environment is created for.
            slug: (String) The name of the environment in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            state: (String) State the environment is in. Valid values are available, stopped.
            stop_before_destroy: (Boolean) Determines whether the environment is attempted to be stopped before the environment is deleted. If auto_stop_setting is set to with_action, this will perform a force stop.
            tier: (String) The tier of the new environment. Valid values are production, staging, testing, development, other.
            updated_at: (String) The ISO8601 date/time that this environment was last updated at in UTC.
        importStatements:
            - |-
              # GitLab project environments can be imported using an id made up of `projectId:environmenId`, e.g.
              terraform import gitlab_project_environment.bar 123:321
    gitlab_project_freeze_period:
        subCategory: ""
        description: 'The gitlab_project_freeze_period resource allows to manage the lifecycle of a freeze period for a project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/freeze_periods/'
        name: gitlab_project_freeze_period
        title: gitlab_project_freeze_period Resource - terraform-provider-gitlab
        examples:
            - name: schedule
              manifest: |-
                {
                  "cron_timezone": "UTC",
                  "freeze_end": "0 7 * * 1",
                  "freeze_start": "0 23 * * 5",
                  "project": "${gitlab_project.foo.id}"
                }
              references:
                project: gitlab_project.foo.id
        argumentDocs:
            cron_timezone: (String) The timezone.
            freeze_end: (String) End of the Freeze Period in cron format (e.g. 0 2 * * *).
            freeze_start: (String) Start of the Freeze Period in cron format (e.g. 0 1 * * *).
            id: (String) The ID of this resource.
            project: (String) The ID or URL-encoded path of the project to add the schedule to.
        importStatements:
            - |-
              # GitLab project freeze periods can be imported using an id made up of `project_id:freeze_period_id`, e.g.
              terraform import gitlab_project_freeze_period.schedule "12345:1337"
    gitlab_project_hook:
        subCategory: ""
        description: 'The gitlab_project_hook resource allows to manage the lifecycle of a project hook. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/projects/#hooks'
        name: gitlab_project_hook
        title: gitlab_project_hook Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Example hook",
                  "merge_requests_events": true,
                  "name": "example",
                  "project": "example/hooked",
                  "url": "https://example.com/hook/example"
                }
            - name: custom_headers
              manifest: |-
                {
                  "custom_headers": [
                    {
                      "key": "X-Custom-Header",
                      "value": "example"
                    },
                    {
                      "key": "X-Custom-Header-Second",
                      "value": "example-second"
                    }
                  ],
                  "merge_requests_events": true,
                  "project": "example/hooked",
                  "url": "https://example.com/hook/example"
                }
        argumentDocs:
            confidential_issues_events: (Boolean) Invoke the hook for confidential issues events.
            confidential_note_events: (Boolean) Invoke the hook for confidential note events.
            custom_headers: (Attributes List) Custom headers for the project webhook. (see below for nested schema)
            custom_webhook_template: (String) Custom webhook template.
            deployment_events: (Boolean) Invoke the hook for deployment events.
            description: (String) Description of the webhook.
            enable_ssl_verification: (Boolean) Enable SSL verification when invoking the hook.
            hook_id: (Number) The id of the project hook.
            id: (String) The id of the project hook. In the format of "project:hook_id"
            issues_events: (Boolean) Invoke the hook for issues events.
            job_events: (Boolean) Invoke the hook for job events.
            key: (String) Key of the custom header.
            merge_requests_events: (Boolean) Invoke the hook for merge requests events.
            name: (String) Name of the project webhook.
            note_events: (Boolean) Invoke the hook for note events.
            pipeline_events: (Boolean) Invoke the hook for pipeline events.
            project: (String) The name or id of the project to add the hook to.
            project_id: (Number) The id of the project for the hook.
            push_events: (Boolean) Invoke the hook for push events.
            push_events_branch_filter: (String) Invoke the hook for push events on matching branches only.
            releases_events: (Boolean) Invoke the hook for release events.
            resource_access_token_events: (Boolean) Invoke the hook for project access token expiry events.
            tag_push_events: (Boolean) Invoke the hook for tag push events.
            token: (String, Sensitive) A token to present when invoking the hook. The token is not available for imported resources.
            url: (String) The url of the hook to invoke. Forces re-creation to preserve token.
            value: (String, Sensitive) Value of the custom header. This value cannot be imported.
            wiki_page_events: (Boolean) Invoke the hook for wiki page events.
        importStatements:
            - |-
              # A GitLab Project Hook can be imported using a key composed of `<project-id>:<hook-id>`, e.g.
              terraform import gitlab_project_hook.example "12345:1"

              # NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_project_issue:
        subCategory: ""
        description: 'The gitlab_project_issue resource allows to manage the lifecycle of an issue within a project. -> During a terraform destroy this resource will close the issue. Set the delete_on_destroy flag to true to delete the issue instead of closing it. ~> Experimental While the base functionality of this resource works, it may be subject to minor change. Upstream API: GitLab API docs https://docs.gitlab.com/api/issues/'
        name: gitlab_project_issue
        title: gitlab_project_issue Resource - terraform-provider-gitlab
        examples:
            - name: welcome_issue
              manifest: |-
                {
                  "description": "  Welcome to the ${gitlab_project.foo.name} project!\n\n",
                  "discussion_locked": true,
                  "project": "${gitlab_project.foo.id}",
                  "title": "Welcome!"
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "description": "Lorem Ipsum",
                      "name": "example project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            assignee_ids: (Set of Number) The IDs of the users to assign the issue to.
            author_id: (Number) The ID of the author of the issue. Use gitlab_user data source to get more information about the user.
            closed_at: (String) When the issue was closed. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
            closed_by_user_id: (Number) The ID of the user that closed the issue. Use gitlab_user data source to get more information about the user.
            completed_count: (Number)
            confidential: (Boolean) Set an issue to be confidential.
            count: (Number)
            created_at: (String) When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights.
            delete_on_destroy: (Boolean) Whether the issue is deleted instead of closed during destroy.
            description: (String) The description of an issue. Limited to 1,048,576 characters.
            discussion_locked: (Boolean) Whether the issue is locked for discussions or not.
            discussion_to_resolve: (String) The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of.
            downvotes: (Number) The number of downvotes the issue has received.
            due_date: (String) The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
            epic_id: (Number) ID of the epic to add the issue to. Valid values are greater than or equal to 0.
            epic_issue_id: (Number) The ID of the epic issue.
            external_id: (String) The external ID of the issue.
            human_time_estimate: (String) The human-readable time estimate of the issue.
            human_total_time_spent: (String) The human-readable total time spent of the issue.
            id: (String) The ID of this resource.
            iid: (Number) The internal ID of the project's issue.
            issue_id: (Number) The instance-wide ID of the issue.
            issue_link_id: (Number) The ID of the issue link.
            issue_type: '(String) The type of issue. Valid values are: issue, incident, test_case.'
            labels: (Set of String) The labels of an issue.
            links: (Map of String) The links of the issue.
            merge_request_to_resolve_discussions_of: (Number) The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values.
            merge_requests_count: (Number) The number of merge requests associated with the issue.
            milestone_id: (Number) The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue's details.
            moved_to_id: (Number) The ID of the issue that was moved to.
            project: (String) The name or ID of the project.
            references: (Map of String) The references of the issue.
            state: '(String) The state of the issue. Valid values are: opened, closed.'
            subscribed: (Boolean) Whether the authenticated user is subscribed to the issue or not.
            task_completion_status: (List of Object) The task completion status. It's always a one element list. (see below for nested schema)
            time_estimate: (Number) The time estimate of the issue.
            title: (String) The title of the issue.
            total_time_spent: (Number) The total time spent of the issue.
            updated_at: (String) When the issue was updated. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
            upvotes: (Number) The number of upvotes the issue has received.
            user_notes_count: (Number) The number of user notes on the issue.
            web_url: (String) The web URL of the issue.
            weight: (Number) The weight of the issue. Valid values are greater than or equal to 0.
        importStatements:
            - |-
              # You can import this resource with an id made up of `{project-id}:{issue-id}`, e.g.
              terraform import gitlab_project_issue.welcome_issue 42:1
    gitlab_project_issue_board:
        subCategory: ""
        description: 'The gitlab_project_issue_board resource allows to manage the lifecycle of a Project Issue Board. ~> NOTE: If the board lists are changed all lists will be recreated. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/boards/'
        name: gitlab_project_issue_board
        title: gitlab_project_issue_board Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "depends_on": [
                    "${gitlab_project_membership.example}"
                  ],
                  "lists": [
                    {
                      "assignee_id": "${gitlab_user.example.id}"
                    },
                    {
                      "milestone_id": "${gitlab_project_milestone.example.milestone_id}"
                    }
                  ],
                  "name": "Test Issue Board",
                  "project": "${gitlab_project.example.id}"
                }
              references:
                lists.assignee_id: gitlab_user.example.id
                lists.milestone_id: gitlab_project_milestone.example.milestone_id
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "Lorem Ipsum",
                      "name": "example project",
                      "visibility_level": "public"
                    }
                gitlab_project_membership.example: |-
                    {
                      "access_level": "developer",
                      "project_id": "${gitlab_project.example.id}",
                      "user_id": "${gitlab_user.example.id}"
                    }
                gitlab_project_milestone.example: |-
                    {
                      "project": "${gitlab_project.example.id}",
                      "title": "m1"
                    }
                gitlab_user.example: |-
                    {
                      "email": "example@example.com",
                      "name": "example",
                      "password": "example1$$$",
                      "username": "example"
                    }
            - name: list_syntax
              manifest: |-
                {
                  "depends_on": [
                    "${gitlab_project_membership.example}"
                  ],
                  "lists": [
                    {
                      "assignee_id": "${gitlab_user.example.id}"
                    },
                    {
                      "milestone_id": "${gitlab_project_milestone.example.milestone_id}"
                    }
                  ],
                  "name": "Test Issue Board with list syntax",
                  "project": "${gitlab_project.example.id}"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "Lorem Ipsum",
                      "name": "example project",
                      "visibility_level": "public"
                    }
                gitlab_project_membership.example: |-
                    {
                      "access_level": "developer",
                      "project_id": "${gitlab_project.example.id}",
                      "user_id": "${gitlab_user.example.id}"
                    }
                gitlab_project_milestone.example: |-
                    {
                      "project": "${gitlab_project.example.id}",
                      "title": "m1"
                    }
                gitlab_user.example: |-
                    {
                      "email": "example@example.com",
                      "name": "example",
                      "password": "example1$$$",
                      "username": "example"
                    }
        argumentDocs:
            assignee_id: (Number) The assignee the board should be scoped to. Requires a GitLab EE license.
            id: (String) The ID of this resource.
            iteration_id: (Number) The ID of the iteration the list should be scoped to. Requires a GitLab EE license.
            label_id: (Number) The ID of the label the list should be scoped to. Requires a GitLab EE license.
            labels: (Set of String) The list of label names which the board should be scoped to. Requires a GitLab EE license.
            lists: (Block List) The list of issue board lists (see below for nested schema)
            milestone_id: (Number) The milestone the board should be scoped to. Requires a GitLab EE license.
            name: (String) The name of the board.
            position: (Number) The position of the list within the board. The position for the list is based on the its position in the lists array.
            project: (String) The ID or full path of the project maintained by the authenticated user.
            weight: (Number) The weight range from 0 to 9, to which the board should be scoped to. Requires a GitLab EE license.
        importStatements:
            - |-
              # You can import this resource with an id made up of `{project-id}:{issue-board-id}`, e.g.
              terraform import gitlab_project_issue_board.kanban 42:1
    gitlab_project_job_token_scope:
        subCategory: ""
        description: 'The gitlab_project_job_token_scope resource allows to manage the CI/CD Job Token scope in a project. Any projects added to the CI/CD Job Token scope outside of TF will be untouched by the resource. ~> Conflicts with the use of gitlab_project_job_token_scopes when used on the same project. Use one or the other to ensure the desired state. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_job_token_scopes/'
        name: gitlab_project_job_token_scope
        title: gitlab_project_job_token_scope Resource - terraform-provider-gitlab
        examples:
            - name: allowed_single_project
              manifest: |-
                {
                  "project": "gitlab-org/gitlab",
                  "target_project_id": 123
                }
            - name: allowed_project
              manifest: |-
                {
                  "for_each": "${toset(local.allowed_project_ids)}",
                  "project": "${data.gitlab_project.deployment_project.id}",
                  "target_project_id": "${each.key}"
                }
              references:
                project: data.gitlab_project.deployment_project.id
                target_project_id: each.key
            - name: allowed_group
              manifest: |-
                {
                  "for_each": "${toset(local.allowed_group_ids)}",
                  "project": "${data.gitlab_project.deployment_project.id}",
                  "target_group_id": "${each.key}"
                }
              references:
                project: data.gitlab_project.deployment_project.id
                target_group_id: each.key
        argumentDocs:
            id: (String) The ID of this Terraform resource. In the format of <project>:<target-project-id>.
            project: (String) The ID or full path of the project.
            target_group_id: (Number) The ID of the group that is in the CI/CD job token inbound allowlist.
            target_project_id: (Number) The ID of the project that is in the CI/CD job token inbound allowlist.
        importStatements:
            - |-
              # GitLab project job token scopes can be imported using an id made up of `projectId:targetProjectId`, e.g.
              terraform import gitlab_project_job_token_scope.bar 123:321
    gitlab_project_job_token_scopes:
        subCategory: ""
        description: 'The gitlab_project_job_token_scopes resource allows to manage the CI/CD Job Token scopes in a project. Any project or group not within the defined set of target_project_ids or target_group_ids, respectively, will be removed, which allows this resource to be used as an explicit deny. ~> Conflicts with the use of gitlab_project_job_token_scope when used on the same project. Use one or the other to ensure the desired state. ~> If the enabled property is false, any project or group will be allowed regardless of the given allowlist attributes. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_job_token_scopes/'
        name: gitlab_project_job_token_scopes
        title: gitlab_project_job_token_scopes Resource - terraform-provider-gitlab
        examples:
            - name: allowed_single_project
              manifest: |-
                {
                  "project": "111",
                  "target_project_ids": [
                    123
                  ]
                }
            - name: allowed_multiple_project
              manifest: |-
                {
                  "project": "111",
                  "target_project_ids": [
                    123,
                    456,
                    789
                  ]
                }
            - name: allowed_multiple_groups
              manifest: |-
                {
                  "project_id": 111,
                  "target_group_ids": [
                    321,
                    654
                  ],
                  "target_project_ids": []
                }
            - name: explicit_deny
              manifest: |-
                {
                  "project": "111",
                  "target_project_ids": []
                }
            - name: allow_projects_and_groups
              manifest: |-
                {
                  "enabled": true,
                  "project": "111",
                  "target_group_ids": [
                    321,
                    654
                  ],
                  "target_project_ids": [
                    123,
                    456,
                    789
                  ]
                }
            - name: allow_all
              manifest: |-
                {
                  "enabled": false,
                  "project": "111"
                }
        argumentDocs:
            enabled: (Boolean) Enable the given inbound allowlist. If false, will allow any project or group regardless of the values in target_project_ids or target_group_ids. Deleting the associated gitlab_project_job_token_scopes resource will reset Enabled on the group to true.
            id: (String) The ID of this Terraform resource. In the format of <project_id>.
            project: (String) The ID or full path of the project.
            project_id: (Number, Deprecated) The ID of the project.
            target_group_ids: (Set of Number) A set of group IDs that are in the CI/CD job token inbound allowlist.
            target_project_ids: (Set of Number) A set of project IDs that are in the CI/CD job token inbound allowlist.
        importStatements:
            - |-
              # GitLab project job token scopes can be imported using an id made up of just the `project_id`
              terraform import gitlab_project_job_token_scopes.bar 123
    gitlab_project_label:
        subCategory: ""
        description: 'The gitlab_project_label resource allows to manage the lifecycle of a project label. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/labels/#project-labels'
        name: gitlab_project_label
        title: gitlab_project_label Resource - terraform-provider-gitlab
        examples:
            - name: fixme
              manifest: |-
                {
                  "color": "#ffcc00",
                  "description": "issue with failing tests",
                  "name": "fixme",
                  "project": "example"
                }
            - name: devops_create
              manifest: |-
                {
                  "color": "#ffa500",
                  "description": "issue for creating infrastructure resources",
                  "name": "devops::create",
                  "project": "${gitlab_project.example.id}"
                }
              references:
                project: gitlab_project.example.id
        argumentDocs:
            color: '(String) The color of the label given in 6-digit hex notation with leading ''#'' sign (e.g. #FFAABB) or one of the CSS color names.'
            description: (String) The description of the label.
            id: (String) The ID of this resource.
            label_id: (Number) The id of the project label.
            name: (String) The name of the label.
            project: (String) The name or id of the project to add the label to.
        importStatements:
            - |-
              # Gitlab Project labels can be imported using an id made up of `{project_id}:{group_label_id}`, e.g.
              terraform import gitlab_project_label.example 12345:fixme
    gitlab_project_level_mr_approvals:
        subCategory: ""
        description: 'The gitlab_project_level_mr_approval_rule resource allows to manage the lifecycle of a Merge Request-level approval rule. -> This resource requires a GitLab Enterprise instance. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/merge_request_approvals/#merge-request-level-mr-approvals'
        name: gitlab_project_level_mr_approvals
        title: gitlab_project_level_mr_approvals Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "disable_overriding_approvers_per_merge_request": false,
                  "merge_requests_author_approval": false,
                  "merge_requests_disable_committers_approval": true,
                  "project": "${gitlab_project.foo.id}",
                  "reset_approvals_on_push": true
                }
              references:
                project: gitlab_project.foo.id
              dependencies:
                gitlab_project.foo: |-
                    {
                      "description": "My example project",
                      "name": "Example"
                    }
        argumentDocs:
            disable_overriding_approvers_per_merge_request: (Boolean) Set to true to disable overriding approvers per merge request.
            id: (String) The ID of the resource. Matches the project value.
            merge_requests_author_approval: (Boolean) Set to true to allow merge requests authors to approve their own merge requests.
            merge_requests_disable_committers_approval: (Boolean) Set to true to disable merge request committers from approving their own merge requests.
            project: (String) The ID or URL-encoded path of a project to change MR approval configuration.
            require_password_to_approve: (Boolean) Set to true to require authentication to approve merge requests.
            reset_approvals_on_push: (Boolean) Set to true to remove all approvals in a merge request when new commits are pushed to its source branch. Default is true.
            selective_code_owner_removals: (Boolean) Reset approvals from Code Owners if their files changed. Can be enabled only if reset_approvals_on_push is disabled.
        importStatements:
            - |-
              # You can import an approval configuration state using `terraform import <resource> <project_id>`.
              #
              # For example:
              terraform import gitlab_project_level_mr_approvals.foo 1234
    gitlab_project_level_notifications Resource - terraform-provider-gitlab:
        subCategory: ""
        description: 'The gitlab_project_level_notifications resource allows to manage notifications for a project. ~> While the API supports both groups and projects, this resource only supports projects currently. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/notification_settings/#group--project-level-notification-settings'
        name: gitlab_project_level_notifications Resource - terraform-provider-gitlab
        title: gitlab_project_level_notifications Resource - terraform-provider-gitlab
        argumentDocs:
            close_issue: (Boolean) Enable notifications for closed issues. Can only be used when level is custom.
            close_merge_request: (Boolean) Enable notifications for closed merge requests. Can only be used when level is custom.
            failed_pipeline: (Boolean) Enable notifications for failed pipelines. Can only be used when level is custom.
            fixed_pipeline: (Boolean) Enable notifications for fixed pipelines. Can only be used when level is custom.
            id: (String) The ID of the resource. Matches the project value.
            issue_due: (Boolean) Enable notifications for due issues. Can only be used when level is custom.
            level: '(String) The level of the notification. Valid values are: disabled, participating, watch, global, mention, custom.'
            merge_merge_request: (Boolean) Enable notifications for merged merge requests. Can only be used when level is custom.
            merge_when_pipeline_succeeds: (Boolean) Enable notifications for merged merge requests when the pipeline succeeds. Can only be used when level is custom.
            moved_project: (Boolean) Enable notifications for moved projects. Can only be used when level is custom.
            new_issue: (Boolean) Enable notifications for new issues. Can only be used when level is custom.
            new_merge_request: (Boolean) Enable notifications for new merge requests. Can only be used when level is custom.
            new_note: (Boolean) Enable notifications for new notes on merge requests. Can only be used when level is custom.
            project: (String) The ID or URL-encoded path of a project where notifications will be configured.
            push_to_merge_request: (Boolean) Enable notifications for push to merge request branches. Can only be used when level is custom.
            reassign_issue: (Boolean) Enable notifications for issue reassignments. Can only be used when level is custom.
            reassign_merge_request: (Boolean) Enable notifications for merge request reassignments. Can only be used when level is custom.
            reopen_issue: (Boolean) Enable notifications for reopened issues. Can only be used when level is custom.
            reopen_merge_request: (Boolean) Enable notifications for reopened merge requests. Can only be used when level is custom.
            success_pipeline: (Boolean) Enable notifications for successful pipelines. Can only be used when level is custom.
        importStatements: []
    gitlab_project_membership:
        subCategory: ""
        description: 'The gitlab_project_membership resource allows to manage the lifecycle of a users project membership. -> If a project should grant membership to an entire group use the gitlab_project_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/members/'
        name: gitlab_project_membership
        title: gitlab_project_membership Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "access_level": "guest",
                  "project": "12345",
                  "user_id": 1337
                }
            - name: example
              manifest: |-
                {
                  "access_level": "guest",
                  "expires_at": "2022-12-31",
                  "project": "67890",
                  "user_id": 1234
                }
        argumentDocs:
            access_level: '(String) The access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            expires_at: '(String) Expiration date for the project membership. Format: YYYY-MM-DD'
            id: (String) The ID of this resource.
            member_role_id: (Number) The ID of a custom member role. Only available for Ultimate instances.
            project: (String) The ID or URL-encoded path of the project.
            user_id: (Number) The id of the user.
        importStatements:
            - |-
              # GitLab project membership can be imported using an id made up of `project_id:user_id`, e.g.
              terraform import gitlab_project_membership.test "12345:1337"
    gitlab_project_milestone:
        subCategory: ""
        description: 'The gitlab_project_milestone resource allows to manage the lifecycle of a project milestone. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/milestones/'
        name: gitlab_project_milestone
        title: gitlab_project_milestone Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "project": "${gitlab_project.example.id}",
                  "title": "example"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
        argumentDocs:
            created_at: (String) The time of creation of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
            description: (String) The description of the milestone.
            due_date: (String) The due date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
            expired: (Boolean) Bool, true if milestone expired.
            id: (String) The ID of this resource.
            iid: (Number) The ID of the project's milestone.
            milestone_id: (Number) The instance-wide ID of the project’s milestone.
            project: (String) The ID or URL-encoded path of the project owned by the authenticated user.
            project_id: (Number) The project ID of milestone.
            start_date: (String) The start date of the milestone. Date time string in the format YYYY-MM-DD, for example 2016-03-11.
            state: '(String) The state of the milestone. Valid values are: active, closed.'
            title: (String) The title of a milestone.
            updated_at: (String) The last update time of the milestone. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z.
            web_url: (String) The web URL of the milestone.
        importStatements:
            - |-
              # Gitlab project milestone can be imported with a key composed of `<project>:<milestone_id>`, e.g.
              terraform import gitlab_project_milestone.example "12345:11"
    gitlab_project_mirror:
        subCategory: ""
        description: 'The gitlab_project_mirror resource allows to manage the lifecycle of a project mirror. This is for pushing changes to a remote repository. Pull Mirroring can be configured using a combination of the import_url, mirror, and mirror_trigger_builds properties on the gitlab_project resource. -> Warning By default, the provider sets the keep_divergent_refs argument to True. If you manually set keep_divergent_refs to False, GitLab mirroring removes branches in the target that aren''t in the source. This action can result in unexpected branch deletions. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/remote_mirrors/'
        name: gitlab_project_mirror
        title: gitlab_project_mirror Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "project": "1",
                  "url": "https://username:password@github.com/org/repository.git"
                }
        argumentDocs:
            auth_method: '(String) Determines the mirror authentication method. Valid values are: ssh_public_key, password.'
            enabled: (Boolean) Determines if the mirror is enabled.
            id: (String) The id of the project mirror. In the format of project:mirror_id
            keep_divergent_refs: (Boolean) Determines if divergent refs are skipped.
            mirror_branch_regex: (String) Contains a regular expression. Only branches with names matching the regex are mirrored. Requires only_protected_branches to be disabled. Premium and Ultimate only.
            mirror_id: (Number) Mirror ID.
            only_protected_branches: (Boolean) Determines if only protected branches are mirrored.
            project: (String) The id of the project.
            url: (String, Sensitive) The URL of the remote repository to be mirrored.
        importStatements:
            - |-
              # GitLab project mirror can be imported using an id made up of `project_id:mirror_id`, e.g.
              terraform import gitlab_project_mirror.foo "12345:1337"
    gitlab_project_protected_environment:
        subCategory: ""
        description: 'The gitlab_project_protected_environment resource allows to manage the lifecycle of a protected environment in a project. ~> In order to use a user or group in the deploy_access_levels configuration, you need to make sure that users have access to the project and groups must have this project shared. You may use the gitlab_project_membership and gitlab_project_shared_group resources to achieve this. Unfortunately, the GitLab API does not complain about users and groups without access to the project and just ignores those. In case this happens you will get perpetual state diffs. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/protected_environments/'
        name: gitlab_project_protected_environment
        title: gitlab_project_protected_environment Resource - terraform-provider-gitlab
        examples:
            - name: example_with_access_level
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
            - name: example_with_group
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "group_id": 456
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
            - name: example_with_user
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "user_id": 789
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
            - name: example_with_multiple
              manifest: |-
                {
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    },
                    {
                      "group_id": 456
                    },
                    {
                      "user_id": 789
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
            - name: example_with_multiple
              manifest: |-
                {
                  "approval_rules": [
                    {
                      "access_level": "developer",
                      "required_approvals": 2
                    }
                  ],
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
            - name: example_with_multiple
              manifest: |-
                {
                  "approval_rules": [
                    {
                      "user_id": 789
                    },
                    {
                      "access_level": "developer",
                      "required_approvals": 2
                    },
                    {
                      "group_id": 456
                    }
                  ],
                  "deploy_access_levels": [
                    {
                      "access_level": "developer"
                    }
                  ],
                  "environment": "${gitlab_project_environment.this.name}",
                  "project": "${gitlab_project_environment.this.project}"
                }
              references:
                environment: gitlab_project_environment.this.name
                project: gitlab_project_environment.this.project
              dependencies:
                gitlab_project_environment.this: |-
                    {
                      "external_url": "www.example.com",
                      "name": "example",
                      "project": 123
                    }
        argumentDocs:
            access_level: (String) Levels of access allowed to approve a deployment to this protected environment. Mutually exclusive with user_id and group_id. Valid values are developer, maintainer.
            access_level_description: (String) Readable description of level of access.
            approval_rules: (Attributes List) Array of approval rules to deploy, with each described by a hash. Elements in the approval_rules should be one of user_id, group_id or access_level. (see below for nested schema)
            deploy_access_levels: (Block Set) Array of access levels allowed to deploy, with each described by a hash.  Elements in the deploy_access_levels should be one of user_id, group_id or access_level. (see below for nested schema)
            environment: (String) The name of the environment.
            group_id: (Number) The ID of the group allowed to approve a deployment to this protected environment. The project must be shared with the group. Mutually exclusive with access_level and user_id.
            group_inheritance_type: '(Number) Group inheritance allows deploy access levels to take inherited group membership into account. Valid values are 0, 1. 0 => Direct group membership only, 1 => All inherited groups. Default: 0'
            id: (String) The ID of this Terraform resource. In the format of <project>:<environment-name>.
            project: (String) The ID or full path of the project which the protected environment is created against.
            required_approvals: (Number) The number of approval required to allow deployment to this protected environment. This is mutually exclusive with user_id.
            user_id: (Number) The ID of the user allowed to approve a deployment to this protected environment. The user must be a member of the project. Mutually exclusive with access_level and group_id.
        importStatements:
            - |-
              # GitLab protected environments can be imported using an id made up of `projectId:environmentName`, e.g.
              terraform import gitlab_project_protected_environment.bar 123:production
    gitlab_project_push_rules:
        subCategory: ""
        description: 'The gitlab_project_push_rules resource allows to manage the lifecycle of push rules on a project. ~> This resource will compete with the gitlab_project resource if push rules are also defined as part of that resource, since this resource will take over ownership of the project push rules created for the referenced project. It is recommended to define push rules using this resource OR in the gitlab_project resource, but not in both as it may result in terraform identifying changes with every "plan" operation. -> This resource requires a GitLab Enterprise instance with a Premium license to set the push rules on a project. Upstream API: GitLab API docs https://docs.gitlab.com/api/projects/#push-rules'
        name: gitlab_project_push_rules
        title: gitlab_project_push_rules Resource - terraform-provider-gitlab
        examples:
            - name: sample
              manifest: |-
                {
                  "author_email_regex": "@gitlab.com$",
                  "branch_name_regex": "(feat|fix)\\/*",
                  "commit_committer_check": true,
                  "commit_committer_name_check": true,
                  "commit_message_negative_regex": "ssh\\:\\/\\/",
                  "commit_message_regex": "(feat|fix):.*",
                  "deny_delete_tag": false,
                  "file_name_regex": "(jar|exe)$",
                  "max_file_size": 4,
                  "member_check": true,
                  "prevent_secrets": true,
                  "project": 42,
                  "reject_unsigned_commits": false
                }
        argumentDocs:
            author_email_regex: (String) All commit author emails must match this regex, e.g. @my-company.com$.
            branch_name_regex: (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
            commit_committer_check: (Boolean) Users can only push commits to this repository that were committed with one of their own verified emails.
            commit_committer_name_check: (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
            commit_message_negative_regex: (String) No commit message is allowed to match this regex, e.g. ssh\:\/\/.
            commit_message_regex: (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
            deny_delete_tag: (Boolean) Deny deleting a tag.
            file_name_regex: (String) All committed filenames must not match this regex, e.g. (jar|exe)$.
            id: (String) The ID of this Terraform resource.
            max_file_size: (Number) Maximum file size (MB).
            member_check: (Boolean) Restrict commits by author (email) to existing GitLab users.
            prevent_secrets: (Boolean) GitLab will reject any files that are likely to contain secrets.
            project: (String) The ID or URL-encoded path of the project.
            reject_non_dco_commits: (Boolean) Reject commit when it’s not DCO certified.
            reject_unsigned_commits: (Boolean) Reject commit when it’s not signed.
        importStatements:
            - |-
              # Gitlab project push rules can be imported with a key composed of `<project_id>`, e.g.
              terraform import gitlab_project_push_rules.sample "42"
    gitlab_project_runner_enablement:
        subCategory: ""
        description: 'The gitlab_project_runner_enablement resource allows to enable a runner in a project. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/runners/#enable-a-runner-in-project'
        name: gitlab_project_runner_enablement
        title: gitlab_project_runner_enablement Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "project": 5,
                  "runner_id": 7
                }
        argumentDocs:
            id: (String) The ID of this resource.
            project: (String) The ID or URL-encoded path of the project owned by the authenticated user.
            runner_id: (Number) The ID of a runner to enable for the project.
        importStatements:
            - |-
              # GitLab project runners can be imported using an id made up of `project:runner_id`, e.g.
              terraform import gitlab_project_runner_enablement.foo 5:7
    gitlab_project_security_policy_attachment:
        subCategory: ""
        description: 'The gitlab_project_security_policy_attachment resource allows to attach a security policy project to a project. ~> Policies https://docs.gitlab.com/user/application_security/policies/ are files stored in a policy project as raw YAML, to allow maximum flexibility with support of all kind of policy and all their options. See the examples for how to create a policy project, add a policy, and link it. Use the gitlab_repository_file resource to create policies instead of a specific policy resource. This ensures all policy options are immediately via Terraform once released. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/index/#mutationsecuritypolicyprojectassign'
        name: gitlab_project_security_policy_attachment
        title: gitlab_project_security_policy_attachment Resource - terraform-provider-gitlab
        examples:
            - name: foo
              manifest: |-
                {
                  "policy_project": 4567,
                  "project": 1234
                }
              dependencies:
                gitlab_project.my-policy-project: |-
                    {
                      "name": "security-policy-project"
                    }
                gitlab_repository_file.policy-yml: |-
                    {
                      "branch": "master",
                      "content": "---\napproval_policy:\n- name: test\ndescription: test\nenabled: true\nrules:\n- type: any_merge_request\n    branch_type: protected\n    commits: any\napproval_settings:\n    block_branch_modification: true\n    prevent_pushing_and_force_pushing: true\n    prevent_approval_by_author: true\n    prevent_approval_by_commit_author: true\n    remove_approvals_with_new_commit: true\n    require_password_to_approve: false\nfallback_behavior:\n    fail: closed\nactions:\n- type: send_bot_message\n    enabled: true\n",
                      "encoding": "text",
                      "file_path": ".gitlab/security-policies/my-policy.yml",
                      "project": "${gitlab_project.my-policy-project.id}"
                    }
            - name: my-policy
              manifest: |-
                {
                  "policy_project": "${gitlab_project.my-policy-project.id}",
                  "project": 1234
                }
              references:
                policy_project: gitlab_project.my-policy-project.id
              dependencies:
                gitlab_project.my-policy-project: |-
                    {
                      "name": "security-policy-project"
                    }
                gitlab_repository_file.policy-yml: |-
                    {
                      "branch": "master",
                      "content": "---\napproval_policy:\n- name: test\ndescription: test\nenabled: true\nrules:\n- type: any_merge_request\n    branch_type: protected\n    commits: any\napproval_settings:\n    block_branch_modification: true\n    prevent_pushing_and_force_pushing: true\n    prevent_approval_by_author: true\n    prevent_approval_by_commit_author: true\n    remove_approvals_with_new_commit: true\n    require_password_to_approve: false\nfallback_behavior:\n    fail: closed\nactions:\n- type: send_bot_message\n    enabled: true\n",
                      "encoding": "text",
                      "file_path": ".gitlab/security-policies/my-policy.yml",
                      "project": "${gitlab_project.my-policy-project.id}"
                    }
        argumentDocs:
            id: (String) The ID of this Terraform resource. In the format of <project>:<policy_project>.
            policy_project: (String) The ID or Full Path of the security policy project.
            policy_project_graphql_id: (String) The GraphQL ID of the security policy project.
            project: (String) The ID or Full Path of the project which will have the security policy project assigned to it.
            project_graphql_id: (String) The GraphQL ID of the project to which the security policty project will be attached.
        importStatements:
            - |-
              # GitLab project security policy attachments can be imported using an id made up of `project:policy_project_id` where the policy project ID is the project ID of the policy project, e.g.
              terraform import gitlab_project_security_policy_attachment.foo 1:2
    gitlab_project_share_group:
        subCategory: ""
        description: 'The gitlab_project_share_group resource allows to manage the lifecycle of project shared with a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/projects/#share-project-with-group'
        name: gitlab_project_share_group
        title: gitlab_project_share_group Resource - terraform-provider-gitlab
        examples:
            - name: test
              manifest: |-
                {
                  "group_access": "guest",
                  "group_id": 1337,
                  "project": "12345"
                }
        argumentDocs:
            access_level: '(String, Deprecated) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            group_access: '(String) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner'
            group_id: (Number) The id of the group.
            id: (String) The ID of this resource.
            project: (String) The ID or URL-encoded path of the project.
        importStatements:
            - |-
              # GitLab project group shares can be imported using an id made up of `projectid:groupid`, e.g.
              terraform import gitlab_project_share_group.test 12345:1337
    gitlab_project_tag:
        subCategory: ""
        description: 'The gitlab_project_tag resource allows to manage the lifecycle of a tag in a project. Upstream API: GitLab API docs https://docs.gitlab.com/api/tags/'
        name: gitlab_project_tag
        title: gitlab_project_tag Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "name": "example",
                  "project": "${gitlab_project.example.id}",
                  "ref": "main"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example",
                      "namespace_id": "${gitlab_group.example.id}"
                    }
        argumentDocs:
            author_email: (String)
            author_name: (String)
            authored_date: (String)
            commit: (Set of Object) The commit associated with the tag. (see below for nested schema)
            committed_date: (String)
            committer_email: (String)
            committer_name: (String)
            description: (String)
            id: (String) The ID of this resource.
            message: (String) The message of the annotated tag.
            name: (String) The name of a tag.
            parent_ids: (Set of String)
            project: (String) The ID or URL-encoded path of the project owned by the authenticated user.
            protected: (Boolean) Bool, true if tag has tag protection.
            ref: (String) Create tag using commit SHA, another tag name, or branch name. This attribute is not available for imported resources.
            release: (Set of Object) The release associated with the tag. (see below for nested schema)
            short_id: (String)
            tag_name: (String)
            target: (String) The unique id assigned to the commit by Gitlab.
            title: (String)
        importStatements:
            - |-
              # Gitlab project tags can be imported with a key composed of `<project_id>:<tag_name>`, e.g.
              terraform import gitlab_project_tag.example "12345:develop"

              # NOTE: the `ref` attribute won't be available for imported `gitlab_project_tag` resources.
    gitlab_project_target_branch_rule Resource - terraform-provider-gitlab:
        subCategory: ""
        description: 'The gitlab_project_target_branch_rule resource allows to configure default target branch rules when creating a merge request. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/ee/api/graphql/reference/#mutationprojecttargetbranchrulecreate'
        name: gitlab_project_target_branch_rule Resource - terraform-provider-gitlab
        title: gitlab_project_target_branch_rule Resource - terraform-provider-gitlab
        argumentDocs:
            id: (String) The ID of this Terraform resource. In the format of <project>:<target-branch-rule-id>.
            project: (String) The ID or URL-encoded path of the project.
            source_branch_pattern: (String) A pattern matching the branch name for which the merge request should have a default target branch configured.
            target_branch_name: (String) The name of the branch to which the merge request should be addressed.
        importStatements: []
    gitlab_project_variable:
        subCategory: ""
        description: 'The gitlab_project_variable resource allows creating and managing a GitLab project level variable. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_level_variables/'
        name: gitlab_project_variable
        title: gitlab_project_variable Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "key": "project_variable_key",
                  "project": "12345",
                  "protected": false,
                  "value": "project_variable_value"
                }
        argumentDocs:
            description: (String) The description of the variable.
            environment_scope: (String) The environment scope of the variable. Defaults to all environment (*). Note that in Community Editions of Gitlab, values other than * will cause inconsistent plans.
            hidden: (Boolean) If set to true, the value of the variable will be hidden in the CI/CD User Interface. The value must meet the hidden requirements.
            id: (String) The ID of this Terraform resource. In the format of <project>:<key>:<environment_scope>.
            key: (String) The name of the variable.
            masked: (Boolean) If set to true, the value of the variable will be masked in job logs. The value must meet the masking requirements.
            project: (String) The name or id of the project.
            protected: (Boolean) If set to true, the variable will be passed only to pipelines running on protected branches and tags.
            raw: (Boolean) Whether the variable is treated as a raw string. When true, variables in the value are not expanded.
            value: (String) The value of the variable.
            variable_type: '(String) The type of a variable. Valid values are: env_var, file.'
        importStatements:
            - |-
              # GitLab project variables can be imported using an id made up of `project:key:environment_scope`, e.g.
              terraform import gitlab_project_variable.example '12345:project_variable_key:*'
    gitlab_project_wiki_page:
        subCategory: ""
        description: 'The gitlab_project_wiki_page resource allows managing the lifecycle of a project wiki page. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/wikis/'
        name: gitlab_project_wiki_page
        title: gitlab_project_wiki_page Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "content": "This is a test content for the wiki page.\nAnd this is a second line of content.\n",
                  "project": "${var.ProjectID}",
                  "slug": "test-wiki-page",
                  "title": "Test Wiki Page"
                }
              references:
                project: var.ProjectID
        argumentDocs:
            content: (String) Content of the wiki page. Must be at least 1 character long.
            encoding: (String) The encoding used for the wiki page content.
            format: '(String) Format of the wiki page (auto-generated if not provided). Valid values are: markdown, rdoc, asciidoc, org.'
            id: (String) The ID of this Terraform resource.
            project: (String) The ID or URL-encoded path of the project.
            slug: (String) Slug of the wiki page.
            title: (String) Title of the wiki page.
        importStatements:
            - |-
              # You can import gitlab_project_wiki_page state using the project ID, e.g.
              terraform import gitlab_project_wiki_page.test 12345:my-wiki-page
    gitlab_release:
        subCategory: ""
        description: 'The gitlab_release resource allows to manage the lifecycle of releases in gitlab. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/releases/'
        name: gitlab_release
        title: gitlab_release Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Test release description",
                  "name": "test-release",
                  "project": "${gitlab_project.example.id}",
                  "ref": "main",
                  "tag_name": "v1.0.0"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example"
                    }
        argumentDocs:
            assets: (Attributes) The release assets. (see below for nested schema)
            author: (Attributes) The author of the release. (see below for nested schema)
            author_email: (String) The email address of the commit author.
            author_name: (String) The name of the commit author.
            authored_date: (String) The date and time the commit was authored. In ISO 8601 format (2019-03-15T08:00:00Z).
            avatar_url: (String) The url of the author's' user avatar.
            closed_issues_url: (String) URL of the release's closed issues.
            closed_merge_requests_url: (String) URL of the release's closed merge requests.
            commit: (Attributes) The release commit. (see below for nested schema)
            commit_path: (String) The path to the commit
            committed_date: (String) The date and time the commit was made. In ISO 8601 format (2019-03-15T08:00:00Z).
            committer_email: (String) The email address of the committer.
            committer_name: (String) The name of the committer.
            count: (Number) The total count of assets in this release.
            created_at: (String) Date and time the release was created. In ISO 8601 format (2019-03-15T08:00:00Z).
            description: (String) The description of the release. You can use Markdown.
            description_html: (String) HTML rendered Markdown of the release description.
            edit_url: (String) URL of the release's edit page.
            id: (String) The ID of this Terraform resource. In the format of <project_id:tag_name>.
            links: (Attributes) Links of the release (see below for nested schema)
            merged_merge_requests_url: (String) URL of the release's merged merge requests.
            message: (String) The commit message.
            milestones: (Set of String) The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones.
            name: (String) The name of the release.
            opened_issues_url: (String) URL of the release's open issues.
            opened_merge_requests_url: (String) URL of the release's open merge requests.
            parent_ids: (Set of String) The full SHA of any parent commits.
            project: (String) The ID or full path of the project.
            ref: (String) If a tag specified in tag_name doesn't exist, the release is created from ref and tagged with tag_name. It can be a commit SHA, another tag name, or a branch name.
            released_at: (String) Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Only provide this field if creating an upcoming or historical release.
            self: (String) URL of the release.
            short_id: (String) The git commit short SHA.
            state: (String) The state of the author's user.
            tag_message: (String) Message to use if creating a new annotated tag.
            tag_name: (String) The tag where the release is created from.
            tag_path: (String) The path to the tag.
            title: (String) The title of the commit.
            upcoming_release: (Boolean) Whether the release_at attribute is set to a future date.
            username: (String) The username of the author.
            web_url: (String) The url to the author's user profile.
        importStatements:
            - |-
              # Gitlab release link can be imported with a key composed of `<project>:<tag_name>`, e.g.
              terraform import gitlab_release.example "12345:test"
    gitlab_release_link:
        subCategory: ""
        description: 'The gitlab_release_link resource allows to manage the lifecycle of a release link. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/releases/links/'
        name: gitlab_release_link
        title: gitlab_release_link Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "name": "test",
                  "project": "${gitlab_project.example.id}",
                  "tag_name": "tag_name_associated_with_release",
                  "url": "https://test/"
                }
              references:
                project: gitlab_project.example.id
              dependencies:
                gitlab_project.example: |-
                    {
                      "description": "An example project",
                      "name": "example"
                    }
        argumentDocs:
            direct_asset_url: (String) Full path for a Direct Asset link.
            external: (Boolean) External or internal link.
            filepath: (String) Relative path for a Direct Asset link.
            id: (String) The ID of this resource.
            link_id: (Number) The ID of the link.
            link_type: (String) The type of the link. Valid values are other, runbook, image, package. Defaults to other.
            name: (String) The name of the link. Link names must be unique within the release.
            project: (String) The ID or URL-encoded path of the project.
            tag_name: (String) The tag associated with the Release.
            url: (String) The URL of the link. Link URLs must be unique within the release.
        importStatements:
            - |-
              # Gitlab release link can be imported with a key composed of `<project>:<tag_name>:<link_id>`, e.g.
              terraform import gitlab_release_link.example "12345:test:2"
    gitlab_repository_file:
        subCategory: ""
        description: 'The gitlab_repository_file resource allows to manage the lifecycle of a file within a repository. -> Timeouts Default timeout for Create, Update and Delete is one minute and can be configured in the timeouts block. -> Implementation Detail GitLab is unable to handle concurrent calls to the GitLab repository files API for the same project. Therefore, this resource queues every call to the repository files API no matter of the project, which may slow down the terraform execution time for some configurations. In addition, retries are performed in case a refresh is required because another application changed the repository at the same time. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/repository_files/'
        name: gitlab_repository_file
        title: gitlab_repository_file Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "author_email": "terraform@example.com",
                  "author_name": "Terraform",
                  "branch": "main",
                  "commit_message": "feature: add meow file",
                  "content": "${base64encode(\"Meow goes the cat\")}",
                  "file_path": "meow.txt",
                  "project": "${gitlab_project.this.id}"
                }
              references:
                project: gitlab_project.this.id
              dependencies:
                gitlab_group.this: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_project.this: |-
                    {
                      "initialize_with_readme": true,
                      "name": "example",
                      "namespace_id": "${gitlab_group.this.id}"
                    }
            - name: readme
              manifest: |-
                {
                  "author_email": "terraform@example.com",
                  "author_name": "Terraform",
                  "branch": "main",
                  "commit_message": "feature: add readme file",
                  "content": "Meow goes the cat",
                  "file_path": "readme.txt",
                  "project": "${gitlab_project.this.id}"
                }
              references:
                project: gitlab_project.this.id
              dependencies:
                gitlab_group.this: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_project.this: |-
                    {
                      "initialize_with_readme": true,
                      "name": "example",
                      "namespace_id": "${gitlab_group.this.id}"
                    }
            - name: readme_for_dogs
              manifest: |-
                {
                  "author_email": "terraform@example.com",
                  "author_name": "Terraform",
                  "branch": "main",
                  "commit_message": "feature: update readme file",
                  "content": "Bark goes the dog",
                  "file_path": "readme.txt",
                  "overwrite_on_create": true,
                  "project": "${gitlab_project.this.id}"
                }
              references:
                project: gitlab_project.this.id
              dependencies:
                gitlab_group.this: |-
                    {
                      "description": "An example group",
                      "name": "example",
                      "path": "example"
                    }
                gitlab_project.this: |-
                    {
                      "initialize_with_readme": true,
                      "name": "example",
                      "namespace_id": "${gitlab_group.this.id}"
                    }
        argumentDocs:
            author_email: (String) Email of the commit author.
            author_name: (String) Name of the commit author.
            blob_id: (String) The blob id.
            branch: (String) Name of the branch to which to commit to.
            commit_id: (String) The commit id.
            commit_message: (String) Commit message.
            content: (String) File content.
            content_sha256: (String) File content sha256 digest.
            create: (String)
            create_commit_message: (String) Create commit message.
            delete: (String)
            delete_commit_message: (String) Delete Commit message.
            encoding: '(String) The file content encoding. Default value is base64. Valid values are: base64, text.'
            execute_filemode: (Boolean) Enables or disables the execute flag on the file.
            file_name: (String) The filename.
            file_path: (String) The full path of the file. It must be relative to the root of the project without a leading slash / or ./.
            id: (String) The ID of this resource.
            last_commit_id: (String) The last known commit id.
            overwrite_on_create: (Boolean) Enable overwriting existing files, defaults to false. This attribute is only used during create and must be use carefully. We suggest to use imports whenever possible and limit the use of this attribute for when the project was imported on the same apply. This attribute is not supported during a resource import.
            project: (String) The name or ID of the project.
            ref: (String) The name of branch, tag or commit.
            size: (Number) The file size.
            start_branch: (String) Name of the branch to start the new commit from.
            timeouts: (Block, Optional) (see below for nested schema)
            update: (String)
            update_commit_message: (String) Update commit message.
        importStatements:
            - |-
              # A Repository File can be imported using an id made up of `<project-id>:<branch-name>:<file-path>`, e.g.
              terraform import gitlab_repository_file.this 1:main:foo/bar.txt
    gitlab_runner:
        subCategory: ""
        description: 'The gitlab_runner resource allows to manage the lifecycle of a runner. A runner can either be registered at an instance level or group level. The runner will be registered at a group level if the token used is from a group, or at an instance level if the token used is for the instance. ~ > Using this resource will register a runner using the deprecated registration_token flow. To use the new authentication_token flow instead, use the gitlab_user_runner resource! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/runners/#register-a-new-runner'
        name: gitlab_runner
        title: gitlab_runner Resource - terraform-provider-gitlab
        examples:
            - name: basic_runner
              manifest: |-
                {
                  "registration_token": "${gitlab_group.my_group.runners_token}"
                }
              references:
                registration_token: gitlab_group.my_group.runners_token
              dependencies:
                gitlab_group.my_custom_group: |-
                    {
                      "description": "group that holds the custom runners",
                      "name": "my custom runner"
                    }
                gitlab_group.my_group: |-
                    {
                      "description": "group that holds the runners",
                      "name": "my runner"
                    }
                local_file.config: |-
                    {
                      "content": "  concurrent = 1\n\n  [[runners]]\n    name = \"Hello Terraform\"\n    url = \"https://example.gitlab.com/\"\n    token = \"${gitlab_runner.my_runner.authentication_token}\"\n    executor = \"shell\"\n    \n",
                      "filename": "${path.module}/config.toml"
                    }
            - name: tagged_only
              manifest: |-
                {
                  "description": "I only run tagged jobs",
                  "registration_token": "${gitlab_group.my_group.runners_token}",
                  "run_untagged": "false",
                  "tag_list": [
                    "tag_one",
                    "tag_two"
                  ]
                }
              references:
                registration_token: gitlab_group.my_group.runners_token
              dependencies:
                gitlab_group.my_custom_group: |-
                    {
                      "description": "group that holds the custom runners",
                      "name": "my custom runner"
                    }
                gitlab_group.my_group: |-
                    {
                      "description": "group that holds the runners",
                      "name": "my runner"
                    }
                local_file.config: |-
                    {
                      "content": "  concurrent = 1\n\n  [[runners]]\n    name = \"Hello Terraform\"\n    url = \"https://example.gitlab.com/\"\n    token = \"${gitlab_runner.my_runner.authentication_token}\"\n    executor = \"shell\"\n    \n",
                      "filename": "${path.module}/config.toml"
                    }
            - name: protected
              manifest: |-
                {
                  "access_level": "ref_protected",
                  "description": "I only run protected jobs",
                  "registration_token": "${gitlab_group.my_group.runners_token}"
                }
              references:
                registration_token: gitlab_group.my_group.runners_token
              dependencies:
                gitlab_group.my_custom_group: |-
                    {
                      "description": "group that holds the custom runners",
                      "name": "my custom runner"
                    }
                gitlab_group.my_group: |-
                    {
                      "description": "group that holds the runners",
                      "name": "my runner"
                    }
                local_file.config: |-
                    {
                      "content": "  concurrent = 1\n\n  [[runners]]\n    name = \"Hello Terraform\"\n    url = \"https://example.gitlab.com/\"\n    token = \"${gitlab_runner.my_runner.authentication_token}\"\n    executor = \"shell\"\n    \n",
                      "filename": "${path.module}/config.toml"
                    }
            - name: my_runner
              manifest: |-
                {
                  "registration_token": "${gitlab_group.my_custom_group.runners_token}"
                }
              references:
                registration_token: gitlab_group.my_custom_group.runners_token
              dependencies:
                gitlab_group.my_custom_group: |-
                    {
                      "description": "group that holds the custom runners",
                      "name": "my custom runner"
                    }
                gitlab_group.my_group: |-
                    {
                      "description": "group that holds the runners",
                      "name": "my runner"
                    }
                local_file.config: |-
                    {
                      "content": "  concurrent = 1\n\n  [[runners]]\n    name = \"Hello Terraform\"\n    url = \"https://example.gitlab.com/\"\n    token = \"${gitlab_runner.my_runner.authentication_token}\"\n    executor = \"shell\"\n    \n",
                      "filename": "${path.module}/config.toml"
                    }
        argumentDocs:
            access_level: '(String) The access_level of the runner. Valid values are: not_protected, ref_protected.'
            authentication_token: (String, Sensitive) The authentication token used for building a config.toml file. This value is not present when imported.
            description: (String) The runner's description.
            id: (String) The ID of this resource.
            locked: (Boolean) Whether the runner should be locked for current project.
            maintenance_note: (String) Free-form maintenance notes for the runner (1024 characters).
            maximum_timeout: (Number) Maximum timeout set when this runner handles the job.
            paused: (Boolean) Whether the runner should ignore new jobs.
            registration_token: (String, Sensitive) The registration token used to register the runner.
            run_untagged: (Boolean) Whether the runner should handle untagged jobs.
            status: |-
                (String) The status of runners to show, one of: online and offline. active and paused are also possible values
                which were deprecated in GitLab 14.8 and will be removed in GitLab 16.0.
            tag_list: (Set of String) List of runner’s tags.
        importStatements:
            - |-
              # A GitLab Runner can be imported using the runner's ID, eg
              terraform import gitlab_runner.this 1
    gitlab_service_custom_issue_tracker:
        subCategory: ""
        description: 'The gitlab_service_custom_issue_tracker resource allows to manage the lifecycle of a project integration with Custom Issue Tracker. ~> This resource is deprecated. use gitlab_integration_custom_issue_trackerinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#custom-issue-tracker'
        name: gitlab_service_custom_issue_tracker
        title: gitlab_service_custom_issue_tracker Resource - terraform-provider-gitlab
        examples:
            - name: tracker
              manifest: |-
                {
                  "issues_url": "https://customtracker.com/TEST-:id",
                  "project": "${gitlab_project.awesome_project.id}",
                  "project_url": "https://customtracker.com/issues"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            id: (String) The ID of this Terraform resource. In the format of <project>.
            issues_url: (String) The URL to view an issue in the external issue tracker. Must contain :id.
            project: (String) The ID or full path of the project for the custom issue tracker.
            project_url: (String) The URL to the project in the external issue tracker.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_service_custom_issue_tracker state using the project ID, e.g.
              terraform import gitlab_service_custom_issue_tracker.tracker 1
    gitlab_service_emails_on_push:
        subCategory: ""
        description: 'The gitlab_service_emails_on_push resource allows to manage the lifecycle of a project integration with Emails on Push Service. ~> This resource is deprecated. Please use gitlab_integration_emails_on_push instead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#emails-on-push'
        name: gitlab_service_emails_on_push
        title: gitlab_service_emails_on_push Resource - terraform-provider-gitlab
        examples:
            - name: emails
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "recipients": "myrecipient@example.com myotherrecipient@example.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are all, default, protected, default_and_protected. Notifications are always fired for tag pushes.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            disable_diffs: (Boolean) Disable code diffs.
            id: (String) The ID of this resource.
            project: (String) ID or full-path of the project you want to activate integration on.
            push_events: (Boolean) Enable notifications for push events.
            recipients: (String) Emails separated by whitespace.
            send_from_committer_email: (Boolean) Send from committer.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            title: (String) Title of the integration.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_service_emails_on_push state using the project ID, e.g.
              terraform import gitlab_service_emails_on_push.emails 1
    gitlab_service_external_wiki:
        subCategory: ""
        description: 'The gitlab_service_external_wiki resource allows to manage the lifecycle of a project integration with External Wiki Service. ~> This resource is deprecated. use gitlab_integration_external_wikiinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#external-wiki'
        name: gitlab_service_external_wiki
        title: gitlab_service_external_wiki Resource - terraform-provider-gitlab
        examples:
            - name: wiki
              manifest: |-
                {
                  "external_wiki_url": "https://MyAwesomeExternalWikiURL.com",
                  "project": "${gitlab_project.awesome_project.id}"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) The ISO8601 date/time that this integration was activated at in UTC.
            external_wiki_url: (String) The URL of the external wiki.
            id: (String) The ID of this resource.
            project: (String) ID of the project you want to activate integration on.
            slug: (String) The name of the integration in lowercase, shortened to 63 bytes, and with everything except 0-9 and a-z replaced with -. No leading / trailing -. Use in URLs, host names and domain names.
            title: (String) Title of the integration.
            updated_at: (String) The ISO8601 date/time that this integration was last updated at in UTC.
        importStatements:
            - |-
              # You can import a gitlab_service_external_wiki state using the project ID, e.g.
              terraform import gitlab_service_external_wiki.wiki 1
    gitlab_service_github:
        subCategory: ""
        description: 'The gitlab_service_github resource allows to manage the lifecycle of a project integration with GitHub. -> This resource requires a GitLab Enterprise instance. ~> This resource is deprecated. use gitlab_integration_githubinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#github'
        name: gitlab_service_github
        title: gitlab_service_github Resource - terraform-provider-gitlab
        examples:
            - name: github
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "repository_url": "https://github.com/gitlabhq/terraform-provider-gitlab",
                  "token": "REDACTED"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            project: (String) ID of the project you want to activate integration on.
            repository_url: (String) The URL of the GitHub repo to integrate with, e,g, https://github.com/gitlabhq/terraform-provider-gitlab.
            static_context: (Boolean) Append instance name instead of branch to the status. Must enable to set a GitLab status check as required in GitHub. See [Static / dynamic status check names] to learn more.
            title: (String) Title.
            token: (String, Sensitive) A GitHub personal access token with at least repo:status scope.
            updated_at: (String) Update time.
        importStatements:
            - |-
              # You can import a gitlab_service_github state using `terraform import <resource> <project_id>`:
              terraform import gitlab_service_github.github 1
    gitlab_service_jira:
        subCategory: ""
        description: 'The gitlab_service_jira resource allows to manage the lifecycle of a project integration with Jira. ~> This resource is deprecated. use gitlab_integration_jirainstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#jira-issues'
        name: gitlab_service_jira
        title: gitlab_service_jira Resource - terraform-provider-gitlab
        examples:
            - name: jira
              manifest: |-
                {
                  "password": "mypass",
                  "project": "${gitlab_project.awesome_project.id}",
                  "url": "https://jira.example.com",
                  "username": "user"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            api_url: (String) The base URL to the Jira instance API. Web URL value is used if not set. For example, https://jira-api.example.com.
            comment_on_event_enabled: (Boolean) Enable comments inside Jira issues on each GitLab event (commit / merge request)
            commit_events: (Boolean) Enable notifications for commit events
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            issues_enabled: (Boolean) Enable viewing Jira issues in GitLab.
            jira_auth_type: (Number) The authentication method to be used with Jira. 0 means Basic Authentication. 1 means Jira personal access token. Defaults to 0.
            jira_issue_prefix: (String) Prefix to match Jira issue keys.
            jira_issue_regex: (String) Regular expression to match Jira issue keys.
            jira_issue_transition_automatic: (Boolean) Enable automatic issue transitions. Takes precedence over jira_issue_transition_id if enabled. Defaults to false. This value cannot be imported, and will not perform drift detection if changed outside Terraform.
            jira_issue_transition_id: (String) The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (Administration > Issues > Workflows) by selecting View under Operations of the desired workflow of your project. By default, this ID is set to 2.
            merge_requests_events: (Boolean) Enable notifications for merge request events
            password: (String, Sensitive) The Jira API token, password, or personal access token to be used with Jira. When your authentication method is basic (jira_auth_type is 0), use an API token for Jira Cloud or a password for Jira Data Center or Jira Server. When your authentication method is a Jira personal access token (jira_auth_type is 1), use the personal access token.
            project: (String) ID of the project you want to activate integration on.
            project_key: (String, Deprecated) The short identifier for your JIRA project. Must be all uppercase. For example, PROJ.
            project_keys: (List of String) Keys of Jira projects. When issues_enabled is true, this setting specifies which Jira projects to view issues from in GitLab.
            title: (String) Title.
            updated_at: (String) Update time.
            url: (String) The URL to the JIRA project which is being linked to this GitLab project. For example, https://jira.example.com.
            use_inherited_settings: (Boolean) Indicates whether or not to inherit default settings. Defaults to false.
            username: (String) The email or username to be used with Jira. For Jira Cloud use an email, for Jira Data Center and Jira Server use a username. Required when using Basic authentication (jira_auth_type is 0).
        importStatements:
            - |-
              # You can import a gitlab_service_jira state using the project ID, e.g.
              terraform import gitlab_service_jira.jira 1
    gitlab_service_microsoft_teams:
        subCategory: ""
        description: 'The gitlab_service_microsoft_teams resource allows to manage the lifecycle of a project integration with Microsoft Teams. ~> This resource is deprecated. use gitlab_integration_microsoft_teamsinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#microsoft-teams-notifications'
        name: gitlab_service_microsoft_teams
        title: gitlab_service_microsoft_teams Resource - terraform-provider-gitlab
        examples:
            - name: teams
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "push_events": true,
                  "webhook": "https://testurl.com/?token=XYZ"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            active: (Boolean) Whether the integration is active.
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are “all”, “default”, “protected”, and “default_and_protected”. The default value is “default”
            confidential_issues_events: (Boolean) Enable notifications for confidential issue events
            confidential_note_events: (Boolean) Enable notifications for confidential note events
            created_at: (String) Create time.
            id: (String) The ID of this resource.
            issues_events: (Boolean) Enable notifications for issue events
            merge_requests_events: (Boolean) Enable notifications for merge request events
            note_events: (Boolean) Enable notifications for note events
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines
            pipeline_events: (Boolean) Enable notifications for pipeline events
            project: (String) ID of the project you want to activate integration on.
            push_events: (Boolean) Enable notifications for push events
            tag_push_events: (Boolean) Enable notifications for tag push events
            updated_at: (String) Update time.
            webhook: (String) The Microsoft Teams webhook (Example, https://outlook.office.com/webhook/...). This value cannot be imported.
            wiki_page_events: (Boolean) Enable notifications for wiki page events
        importStatements:
            - |-
              # You can import a gitlab_service_microsoft_teams state using the project ID, e.g.
              terraform import gitlab_service_microsoft_teams.teams 1
    gitlab_service_pipelines_email:
        subCategory: ""
        description: 'The gitlab_service_pipelines_email resource allows to manage the lifecycle of a project integration with Pipeline Emails Service. ~> This resource is deprecated. use gitlab_integration_pipelines_emailinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#pipeline-status-emails'
        name: gitlab_service_pipelines_email
        title: gitlab_service_pipelines_email Resource - terraform-provider-gitlab
        examples:
            - name: email
              manifest: |-
                {
                  "branches_to_be_notified": "all",
                  "notify_only_broken_pipelines": true,
                  "project": "${gitlab_project.awesome_project.id}",
                  "recipients": [
                    "gitlab@user.create"
                  ]
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are all, default, protected, and default_and_protected. Default is default
            id: (String) The ID of this resource.
            notify_only_broken_pipelines: (Boolean) Notify only broken pipelines. Default is true.
            project: (String) ID of the project you want to activate integration on.
            recipients: (Set of String) ) email addresses where notifications are sent.
        importStatements:
            - |-
              # You can import a gitlab_service_pipelines_email state using the project ID, e.g.
              terraform import gitlab_service_pipelines_email.email 1
    gitlab_service_slack:
        subCategory: ""
        description: 'The gitlab_service_slack resource allows to manage the lifecycle of a project integration with Slack. ~> This resource is deprecated. use gitlab_integration_slackinstead! Upstream API: GitLab REST API docs https://docs.gitlab.com/api/project_integrations/#slack-notifications'
        name: gitlab_service_slack
        title: gitlab_service_slack Resource - terraform-provider-gitlab
        examples:
            - name: slack
              manifest: |-
                {
                  "project": "${gitlab_project.awesome_project.id}",
                  "push_channel": "push_chan",
                  "push_events": true,
                  "username": "myuser",
                  "webhook": "https://webhook.com"
                }
              references:
                project: gitlab_project.awesome_project.id
              dependencies:
                gitlab_project.awesome_project: |-
                    {
                      "description": "My awesome project.",
                      "name": "awesome_project",
                      "visibility_level": "public"
                    }
        argumentDocs:
            branches_to_be_notified: (String) Branches to send notifications for. Valid options are "all", "default", "protected", and "default_and_protected".
            confidential_issue_channel: (String) The name of the channel to receive confidential issue events notifications.
            confidential_issues_events: (Boolean) Enable notifications for confidential issues events.
            confidential_note_channel: (String) The name of the channel to receive confidential note events notifications.
            confidential_note_events: (Boolean) Enable notifications for confidential note events.
            id: (String) The ID of this resource.
            issue_channel: (String) The name of the channel to receive issue events notifications.
            issues_events: (Boolean) Enable notifications for issues events.
            job_events: '(Boolean) Enable notifications for job events. ATTENTION: This attribute is currently not being submitted to the GitLab API, due to https://gitlab.com/gitlab-org/api/client-go/issues/1354.'
            merge_request_channel: (String) The name of the channel to receive merge request events notifications.
            merge_requests_events: (Boolean) Enable notifications for merge requests events.
            note_channel: (String) The name of the channel to receive note events notifications.
            note_events: (Boolean) Enable notifications for note events.
            notify_only_broken_pipelines: (Boolean) Send notifications for broken pipelines.
            notify_only_default_branch: (Boolean, Deprecated) This parameter has been replaced with branches_to_be_notified.
            pipeline_channel: (String) The name of the channel to receive pipeline events notifications.
            pipeline_events: (Boolean) Enable notifications for pipeline events.
            project: (String) ID of the project you want to activate integration on.
            push_channel: (String) The name of the channel to receive push events notifications.
            push_events: (Boolean) Enable notifications for push events.
            tag_push_channel: (String) The name of the channel to receive tag push events notifications.
            tag_push_events: (Boolean) Enable notifications for tag push events.
            username: (String) Username to use.
            webhook: (String) Webhook URL (Example, https://hooks.slack.com/services/...). This value cannot be imported.
            wiki_page_channel: (String) The name of the channel to receive wiki page events notifications.
            wiki_page_events: (Boolean) Enable notifications for wiki page events.
        importStatements:
            - |-
              # You can import a gitlab_service_slack.slack state using the project ID, e.g.
              terraform import gitlab_service_slack.slack.email 1
    gitlab_system_hook:
        subCategory: ""
        description: 'The gitlab_system_hook resource allows to manage the lifecycle of a system hook. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/system_hooks/'
        name: gitlab_system_hook
        title: gitlab_system_hook Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "enable_ssl_verification": true,
                  "merge_requests_events": true,
                  "push_events": true,
                  "repository_update_events": true,
                  "tag_push_events": true,
                  "token": "secret-token",
                  "url": "https://example.com/hook-%d"
                }
        argumentDocs:
            created_at: (String) The date and time the hook was created in ISO8601 format.
            enable_ssl_verification: (Boolean) Do SSL verification when triggering the hook.
            id: (String) The ID of this resource.
            merge_requests_events: (Boolean) Trigger hook on merge requests events.
            push_events: (Boolean) When true, the hook fires on push events.
            repository_update_events: (Boolean) Trigger hook on repository update events.
            tag_push_events: (Boolean) When true, the hook fires on new tags being pushed.
            token: (String, Sensitive) Secret token to validate received payloads; this isn’t returned in the response. This attribute is not available for imported resources.
            url: (String) The hook URL.
        importStatements:
            - |-
              # You can import a system hook using the hook id `{hook-id}`, e.g.
              terraform import gitlab_system_hook.example 42
              # NOTE: the `token` attribute won't be available for imported resources.
    gitlab_tag_protection:
        subCategory: ""
        description: 'The gitlab_tag_protection resource allows to manage the lifecycle of a tag protection. ~> As tag protections cannot be updated, they are deleted and recreated when a change is requested. This means that if the deletion succeeds but the creation fails, tags will be left unprotected. If this is a potential issue for you, please use the create_before_destroy meta-argument: https://developer.hashicorp.com/terraform/language/meta-arguments/lifecycle Upstream API: GitLab REST API docs https://docs.gitlab.com/api/protected_tags/'
        name: gitlab_tag_protection
        title: gitlab_tag_protection Resource - terraform-provider-gitlab
        examples:
            - name: TagProtect
              manifest: |-
                {
                  "allowed_to_create": [
                    {
                      "user_id": 42
                    },
                    {
                      "group_id": 43
                    }
                  ],
                  "create_access_level": "developer",
                  "project": "12345",
                  "tag": "TagProtected"
                }
        argumentDocs:
            access_level: '(String) Access levels allowed to create protected tags. Valid values are: no one, developer, maintainer.'
            access_level_description: (String) Readable description of access level.
            allowed_to_create: (Block Set) Array of access levels/user(s)/group(s) allowed to create protected tags. (see below for nested schema)
            create_access_level: '(String) Access levels allowed to create. Default value of maintainer. The default value is always sent if not provided in the configuration. Valid values are: no one, developer, maintainer.'
            group_id: (Number) The ID of a GitLab group allowed to perform the relevant action. Mutually exclusive with user_id.
            id: (String) The ID of this Terraform resource. In the format of <project-id:tag>.
            project: (String) The id of the project.
            tag: (String) Name of the tag or wildcard.
            user_id: (Number) The ID of a GitLab user allowed to perform the relevant action. Mutually exclusive with group_id.
        importStatements:
            - |-
              # Tag protections can be imported using an id made up of `project_id:tag_name`, e.g.
              terraform import gitlab_tag_protection.example 123456789:v1.0.0
    gitlab_topic:
        subCategory: ""
        description: 'The gitlab_topic resource allows to manage the lifecycle of topics that are then assignable to projects. -> Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable. ~> Deleting a topic was implemented in GitLab 14.9. For older versions of GitLab set soft_destroy = true to empty out a topic instead of deleting it. Upstream API: GitLab REST API docs for topics https://docs.gitlab.com/api/topics/'
        name: gitlab_topic
        title: gitlab_topic Resource - terraform-provider-gitlab
        examples:
            - name: functional_programming
              manifest: |-
                {
                  "avatar": "${path.module}/avatar.png",
                  "avatar_hash": "${filesha256(\"${path.module}/avatar.png\")}",
                  "description": "In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.",
                  "name": "functional-programming",
                  "title": "Functional Programming"
                }
        argumentDocs:
            avatar: '(String) A local path to the avatar image to upload. Note: not available for imported resources.'
            avatar_hash: '(String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it''s not given, but an avatar is given, the avatar will be updated each time.'
            avatar_url: (String) The URL of the avatar image.
            description: (String) A text describing the topic.
            id: (String) The ID of this resource.
            name: (String) The topic's name.
            soft_destroy: (Boolean, Deprecated) Empty the topics fields instead of deleting it.
            title: (String) The topic's description. Requires at least GitLab 15.0 for which it's a required argument.
        importStatements:
            - |-
              # You can import a topic to terraform state using `terraform import <resource> <id>`.
              # The `id` must be an integer for the id of the topic you want to import,
              # for example:
              terraform import gitlab_topic.functional_programming 1
    gitlab_user:
        subCategory: ""
        description: 'The gitlab_user resource allows to manage the lifecycle of a user. -> the provider needs to be configured with admin-level access for this resource to work. -> You must specify either password or reset_password. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/'
        name: gitlab_user
        title: gitlab_user Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "can_create_group": false,
                  "email": "gitlab@user.create",
                  "is_admin": true,
                  "is_external": true,
                  "name": "Example Foo",
                  "password": "superPassword",
                  "projects_limit": 4,
                  "reset_password": false,
                  "username": "example"
                }
        argumentDocs:
            can_create_group: (Boolean) Boolean, defaults to false. Whether to allow the user to create groups.
            email: (String) The e-mail address of the user.
            extern_uid: (String, Deprecated) String, a specific external authentication provider UID.
            external_provider: (String, Deprecated) String, the external provider.
            force_random_password: (Boolean) Set user password to a random value
            id: (String) The ID of this resource.
            is_admin: (Boolean) Boolean, defaults to false.  Whether to enable administrative privileges
            is_external: (Boolean) Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
            name: (String) The name of the user.
            namespace_id: (Number) The ID of the user's namespace.
            note: (String) The note associated to the user.
            password: (String, Sensitive) The password of the user.
            projects_limit: (Number) Integer, defaults to 0.  Number of projects user can create.
            reset_password: (Boolean) Boolean, defaults to false. Send user password reset link.
            skip_confirmation: (Boolean) Boolean, defaults to true. Whether to skip confirmation.
            state: (String) String, defaults to 'active'. The state of the user account. Valid values are active, deactivated, blocked.
            username: (String) The username of the user.
        importStatements:
            - |-
              # You can import a user to terraform state using `terraform import <resource> <id>`.
              # The `id` must be an integer for the id of the user you want to import,
              # for example:
              terraform import gitlab_user.example 42
    gitlab_user_custom_attribute:
        subCategory: ""
        description: 'The gitlab_user_custom_attribute resource allows to manage custom attributes for a user. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/custom_attributes/'
        name: gitlab_user_custom_attribute
        title: gitlab_user_custom_attribute Resource - terraform-provider-gitlab
        examples:
            - name: attr
              manifest: |-
                {
                  "key": "location",
                  "user": "42",
                  "value": "Greenland"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            key: (String) Key for the Custom Attribute.
            user: (Number) The id of the user.
            value: (String) Value for the Custom Attribute.
        importStatements:
            - |-
              # You can import a user custom attribute using an id made up of `{user-id}:{key}`, e.g.
              terraform import gitlab_user_custom_attribute.attr 42:location
    gitlab_user_gpgkey:
        subCategory: ""
        description: 'The gitlab_user_gpgkey resource allows to manage the lifecycle of a GPG key assigned to the current user or a specific user. -> Managing GPG keys for arbitrary users requires admin privileges. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/#get-a-specific-gpg-key'
        name: gitlab_user_gpgkey
        title: gitlab_user_gpgkey Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "key": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----",
                  "user_id": "${data.gitlab_user.example.id}"
                }
              references:
                user_id: data.gitlab_user.example.id
            - name: example_user
              manifest: |-
                {
                  "key": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----"
                }
        argumentDocs:
            created_at: (String) The time when this key was created in GitLab.
            id: (String) The ID of this resource.
            key: (String) The armored GPG public key.
            key_id: (Number) The ID of the GPG key.
            user_id: (Number) The ID of the user to add the GPG key to. If this field is omitted, this resource manages a GPG key for the current user. Otherwise, this resource manages a GPG key for the specified user, and an admin token is required.
        importStatements:
            - |-
              # You can import a GPG key for a specific user using an id made up of `{user-id}:{key}`, e.g.
              terraform import gitlab_user_gpgkey.example 42:1

              # Alternatively, you can import a GPG key for the current user using an id made up of `{key}`, e.g.
              terraform import gitlab_user_gpgkey.example_user 1
    gitlab_user_identity:
        subCategory: ""
        description: 'The gitlab_user_identity resource is for managing the lifecycle of a user''s external identity. -> the provider needs to be configured with admin-level access for this resource to work. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/'
        name: gitlab_user_identity
        title: gitlab_user_identity Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "external_provider": "google",
                  "external_uid": "1234567890",
                  "user_id": "${gitlab_user.example.id}"
                }
              references:
                user_id: gitlab_user.example.id
              dependencies:
                gitlab_user.example: |-
                    {
                      "can_create_group": false,
                      "email": "gitlab@user.create",
                      "is_admin": true,
                      "is_external": true,
                      "name": "Example Foo",
                      "projects_limit": 4,
                      "username": "example"
                    }
        argumentDocs:
            external_provider: (String) The external provider name.
            external_uid: (String) A specific external authentication provider UID.
            id: (String) The ID of this Terraform resource. In the format user-id:external-provider
            user_id: (Number) The GitLab ID of the user.
        importStatements:
            - |-
              # You can import a user identity to terraform state using `terraform import <resource> <id>`.
              # The `id` must be a string for the id of the user and identity provider you want to import,
              # for example:
              terraform import gitlab_user_identity.example "42:google"
    gitlab_user_impersonation_token:
        subCategory: ""
        description: 'The gitlab_user_impersonation_token resource allows to manage impersonation tokens of users. Requires administrator access. Token values are returned once. You are only able to create impersonation tokens to impersonate the user and perform both API calls and Git reads and writes. The user can’t see these tokens in their profile settings page. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/#create-an-impersonation-token'
        name: gitlab_user_impersonation_token
        title: gitlab_user_impersonation_token Resource - terraform-provider-gitlab
        examples:
            - name: this
              manifest: |-
                {
                  "expires_at": "2024-08-27",
                  "name": "token_name",
                  "scopes": [
                    "api"
                  ],
                  "user_id": 12345
                }
        argumentDocs:
            active: (Boolean) True if the token is active.
            created_at: (String) Time the token has been created, RFC3339 format.
            expires_at: (String) Expiration date of the impersonation token in ISO format (YYYY-MM-DD).
            id: (String) The ID of this Terraform resource. In the format of <user-id>:<token-id>.
            impersonation: (Boolean) True as the token is always an impersonation token.
            name: (String) The name of the impersonation token.
            revoked: (Boolean) True if the token is revoked.
            scopes: '(Set of String) Array of scopes of the impersonation token. valid values are: api, read_user, read_api, read_repository, write_repository, read_registry, write_registry, sudo, admin_mode, create_runner, manage_runner, ai_features, k8s_proxy, read_service_ping'
            token: '(String, Sensitive) The token of the user impersonation token. Note: the token is not available for imported resources.'
            token_id: (Number) ID of the impersonation token.
            user_id: (Number) The ID of the user.
        importStatements:
            - |-
              # A GitLab User Impersonation Token can be imported using a key composed of `<user-id>:<token-id>`, e.g.
              terraform import gitlab_user_impersonation_token.example "12345:1"

              # NOTE: the `token` resource attribute is not available for imported resources as this information cannot be read from the GitLab API.
    gitlab_user_runner:
        subCategory: ""
        description: 'The gitlab_user_runner resource allows creating a GitLab runner using the new GitLab Runner Registration Flow https://docs.gitlab.com/ci/runners/new_creation_workflow/. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/#create-a-runner'
        name: gitlab_user_runner
        title: gitlab_user_runner Resource - terraform-provider-gitlab
        examples:
            - name: project_runner
              manifest: |-
                {
                  "description": "A runner created using a user access token instead of a registration token",
                  "project_id": 123456,
                  "runner_type": "project_type",
                  "tag_list": [
                    "a-tag",
                    "other-tag"
                  ],
                  "untagged": true
                }
            - name: group_runner
              manifest: |-
                {
                  "group_id": 123456,
                  "runner_type": "group_type"
                }
            - name: instance_runner
              manifest: |-
                {
                  "runner_type": "instance_type"
                }
        argumentDocs:
            access_level: '(String) The access level of the runner. Valid values are: not_protected, ref_protected.'
            description: (String) Description of the runner.
            group_id: (Number) The ID of the group that the runner is created in. Required if runner_type is group_type.
            id: (String) The ID of the gitlab runner.
            locked: (Boolean) Specifies if the runner should be locked for the current project.
            maintenance_note: (String) Free-form maintenance notes for the runner (1024 characters)
            maximum_timeout: (Number) Maximum timeout that limits the amount of time (in seconds) that runners can run jobs. Must be at least 600 (10 minutes).
            paused: (Boolean) Specifies if the runner should ignore new jobs.
            project_id: (Number) The ID of the project that the runner is created in. Required if runner_type is project_type.
            runner_type: '(String) The scope of the runner. Valid values are: instance_type, group_type, project_type.'
            tag_list: (Set of String) A list of runner tags.
            token: (String, Sensitive) The authentication token to use when setting up a new runner with this configuration. This value cannot be imported.
            untagged: (Boolean) Specifies if the runner should handle untagged jobs.
        importStatements:
            - |-
              # You can import a gitlab runner using its ID
              # Note: Importing a runner will not provide access to the `token` attribute
              terraform import gitlab_user_runner.example 12345
    gitlab_user_sshkey:
        subCategory: ""
        description: 'The gitlab_user_sshkey resource allows to manage the lifecycle of an SSH key assigned to a user. Upstream API: GitLab API docs https://docs.gitlab.com/api/users/#single-ssh-key'
        name: gitlab_user_sshkey
        title: gitlab_user_sshkey Resource - terraform-provider-gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "expires_at": "2016-01-21T00:00:00.000Z",
                  "key": "ssh-ed25519 AAAA...",
                  "title": "example-key",
                  "user_id": "${data.gitlab_user.example.id}"
                }
              references:
                user_id: data.gitlab_user.example.id
        argumentDocs:
            created_at: (String) The time when this key was created in GitLab.
            expires_at: (String) The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
            id: (String) The ID of this resource.
            key: (String) The ssh key. The SSH key comment (trailing part) is optional and ignored for diffing, because GitLab overrides it with the username and GitLab hostname.
            key_id: (Number) The ID of the ssh key.
            title: (String) The title of the ssh key.
            user_id: (Number) The ID or username of the user. If this field is omitted, this resource manages a SSH key for the current user. Otherwise, this resource manages a SSH key for the specified user, and an admin token is required.
        importStatements:
            - |-
              # You can import a user ssh key using an id made up of `{user-id}:{key}`, e.g.
              terraform import gitlab_user_sshkey.example 42:1
    gitlab_value_stream_analytics:
        subCategory: ""
        description: 'The gitlab_value_stream_analytics resource allows to manage the lifecycle of value stream analytics. -> This resource requires a GitLab Enterprise instance with a Premium license to create custom value stream analytics. Upstream API: GitLab GraphQL API docs https://docs.gitlab.com/api/graphql/reference/#mutationvaluestreamcreate'
        name: gitlab_value_stream_analytics
        title: gitlab_value_stream_analytics Resource - terraform-provider-gitlab
        examples:
            - name: project
              manifest: |-
                {
                  "name": "TEST",
                  "project_full_path": "test/project",
                  "stages": [
                    {
                      "custom": false,
                      "hidden": false,
                      "name": "Issue"
                    },
                    {
                      "custom": true,
                      "end_event_identifier": "ISSUE_LABEL_REMOVED",
                      "end_event_label_id": "gid://gitlab/ProjectLabel/1",
                      "hidden": false,
                      "name": "Issue Labels",
                      "start_event_identifier": "ISSUE_LABEL_ADDED",
                      "start_event_label_id": "gid://gitlab/ProjectLabel/0"
                    }
                  ]
                }
            - name: group
              manifest: |-
                {
                  "group_full_path": "test/group",
                  "name": "TEST",
                  "stages": [
                    {
                      "custom": false,
                      "hidden": false,
                      "name": "Issue"
                    },
                    {
                      "custom": true,
                      "end_event_identifier": "ISSUE_LABEL_REMOVED",
                      "end_event_label_id": "gid://gitlab/GroupLabel/1",
                      "hidden": false,
                      "name": "Issue Labels",
                      "start_event_identifier": "ISSUE_LABEL_ADDED",
                      "start_event_label_id": "gid://gitlab/GroupLabel/0"
                    }
                  ]
                }
        argumentDocs:
            custom: (Boolean) Boolean whether the stage is customized. If false, it assigns a built-in default stage by name.
            end_event_identifier: '(String) End event identifier. Valid values are: CODE_STAGE_START, ISSUE_CLOSED, ISSUE_CREATED, ISSUE_DEPLOYED_TO_PRODUCTION, ISSUE_FIRST_ADDED_TO_BOARD, ISSUE_FIRST_ADDED_TO_ITERATION, ISSUE_FIRST_ASSIGNED_AT, ISSUE_FIRST_ASSOCIATED_WITH_MILESTONE, ISSUE_FIRST_MENTIONED_IN_COMMIT, ISSUE_LABEL_ADDED, ISSUE_LABEL_REMOVED, ISSUE_LAST_EDITED, ISSUE_STAGE_END, MERGE_REQUEST_CLOSED, MERGE_REQUEST_CREATED, MERGE_REQUEST_FIRST_ASSIGNED_AT, MERGE_REQUEST_FIRST_COMMIT_AT, MERGE_REQUEST_FIRST_DEPLOYED_TO_PRODUCTION, MERGE_REQUEST_LABEL_ADDED, MERGE_REQUEST_LABEL_REMOVED, MERGE_REQUEST_LAST_BUILD_FINISHED, MERGE_REQUEST_LAST_BUILD_STARTED, MERGE_REQUEST_LAST_EDITED, MERGE_REQUEST_MERGED, MERGE_REQUEST_REVIEWER_FIRST_ASSIGNED, MERGE_REQUEST_PLAN_STAGE_START'
            end_event_label_id: (String) Label ID associated with the end event identifier. In the format of gid://gitlab/GroupLabel/<id> or gid://gitlab/ProjectLabel/<id>
            group_full_path: (String) Full path of the group the value stream is created in. One of
            hidden: (Boolean) Boolean whether the stage is hidden, GitLab provided default stages are hidden by default.
            id: (String) The Terraform ID of the value stream in the format of group:<group_full_path>:<id> or project:<project_full_path>:<id>.
            name: (String) The name of the value stream
            project_full_path: (String) Full path of the project the value stream is created in. One of
            stages: (Attributes List) Stages of the value stream (see below for nested schema)
            start_event_identifier: '(String) Start event identifier. Valid values are: CODE_STAGE_START, ISSUE_CLOSED, ISSUE_CREATED, ISSUE_DEPLOYED_TO_PRODUCTION, ISSUE_FIRST_ADDED_TO_BOARD, ISSUE_FIRST_ADDED_TO_ITERATION, ISSUE_FIRST_ASSIGNED_AT, ISSUE_FIRST_ASSOCIATED_WITH_MILESTONE, ISSUE_FIRST_MENTIONED_IN_COMMIT, ISSUE_LABEL_ADDED, ISSUE_LABEL_REMOVED, ISSUE_LAST_EDITED, ISSUE_STAGE_END, MERGE_REQUEST_CLOSED, MERGE_REQUEST_CREATED, MERGE_REQUEST_FIRST_ASSIGNED_AT, MERGE_REQUEST_FIRST_COMMIT_AT, MERGE_REQUEST_FIRST_DEPLOYED_TO_PRODUCTION, MERGE_REQUEST_LABEL_ADDED, MERGE_REQUEST_LABEL_REMOVED, MERGE_REQUEST_LAST_BUILD_FINISHED, MERGE_REQUEST_LAST_BUILD_STARTED, MERGE_REQUEST_LAST_EDITED, MERGE_REQUEST_MERGED, MERGE_REQUEST_REVIEWER_FIRST_ASSIGNED, MERGE_REQUEST_PLAN_STAGE_START'
            start_event_label_id: (String) Label ID associated with the start event identifier. In the format of gid://gitlab/GroupLabel/<id> or gid://gitlab/ProjectLabel/<id>
        importStatements:
            - |-
              # Gitlab value stream analytics can be imported with a key composed of `<full_path_type>:<full_path>:<value_stream_id>`, e.g.
              terraform import gitlab_value_stream_analytics.group "group:people/engineers:42"

              terraform import gitlab_value_stream_analytics.project "project:projects/sample:43"
