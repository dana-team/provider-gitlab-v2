// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type DefaultBranchProtectionDefaultsInitParameters struct {

	// (Boolean) Allow force push for all users with push access.
	// Allow force push for all users with push access.
	AllowForcePush *bool `json:"allowForcePush,omitempty" tf:"allow_force_push,omitempty"`

	// (List of String) An array of access levels allowed to merge. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToMerge []*string `json:"allowedToMerge,omitempty" tf:"allowed_to_merge,omitempty"`

	// (List of String) An array of access levels allowed to push. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToPush []*string `json:"allowedToPush,omitempty" tf:"allowed_to_push,omitempty"`

	// (Boolean) Allow developers to initial push.
	// Allow developers to initial push.
	DeveloperCanInitialPush *bool `json:"developerCanInitialPush,omitempty" tf:"developer_can_initial_push,omitempty"`
}

type DefaultBranchProtectionDefaultsObservation struct {

	// (Boolean) Allow force push for all users with push access.
	// Allow force push for all users with push access.
	AllowForcePush *bool `json:"allowForcePush,omitempty" tf:"allow_force_push,omitempty"`

	// (List of String) An array of access levels allowed to merge. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToMerge []*string `json:"allowedToMerge,omitempty" tf:"allowed_to_merge,omitempty"`

	// (List of String) An array of access levels allowed to push. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
	AllowedToPush []*string `json:"allowedToPush,omitempty" tf:"allowed_to_push,omitempty"`

	// (Boolean) Allow developers to initial push.
	// Allow developers to initial push.
	DeveloperCanInitialPush *bool `json:"developerCanInitialPush,omitempty" tf:"developer_can_initial_push,omitempty"`
}

type DefaultBranchProtectionDefaultsParameters struct {

	// (Boolean) Allow force push for all users with push access.
	// Allow force push for all users with push access.
	// +kubebuilder:validation:Optional
	AllowForcePush *bool `json:"allowForcePush,omitempty" tf:"allow_force_push,omitempty"`

	// (List of String) An array of access levels allowed to merge. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to merge. Valid values are: `developer`, `maintainer`, `no one`.
	// +kubebuilder:validation:Optional
	AllowedToMerge []*string `json:"allowedToMerge,omitempty" tf:"allowed_to_merge,omitempty"`

	// (List of String) An array of access levels allowed to push. Valid values are: developer, maintainer, no one.
	// An array of access levels allowed to push. Valid values are: `developer`, `maintainer`, `no one`.
	// +kubebuilder:validation:Optional
	AllowedToPush []*string `json:"allowedToPush,omitempty" tf:"allowed_to_push,omitempty"`

	// (Boolean) Allow developers to initial push.
	// Allow developers to initial push.
	// +kubebuilder:validation:Optional
	DeveloperCanInitialPush *bool `json:"developerCanInitialPush,omitempty" tf:"developer_can_initial_push,omitempty"`
}

type GroupInitParameters struct {

	// (List of String) A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	// A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	AllowedEmailDomainsList []*string `json:"allowedEmailDomainsList,omitempty" tf:"allowed_email_domains_list,omitempty"`

	// (Boolean) Default to Auto DevOps pipeline for all projects within this group.
	// Default to Auto DevOps pipeline for all projects within this group.
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String) Initial default branch name.
	// Initial default branch name.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// for-default_branch_protection. Valid values are: 0, 1, 2, 3, 4.
	// See https://docs.gitlab.com/api/groups/#options-for-default_branch_protection. Valid values are: `0`, `1`, `2`, `3`, `4`.
	DefaultBranchProtection *float64 `json:"defaultBranchProtection,omitempty" tf:"default_branch_protection,omitempty"`

	// (Block List, Max: 1) The default branch protection defaults (see below for nested schema)
	// The default branch protection defaults
	DefaultBranchProtectionDefaults []DefaultBranchProtectionDefaultsInitParameters `json:"defaultBranchProtectionDefaults,omitempty" tf:"default_branch_protection_defaults,omitempty"`

	// (String) The group's description.
	// The group's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (Number) Can be set by administrators only. Additional CI/CD minutes for this group.
	// Can be set by administrators only. Additional CI/CD minutes for this group.
	ExtraSharedRunnersMinutesLimit *float64 `json:"extraSharedRunnersMinutesLimit,omitempty" tf:"extra_shared_runners_minutes_limit,omitempty"`

	// (List of String) A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	// A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	IPRestrictionRanges []*string `json:"ipRestrictionRanges,omitempty" tf:"ip_restriction_ranges,omitempty"`

	// (Boolean) Enable/disable Large File Storage (LFS) for the projects in this group.
	// Enable/disable Large File Storage (LFS) for the projects in this group.
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (Boolean) Users cannot be added to projects in this group.
	// Users cannot be added to projects in this group.
	MembershipLock *bool `json:"membershipLock,omitempty" tf:"membership_lock,omitempty"`

	// (Boolean) Disable the capability of a group from getting mentioned.
	// Disable the capability of a group from getting mentioned.
	MentionsDisabled *bool `json:"mentionsDisabled,omitempty" tf:"mentions_disabled,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Id of the parent group (creates a nested group).
	// Id of the parent group (creates a nested group).
	ParentID *float64 `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// (String) The path of the group.
	// The path of the group.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) Whether the group should be permanently removed during a delete operation. This only works with subgroups. Must be configured via an apply before the destroy is run.
	// Whether the group should be permanently removed during a `delete` operation. This only works with subgroups. Must be configured via an `apply` before the `destroy` is run.
	PermanentlyRemoveOnDelete *bool `json:"permanentlyRemoveOnDelete,omitempty" tf:"permanently_remove_on_delete,omitempty"`

	// (Boolean) Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	// Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	PreventForkingOutsideGroup *bool `json:"preventForkingOutsideGroup,omitempty" tf:"prevent_forking_outside_group,omitempty"`

	// (String) Determine if developers can create projects in the group. Valid values are: noone, owner, maintainer, developer
	// Determine if developers can create projects in the group. Valid values are: `noone`, `owner`, `maintainer`, `developer`
	ProjectCreationLevel *string `json:"projectCreationLevel,omitempty" tf:"project_creation_level,omitempty"`

	// (Block List, Max: 1) Push rules for the group. (see below for nested schema)
	// Push rules for the group.
	PushRules []PushRulesInitParameters `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// factor authentication.
	// Require all users in this group to setup Two-factor authentication.
	RequireTwoFactorAuthentication *bool `json:"requireTwoFactorAuthentication,omitempty" tf:"require_two_factor_authentication,omitempty"`

	// (Boolean) Prevent sharing a project with another group within this group.
	// Prevent sharing a project with another group within this group.
	ShareWithGroupLock *bool `json:"shareWithGroupLock,omitempty" tf:"share_with_group_lock,omitempty"`

	// (Number) Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	// Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	SharedRunnersMinutesLimit *float64 `json:"sharedRunnersMinutesLimit,omitempty" tf:"shared_runners_minutes_limit,omitempty"`

	// (String) Enable or disable shared runners for a group’s subgroups and projects. Valid values are: enabled, disabled_and_overridable, disabled_and_unoverridable, disabled_with_override.
	// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabled_and_overridable`, `disabled_and_unoverridable`, `disabled_with_override`.
	SharedRunnersSetting *string `json:"sharedRunnersSetting,omitempty" tf:"shared_runners_setting,omitempty"`

	// (String) Allowed to create subgroups. Valid values are: owner, maintainer.
	// Allowed to create subgroups. Valid values are: `owner`, `maintainer`.
	SubgroupCreationLevel *string `json:"subgroupCreationLevel,omitempty" tf:"subgroup_creation_level,omitempty"`

	// factor authentication is enforced (in hours).
	// Defaults to 48. Time before Two-factor authentication is enforced (in hours).
	TwoFactorGracePeriod *float64 `json:"twoFactorGracePeriod,omitempty" tf:"two_factor_grace_period,omitempty"`

	// (String) The group's visibility. Can be private, internal, or public. Valid values are: private, internal, public.
	// The group's visibility. Can be `private`, `internal`, or `public`. Valid values are: `private`, `internal`, `public`.
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are disabled, private, enabled.
	// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`
}

type GroupObservation struct {

	// (List of String) A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	// A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	AllowedEmailDomainsList []*string `json:"allowedEmailDomainsList,omitempty" tf:"allowed_email_domains_list,omitempty"`

	// (Boolean) Default to Auto DevOps pipeline for all projects within this group.
	// Default to Auto DevOps pipeline for all projects within this group.
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String) The URL of the avatar image.
	// The URL of the avatar image.
	AvatarURL *string `json:"avatarUrl,omitempty" tf:"avatar_url,omitempty"`

	// (String) Initial default branch name.
	// Initial default branch name.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// for-default_branch_protection. Valid values are: 0, 1, 2, 3, 4.
	// See https://docs.gitlab.com/api/groups/#options-for-default_branch_protection. Valid values are: `0`, `1`, `2`, `3`, `4`.
	DefaultBranchProtection *float64 `json:"defaultBranchProtection,omitempty" tf:"default_branch_protection,omitempty"`

	// (Block List, Max: 1) The default branch protection defaults (see below for nested schema)
	// The default branch protection defaults
	DefaultBranchProtectionDefaults []DefaultBranchProtectionDefaultsObservation `json:"defaultBranchProtectionDefaults,omitempty" tf:"default_branch_protection_defaults,omitempty"`

	// (String) The group's description.
	// The group's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (Number) Can be set by administrators only. Additional CI/CD minutes for this group.
	// Can be set by administrators only. Additional CI/CD minutes for this group.
	ExtraSharedRunnersMinutesLimit *float64 `json:"extraSharedRunnersMinutesLimit,omitempty" tf:"extra_shared_runners_minutes_limit,omitempty"`

	// (String) The full name of the group.
	// The full name of the group.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// (String) The full path of the group.
	// The full path of the group.
	FullPath *string `json:"fullPath,omitempty" tf:"full_path,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String) A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	// A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	IPRestrictionRanges []*string `json:"ipRestrictionRanges,omitempty" tf:"ip_restriction_ranges,omitempty"`

	// (Boolean) Enable/disable Large File Storage (LFS) for the projects in this group.
	// Enable/disable Large File Storage (LFS) for the projects in this group.
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (Boolean) Users cannot be added to projects in this group.
	// Users cannot be added to projects in this group.
	MembershipLock *bool `json:"membershipLock,omitempty" tf:"membership_lock,omitempty"`

	// (Boolean) Disable the capability of a group from getting mentioned.
	// Disable the capability of a group from getting mentioned.
	MentionsDisabled *bool `json:"mentionsDisabled,omitempty" tf:"mentions_disabled,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Id of the parent group (creates a nested group).
	// Id of the parent group (creates a nested group).
	ParentID *float64 `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// (String) The path of the group.
	// The path of the group.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) Whether the group should be permanently removed during a delete operation. This only works with subgroups. Must be configured via an apply before the destroy is run.
	// Whether the group should be permanently removed during a `delete` operation. This only works with subgroups. Must be configured via an `apply` before the `destroy` is run.
	PermanentlyRemoveOnDelete *bool `json:"permanentlyRemoveOnDelete,omitempty" tf:"permanently_remove_on_delete,omitempty"`

	// (Boolean) Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	// Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	PreventForkingOutsideGroup *bool `json:"preventForkingOutsideGroup,omitempty" tf:"prevent_forking_outside_group,omitempty"`

	// (String) Determine if developers can create projects in the group. Valid values are: noone, owner, maintainer, developer
	// Determine if developers can create projects in the group. Valid values are: `noone`, `owner`, `maintainer`, `developer`
	ProjectCreationLevel *string `json:"projectCreationLevel,omitempty" tf:"project_creation_level,omitempty"`

	// (Block List, Max: 1) Push rules for the group. (see below for nested schema)
	// Push rules for the group.
	PushRules []PushRulesObservation `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// factor authentication.
	// Require all users in this group to setup Two-factor authentication.
	RequireTwoFactorAuthentication *bool `json:"requireTwoFactorAuthentication,omitempty" tf:"require_two_factor_authentication,omitempty"`

	// (Boolean) Prevent sharing a project with another group within this group.
	// Prevent sharing a project with another group within this group.
	ShareWithGroupLock *bool `json:"shareWithGroupLock,omitempty" tf:"share_with_group_lock,omitempty"`

	// (Number) Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	// Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	SharedRunnersMinutesLimit *float64 `json:"sharedRunnersMinutesLimit,omitempty" tf:"shared_runners_minutes_limit,omitempty"`

	// (String) Enable or disable shared runners for a group’s subgroups and projects. Valid values are: enabled, disabled_and_overridable, disabled_and_unoverridable, disabled_with_override.
	// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabled_and_overridable`, `disabled_and_unoverridable`, `disabled_with_override`.
	SharedRunnersSetting *string `json:"sharedRunnersSetting,omitempty" tf:"shared_runners_setting,omitempty"`

	// (String) Allowed to create subgroups. Valid values are: owner, maintainer.
	// Allowed to create subgroups. Valid values are: `owner`, `maintainer`.
	SubgroupCreationLevel *string `json:"subgroupCreationLevel,omitempty" tf:"subgroup_creation_level,omitempty"`

	// factor authentication is enforced (in hours).
	// Defaults to 48. Time before Two-factor authentication is enforced (in hours).
	TwoFactorGracePeriod *float64 `json:"twoFactorGracePeriod,omitempty" tf:"two_factor_grace_period,omitempty"`

	// (String) The group's visibility. Can be private, internal, or public. Valid values are: private, internal, public.
	// The group's visibility. Can be `private`, `internal`, or `public`. Valid values are: `private`, `internal`, `public`.
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) Web URL of the group.
	// Web URL of the group.
	WebURL *string `json:"webUrl,omitempty" tf:"web_url,omitempty"`

	// (String) The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are disabled, private, enabled.
	// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`
}

type GroupParameters struct {

	// (List of String) A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	// A list of email address domains to allow group access. Will be concatenated together into a comma separated string.
	// +kubebuilder:validation:Optional
	AllowedEmailDomainsList []*string `json:"allowedEmailDomainsList,omitempty" tf:"allowed_email_domains_list,omitempty"`

	// (Boolean) Default to Auto DevOps pipeline for all projects within this group.
	// Default to Auto DevOps pipeline for all projects within this group.
	// +kubebuilder:validation:Optional
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	// +kubebuilder:validation:Optional
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// +kubebuilder:validation:Optional
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String) Initial default branch name.
	// Initial default branch name.
	// +kubebuilder:validation:Optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// for-default_branch_protection. Valid values are: 0, 1, 2, 3, 4.
	// See https://docs.gitlab.com/api/groups/#options-for-default_branch_protection. Valid values are: `0`, `1`, `2`, `3`, `4`.
	// +kubebuilder:validation:Optional
	DefaultBranchProtection *float64 `json:"defaultBranchProtection,omitempty" tf:"default_branch_protection,omitempty"`

	// (Block List, Max: 1) The default branch protection defaults (see below for nested schema)
	// The default branch protection defaults
	// +kubebuilder:validation:Optional
	DefaultBranchProtectionDefaults []DefaultBranchProtectionDefaultsParameters `json:"defaultBranchProtectionDefaults,omitempty" tf:"default_branch_protection_defaults,omitempty"`

	// (String) The group's description.
	// The group's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	// +kubebuilder:validation:Optional
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (Number) Can be set by administrators only. Additional CI/CD minutes for this group.
	// Can be set by administrators only. Additional CI/CD minutes for this group.
	// +kubebuilder:validation:Optional
	ExtraSharedRunnersMinutesLimit *float64 `json:"extraSharedRunnersMinutesLimit,omitempty" tf:"extra_shared_runners_minutes_limit,omitempty"`

	// (List of String) A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	// A list of IP addresses or subnet masks to restrict group access. Will be concatenated together into a comma separated string. Only allowed on top level groups.
	// +kubebuilder:validation:Optional
	IPRestrictionRanges []*string `json:"ipRestrictionRanges,omitempty" tf:"ip_restriction_ranges,omitempty"`

	// (Boolean) Enable/disable Large File Storage (LFS) for the projects in this group.
	// Enable/disable Large File Storage (LFS) for the projects in this group.
	// +kubebuilder:validation:Optional
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (Boolean) Users cannot be added to projects in this group.
	// Users cannot be added to projects in this group.
	// +kubebuilder:validation:Optional
	MembershipLock *bool `json:"membershipLock,omitempty" tf:"membership_lock,omitempty"`

	// (Boolean) Disable the capability of a group from getting mentioned.
	// Disable the capability of a group from getting mentioned.
	// +kubebuilder:validation:Optional
	MentionsDisabled *bool `json:"mentionsDisabled,omitempty" tf:"mentions_disabled,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Id of the parent group (creates a nested group).
	// Id of the parent group (creates a nested group).
	// +kubebuilder:validation:Optional
	ParentID *float64 `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// (String) The path of the group.
	// The path of the group.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) Whether the group should be permanently removed during a delete operation. This only works with subgroups. Must be configured via an apply before the destroy is run.
	// Whether the group should be permanently removed during a `delete` operation. This only works with subgroups. Must be configured via an `apply` before the `destroy` is run.
	// +kubebuilder:validation:Optional
	PermanentlyRemoveOnDelete *bool `json:"permanentlyRemoveOnDelete,omitempty" tf:"permanently_remove_on_delete,omitempty"`

	// (Boolean) Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	// Defaults to false. When enabled, users can not fork projects from this group to external namespaces.
	// +kubebuilder:validation:Optional
	PreventForkingOutsideGroup *bool `json:"preventForkingOutsideGroup,omitempty" tf:"prevent_forking_outside_group,omitempty"`

	// (String) Determine if developers can create projects in the group. Valid values are: noone, owner, maintainer, developer
	// Determine if developers can create projects in the group. Valid values are: `noone`, `owner`, `maintainer`, `developer`
	// +kubebuilder:validation:Optional
	ProjectCreationLevel *string `json:"projectCreationLevel,omitempty" tf:"project_creation_level,omitempty"`

	// (Block List, Max: 1) Push rules for the group. (see below for nested schema)
	// Push rules for the group.
	// +kubebuilder:validation:Optional
	PushRules []PushRulesParameters `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	// +kubebuilder:validation:Optional
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// factor authentication.
	// Require all users in this group to setup Two-factor authentication.
	// +kubebuilder:validation:Optional
	RequireTwoFactorAuthentication *bool `json:"requireTwoFactorAuthentication,omitempty" tf:"require_two_factor_authentication,omitempty"`

	// (Boolean) Prevent sharing a project with another group within this group.
	// Prevent sharing a project with another group within this group.
	// +kubebuilder:validation:Optional
	ShareWithGroupLock *bool `json:"shareWithGroupLock,omitempty" tf:"share_with_group_lock,omitempty"`

	// (Number) Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	// Can be set by administrators only. Maximum number of monthly CI/CD minutes for this group. Can be nil (default; inherit system default), 0 (unlimited), or > 0.
	// +kubebuilder:validation:Optional
	SharedRunnersMinutesLimit *float64 `json:"sharedRunnersMinutesLimit,omitempty" tf:"shared_runners_minutes_limit,omitempty"`

	// (String) Enable or disable shared runners for a group’s subgroups and projects. Valid values are: enabled, disabled_and_overridable, disabled_and_unoverridable, disabled_with_override.
	// Enable or disable shared runners for a group’s subgroups and projects. Valid values are: `enabled`, `disabled_and_overridable`, `disabled_and_unoverridable`, `disabled_with_override`.
	// +kubebuilder:validation:Optional
	SharedRunnersSetting *string `json:"sharedRunnersSetting,omitempty" tf:"shared_runners_setting,omitempty"`

	// (String) Allowed to create subgroups. Valid values are: owner, maintainer.
	// Allowed to create subgroups. Valid values are: `owner`, `maintainer`.
	// +kubebuilder:validation:Optional
	SubgroupCreationLevel *string `json:"subgroupCreationLevel,omitempty" tf:"subgroup_creation_level,omitempty"`

	// factor authentication is enforced (in hours).
	// Defaults to 48. Time before Two-factor authentication is enforced (in hours).
	// +kubebuilder:validation:Optional
	TwoFactorGracePeriod *float64 `json:"twoFactorGracePeriod,omitempty" tf:"two_factor_grace_period,omitempty"`

	// (String) The group's visibility. Can be private, internal, or public. Valid values are: private, internal, public.
	// The group's visibility. Can be `private`, `internal`, or `public`. Valid values are: `private`, `internal`, `public`.
	// +kubebuilder:validation:Optional
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are disabled, private, enabled.
	// The group's wiki access level. Only available on Premium and Ultimate plans. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`
}

type PushRulesInitParameters struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Only commits pushed using verified emails are allowed.
	// Only commits pushed using verified emails are allowed.
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, for example ssh\:\/\/.
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) Filenames matching the regular expression provided in this attribute are not allowed, for example, (jar|exe)$.
	// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB) allowed.
	// Maximum file size (MB) allowed.
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Allows only GitLab users to author commits.
	// Allows only GitLab users to author commits.
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not DCO certified.
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits *bool `json:"rejectNonDcoCommits,omitempty" tf:"reject_non_dco_commits,omitempty"`

	// (Boolean) Only commits signed through GPG are allowed.
	// Only commits signed through GPG are allowed.
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

type PushRulesObservation struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Only commits pushed using verified emails are allowed.
	// Only commits pushed using verified emails are allowed.
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, for example ssh\:\/\/.
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) Filenames matching the regular expression provided in this attribute are not allowed, for example, (jar|exe)$.
	// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB) allowed.
	// Maximum file size (MB) allowed.
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Allows only GitLab users to author commits.
	// Allows only GitLab users to author commits.
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not DCO certified.
	// Reject commit when it’s not DCO certified.
	RejectNonDcoCommits *bool `json:"rejectNonDcoCommits,omitempty" tf:"reject_non_dco_commits,omitempty"`

	// (Boolean) Only commits signed through GPG are allowed.
	// Only commits signed through GPG are allowed.
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

type PushRulesParameters struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	// +kubebuilder:validation:Optional
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	// +kubebuilder:validation:Optional
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Only commits pushed using verified emails are allowed.
	// Only commits pushed using verified emails are allowed.
	// +kubebuilder:validation:Optional
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// +kubebuilder:validation:Optional
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, for example ssh\:\/\/.
	// No commit message is allowed to match this regex, for example `ssh\:\/\/`.
	// +kubebuilder:validation:Optional
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	// +kubebuilder:validation:Optional
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	// +kubebuilder:validation:Optional
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) Filenames matching the regular expression provided in this attribute are not allowed, for example, (jar|exe)$.
	// Filenames matching the regular expression provided in this attribute are not allowed, for example, `(jar|exe)$`.
	// +kubebuilder:validation:Optional
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB) allowed.
	// Maximum file size (MB) allowed.
	// +kubebuilder:validation:Optional
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Allows only GitLab users to author commits.
	// Allows only GitLab users to author commits.
	// +kubebuilder:validation:Optional
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	// +kubebuilder:validation:Optional
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not DCO certified.
	// Reject commit when it’s not DCO certified.
	// +kubebuilder:validation:Optional
	RejectNonDcoCommits *bool `json:"rejectNonDcoCommits,omitempty" tf:"reject_non_dco_commits,omitempty"`

	// (Boolean) Only commits signed through GPG are allowed.
	// Only commits signed through GPG are allowed.
	// +kubebuilder:validation:Optional
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupInitParameters `json:"initProvider,omitempty"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Group is the Schema for the Groups API. The gitlab_group resource allows to manage the lifecycle of a group. -> On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use this provider nor the API to do this. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/groups/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gitlab-v2}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	Spec   GroupSpec   `json:"spec"`
	Status GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
