// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type GroupMembershipInitParameters struct {

	// (String) Access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner.
	// Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the group membership. Format: `YYYY-MM-DD`
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (Number) The ID of the group.
	// The ID of the group.
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// (Boolean) Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	// Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	SkipSubresourcesOnDestroy *bool `json:"skipSubresourcesOnDestroy,omitempty" tf:"skip_subresources_on_destroy,omitempty"`

	// (Boolean) Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	// Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	UnassignIssuablesOnDestroy *bool `json:"unassignIssuablesOnDestroy,omitempty" tf:"unassign_issuables_on_destroy,omitempty"`

	// (Number) The ID of the user.
	// The ID of the user.
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type GroupMembershipObservation struct {

	// (String) Access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner.
	// Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the group membership. Format: `YYYY-MM-DD`
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (Number) The ID of the group.
	// The ID of the group.
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// id:user-id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// (Boolean) Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	// Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	SkipSubresourcesOnDestroy *bool `json:"skipSubresourcesOnDestroy,omitempty" tf:"skip_subresources_on_destroy,omitempty"`

	// (Boolean) Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	// Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	UnassignIssuablesOnDestroy *bool `json:"unassignIssuablesOnDestroy,omitempty" tf:"unassign_issuables_on_destroy,omitempty"`

	// (Number) The ID of the user.
	// The ID of the user.
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type GroupMembershipParameters struct {

	// (String) Access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner.
	// Access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`.
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the group membership. Format: `YYYY-MM-DD`
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (Number) The ID of the group.
	// The ID of the group.
	// +kubebuilder:validation:Optional
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	// +kubebuilder:validation:Optional
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// (Boolean) Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	// Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Only used during a destroy.
	// +kubebuilder:validation:Optional
	SkipSubresourcesOnDestroy *bool `json:"skipSubresourcesOnDestroy,omitempty" tf:"skip_subresources_on_destroy,omitempty"`

	// (Boolean) Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	// Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Only used during a destroy.
	// +kubebuilder:validation:Optional
	UnassignIssuablesOnDestroy *bool `json:"unassignIssuablesOnDestroy,omitempty" tf:"unassign_issuables_on_destroy,omitempty"`

	// (Number) The ID of the user.
	// The ID of the user.
	// +kubebuilder:validation:Optional
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// GroupMembershipSpec defines the desired state of GroupMembership
type GroupMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupMembershipInitParameters `json:"initProvider,omitempty"`
}

// GroupMembershipStatus defines the observed state of GroupMembership.
type GroupMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupMembership is the Schema for the GroupMemberships API. The gitlab_group_membership resource allows to manage the lifecycle of a users group membership. -> If a group should grant membership to another group use the gitlab_group_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/members/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gitlab-v2}
type GroupMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLevel) || (has(self.initProvider) && has(self.initProvider.accessLevel))",message="spec.forProvider.accessLevel is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userId) || (has(self.initProvider) && has(self.initProvider.userId))",message="spec.forProvider.userId is a required parameter"
	Spec   GroupMembershipSpec   `json:"spec"`
	Status GroupMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipList contains a list of GroupMemberships
type GroupMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMembership `json:"items"`
}

// Repository type metadata.
var (
	GroupMembership_Kind             = "GroupMembership"
	GroupMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMembership_Kind}.String()
	GroupMembership_KindAPIVersion   = GroupMembership_Kind + "." + CRDGroupVersion.String()
	GroupMembership_GroupVersionKind = CRDGroupVersion.WithKind(GroupMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMembership{}, &GroupMembershipList{})
}
