// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type UserInitParameters struct {

	// (Boolean) Boolean, defaults to false. Whether to allow the user to create groups.
	// Boolean, defaults to false. Whether to allow the user to create groups.
	CanCreateGroup *bool `json:"canCreateGroup,omitempty" tf:"can_create_group,omitempty"`

	// mail address of the user.
	// The e-mail address of the user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String, Deprecated) String, a specific external authentication provider UID.
	// String, a specific external authentication provider UID.
	ExternUID *string `json:"externUid,omitempty" tf:"extern_uid,omitempty"`

	// (String, Deprecated) String, the external provider.
	// String, the external provider.
	ExternalProvider *string `json:"externalProvider,omitempty" tf:"external_provider,omitempty"`

	// (Boolean) Set user password to a random value
	// Set user password to a random value
	ForceRandomPassword *bool `json:"forceRandomPassword,omitempty" tf:"force_random_password,omitempty"`

	// (Boolean) Boolean, defaults to false.  Whether to enable administrative privileges
	// Boolean, defaults to false.  Whether to enable administrative privileges
	IsAdmin *bool `json:"isAdmin,omitempty" tf:"is_admin,omitempty"`

	// (Boolean) Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	IsExternal *bool `json:"isExternal,omitempty" tf:"is_external,omitempty"`

	// (String) The name of the user.
	// The name of the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The ID of the user's namespace.
	// The ID of the user's namespace.
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) The note associated to the user.
	// The note associated to the user.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// (String, Sensitive) The password of the user.
	// The password of the user.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Integer, defaults to 0.  Number of projects user can create.
	// Integer, defaults to 0.  Number of projects user can create.
	ProjectsLimit *float64 `json:"projectsLimit,omitempty" tf:"projects_limit,omitempty"`

	// (Boolean) Boolean, defaults to false. Send user password reset link.
	// Boolean, defaults to false. Send user password reset link.
	ResetPassword *bool `json:"resetPassword,omitempty" tf:"reset_password,omitempty"`

	// (Boolean) Boolean, defaults to true. Whether to skip confirmation.
	// Boolean, defaults to true. Whether to skip confirmation.
	SkipConfirmation *bool `json:"skipConfirmation,omitempty" tf:"skip_confirmation,omitempty"`

	// (String) String, defaults to 'active'. The state of the user account. Valid values are active, deactivated, blocked.
	// String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type UserObservation struct {

	// (Boolean) Boolean, defaults to false. Whether to allow the user to create groups.
	// Boolean, defaults to false. Whether to allow the user to create groups.
	CanCreateGroup *bool `json:"canCreateGroup,omitempty" tf:"can_create_group,omitempty"`

	// mail address of the user.
	// The e-mail address of the user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String, Deprecated) String, a specific external authentication provider UID.
	// String, a specific external authentication provider UID.
	ExternUID *string `json:"externUid,omitempty" tf:"extern_uid,omitempty"`

	// (String, Deprecated) String, the external provider.
	// String, the external provider.
	ExternalProvider *string `json:"externalProvider,omitempty" tf:"external_provider,omitempty"`

	// (Boolean) Set user password to a random value
	// Set user password to a random value
	ForceRandomPassword *bool `json:"forceRandomPassword,omitempty" tf:"force_random_password,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Boolean, defaults to false.  Whether to enable administrative privileges
	// Boolean, defaults to false.  Whether to enable administrative privileges
	IsAdmin *bool `json:"isAdmin,omitempty" tf:"is_admin,omitempty"`

	// (Boolean) Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	IsExternal *bool `json:"isExternal,omitempty" tf:"is_external,omitempty"`

	// (String) The name of the user.
	// The name of the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The ID of the user's namespace.
	// The ID of the user's namespace.
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) The note associated to the user.
	// The note associated to the user.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// (Number) Integer, defaults to 0.  Number of projects user can create.
	// Integer, defaults to 0.  Number of projects user can create.
	ProjectsLimit *float64 `json:"projectsLimit,omitempty" tf:"projects_limit,omitempty"`

	// (Boolean) Boolean, defaults to false. Send user password reset link.
	// Boolean, defaults to false. Send user password reset link.
	ResetPassword *bool `json:"resetPassword,omitempty" tf:"reset_password,omitempty"`

	// (Boolean) Boolean, defaults to true. Whether to skip confirmation.
	// Boolean, defaults to true. Whether to skip confirmation.
	SkipConfirmation *bool `json:"skipConfirmation,omitempty" tf:"skip_confirmation,omitempty"`

	// (String) String, defaults to 'active'. The state of the user account. Valid values are active, deactivated, blocked.
	// String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type UserParameters struct {

	// (Boolean) Boolean, defaults to false. Whether to allow the user to create groups.
	// Boolean, defaults to false. Whether to allow the user to create groups.
	// +kubebuilder:validation:Optional
	CanCreateGroup *bool `json:"canCreateGroup,omitempty" tf:"can_create_group,omitempty"`

	// mail address of the user.
	// The e-mail address of the user.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String, Deprecated) String, a specific external authentication provider UID.
	// String, a specific external authentication provider UID.
	// +kubebuilder:validation:Optional
	ExternUID *string `json:"externUid,omitempty" tf:"extern_uid,omitempty"`

	// (String, Deprecated) String, the external provider.
	// String, the external provider.
	// +kubebuilder:validation:Optional
	ExternalProvider *string `json:"externalProvider,omitempty" tf:"external_provider,omitempty"`

	// (Boolean) Set user password to a random value
	// Set user password to a random value
	// +kubebuilder:validation:Optional
	ForceRandomPassword *bool `json:"forceRandomPassword,omitempty" tf:"force_random_password,omitempty"`

	// (Boolean) Boolean, defaults to false.  Whether to enable administrative privileges
	// Boolean, defaults to false.  Whether to enable administrative privileges
	// +kubebuilder:validation:Optional
	IsAdmin *bool `json:"isAdmin,omitempty" tf:"is_admin,omitempty"`

	// (Boolean) Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	// Boolean, defaults to false. Whether a user has access only to some internal or private projects. External users can only access projects to which they are explicitly granted access.
	// +kubebuilder:validation:Optional
	IsExternal *bool `json:"isExternal,omitempty" tf:"is_external,omitempty"`

	// (String) The name of the user.
	// The name of the user.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The ID of the user's namespace.
	// The ID of the user's namespace.
	// +kubebuilder:validation:Optional
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) The note associated to the user.
	// The note associated to the user.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// (String, Sensitive) The password of the user.
	// The password of the user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Integer, defaults to 0.  Number of projects user can create.
	// Integer, defaults to 0.  Number of projects user can create.
	// +kubebuilder:validation:Optional
	ProjectsLimit *float64 `json:"projectsLimit,omitempty" tf:"projects_limit,omitempty"`

	// (Boolean) Boolean, defaults to false. Send user password reset link.
	// Boolean, defaults to false. Send user password reset link.
	// +kubebuilder:validation:Optional
	ResetPassword *bool `json:"resetPassword,omitempty" tf:"reset_password,omitempty"`

	// (Boolean) Boolean, defaults to true. Whether to skip confirmation.
	// Boolean, defaults to true. Whether to skip confirmation.
	// +kubebuilder:validation:Optional
	SkipConfirmation *bool `json:"skipConfirmation,omitempty" tf:"skip_confirmation,omitempty"`

	// (String) String, defaults to 'active'. The state of the user account. Valid values are active, deactivated, blocked.
	// String, defaults to 'active'. The state of the user account. Valid values are `active`, `deactivated`, `blocked`.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. The gitlab_user resource allows to manage the lifecycle of a user. -> the provider needs to be configured with admin-level access for this resource to work. -> You must specify either password or reset_password. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/users/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gitlab-v2}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
