// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this File.
func (mg *File) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ProjectRef,
		Selector:     mg.Spec.ForProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ProjectRef,
		Selector:     mg.Spec.InitProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Project.
func (mg *Project) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.NamespaceID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.NamespaceIDRef,
		Selector:     mg.Spec.ForProvider.NamespaceIDSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NamespaceID")
	}
	mg.Spec.ForProvider.NamespaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NamespaceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.NamespaceID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.NamespaceIDRef,
		Selector:     mg.Spec.InitProvider.NamespaceIDSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NamespaceID")
	}
	mg.Spec.InitProvider.NamespaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NamespaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectMembership.
func (mg *ProjectMembership) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ProjectRef,
		Selector:     mg.Spec.ForProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ProjectRef,
		Selector:     mg.Spec.InitProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectShareGroup.
func (mg *ProjectShareGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.GroupID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.GroupIDRef,
		Selector:     mg.Spec.ForProvider.GroupIDSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ProjectRef,
		Selector:     mg.Spec.ForProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Project")
	}
	mg.Spec.ForProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.GroupID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.GroupIDRef,
		Selector:     mg.Spec.InitProvider.GroupIDSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupID")
	}
	mg.Spec.InitProvider.GroupID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Project),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ProjectRef,
		Selector:     mg.Spec.InitProvider.ProjectSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Project")
	}
	mg.Spec.InitProvider.Project = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectRef = rsp.ResolvedReference

	return nil
}
