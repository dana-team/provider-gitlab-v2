// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ProjectShareGroupInitParameters struct {

	// (String, Deprecated) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// (String) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	GroupAccess *string `json:"groupAccess,omitempty" tf:"group_access,omitempty"`

	// (Number) The id of the group.
	// The id of the group.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in gitlab-v2 to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.NamespacedReference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in gitlab-v2 to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.NamespacedSelector `json:"groupIdSelector,omitempty" tf:"-"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.NamespacedReference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.NamespacedSelector `json:"projectSelector,omitempty" tf:"-"`
}

type ProjectShareGroupObservation struct {

	// (String, Deprecated) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// (String) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	GroupAccess *string `json:"groupAccess,omitempty" tf:"group_access,omitempty"`

	// (Number) The id of the group.
	// The id of the group.
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ProjectShareGroupParameters struct {

	// (String, Deprecated) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// (String) The access level to grant the group for the project. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level to grant the group for the project. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	// +kubebuilder:validation:Optional
	GroupAccess *string `json:"groupAccess,omitempty" tf:"group_access,omitempty"`

	// (Number) The id of the group.
	// The id of the group.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	GroupID *float64 `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in gitlab-v2 to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.NamespacedReference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in gitlab-v2 to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.NamespacedSelector `json:"groupIdSelector,omitempty" tf:"-"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.NamespacedReference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.NamespacedSelector `json:"projectSelector,omitempty" tf:"-"`
}

// ProjectShareGroupSpec defines the desired state of ProjectShareGroup
type ProjectShareGroupSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ProjectShareGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectShareGroupInitParameters `json:"initProvider,omitempty"`
}

// ProjectShareGroupStatus defines the observed state of ProjectShareGroup.
type ProjectShareGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectShareGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectShareGroup is the Schema for the ProjectShareGroups API. The gitlab_project_share_group resource allows to manage the lifecycle of project shared with a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/projects/#share-project-with-group
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gitlab-v2.m}
type ProjectShareGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectShareGroupSpec   `json:"spec"`
	Status            ProjectShareGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectShareGroupList contains a list of ProjectShareGroups
type ProjectShareGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectShareGroup `json:"items"`
}

// Repository type metadata.
var (
	ProjectShareGroup_Kind             = "ProjectShareGroup"
	ProjectShareGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectShareGroup_Kind}.String()
	ProjectShareGroup_KindAPIVersion   = ProjectShareGroup_Kind + "." + CRDGroupVersion.String()
	ProjectShareGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProjectShareGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectShareGroup{}, &ProjectShareGroupList{})
}
