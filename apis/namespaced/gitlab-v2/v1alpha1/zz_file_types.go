// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type FileInitParameters struct {

	// (String) Email of the commit author.
	// Email of the commit author.
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// (String) Name of the commit author.
	// Name of the commit author.
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// (String) Name of the branch to which to commit to.
	// Name of the branch to which to commit to.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// (String) Commit message.
	// Commit message.
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// (String) File content.
	// File content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) Create commit message.
	// Create commit message.
	CreateCommitMessage *string `json:"createCommitMessage,omitempty" tf:"create_commit_message,omitempty"`

	// (String) Delete Commit message.
	// Delete Commit message.
	DeleteCommitMessage *string `json:"deleteCommitMessage,omitempty" tf:"delete_commit_message,omitempty"`

	// (String) The file content encoding. Default value is base64. Valid values are: base64, text.
	// The file content encoding. Default value is `base64`. Valid values are: `base64`, `text`.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Enables or disables the execute flag on the file.
	// Enables or disables the execute flag on the file.
	ExecuteFilemode *bool `json:"executeFilemode,omitempty" tf:"execute_filemode,omitempty"`

	// (String) The full path of the file. It must be relative to the root of the project without a leading slash / or ./.
	// The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// (Boolean) Enable overwriting existing files, defaults to false. This attribute is only used during create and must be use carefully. We suggest to use imports whenever possible and limit the use of this attribute for when the project was imported on the same apply. This attribute is not supported during a resource import.
	// Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// (String) The name or ID of the project.
	// The name or ID of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.NamespacedReference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.NamespacedSelector `json:"projectSelector,omitempty" tf:"-"`

	// (String) Name of the branch to start the new commit from.
	// Name of the branch to start the new commit from.
	StartBranch *string `json:"startBranch,omitempty" tf:"start_branch,omitempty"`

	// (String) Update commit message.
	// Update commit message.
	UpdateCommitMessage *string `json:"updateCommitMessage,omitempty" tf:"update_commit_message,omitempty"`
}

type FileObservation struct {

	// (String) Email of the commit author.
	// Email of the commit author.
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// (String) Name of the commit author.
	// Name of the commit author.
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// (String) The blob id.
	// The blob id.
	BlobID *string `json:"blobId,omitempty" tf:"blob_id,omitempty"`

	// (String) Name of the branch to which to commit to.
	// Name of the branch to which to commit to.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// (String) The commit id.
	// The commit id.
	CommitID *string `json:"commitId,omitempty" tf:"commit_id,omitempty"`

	// (String) Commit message.
	// Commit message.
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// (String) File content.
	// File content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) File content sha256 digest.
	// File content sha256 digest.
	ContentSha256 *string `json:"contentSha256,omitempty" tf:"content_sha256,omitempty"`

	// (String) Create commit message.
	// Create commit message.
	CreateCommitMessage *string `json:"createCommitMessage,omitempty" tf:"create_commit_message,omitempty"`

	// (String) Delete Commit message.
	// Delete Commit message.
	DeleteCommitMessage *string `json:"deleteCommitMessage,omitempty" tf:"delete_commit_message,omitempty"`

	// (String) The file content encoding. Default value is base64. Valid values are: base64, text.
	// The file content encoding. Default value is `base64`. Valid values are: `base64`, `text`.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Enables or disables the execute flag on the file.
	// Enables or disables the execute flag on the file.
	ExecuteFilemode *bool `json:"executeFilemode,omitempty" tf:"execute_filemode,omitempty"`

	// (String) The filename.
	// The filename.
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// (String) The full path of the file. It must be relative to the root of the project without a leading slash / or ./.
	// The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The last known commit id.
	// The last known commit id.
	LastCommitID *string `json:"lastCommitId,omitempty" tf:"last_commit_id,omitempty"`

	// (Boolean) Enable overwriting existing files, defaults to false. This attribute is only used during create and must be use carefully. We suggest to use imports whenever possible and limit the use of this attribute for when the project was imported on the same apply. This attribute is not supported during a resource import.
	// Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// (String) The name or ID of the project.
	// The name or ID of the project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (String) The name of branch, tag or commit.
	// The name of branch, tag or commit.
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// (Number) The file size.
	// The file size.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String) Name of the branch to start the new commit from.
	// Name of the branch to start the new commit from.
	StartBranch *string `json:"startBranch,omitempty" tf:"start_branch,omitempty"`

	// (String) Update commit message.
	// Update commit message.
	UpdateCommitMessage *string `json:"updateCommitMessage,omitempty" tf:"update_commit_message,omitempty"`
}

type FileParameters struct {

	// (String) Email of the commit author.
	// Email of the commit author.
	// +kubebuilder:validation:Optional
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// (String) Name of the commit author.
	// Name of the commit author.
	// +kubebuilder:validation:Optional
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// (String) Name of the branch to which to commit to.
	// Name of the branch to which to commit to.
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// (String) Commit message.
	// Commit message.
	// +kubebuilder:validation:Optional
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// (String) File content.
	// File content.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) Create commit message.
	// Create commit message.
	// +kubebuilder:validation:Optional
	CreateCommitMessage *string `json:"createCommitMessage,omitempty" tf:"create_commit_message,omitempty"`

	// (String) Delete Commit message.
	// Delete Commit message.
	// +kubebuilder:validation:Optional
	DeleteCommitMessage *string `json:"deleteCommitMessage,omitempty" tf:"delete_commit_message,omitempty"`

	// (String) The file content encoding. Default value is base64. Valid values are: base64, text.
	// The file content encoding. Default value is `base64`. Valid values are: `base64`, `text`.
	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Enables or disables the execute flag on the file.
	// Enables or disables the execute flag on the file.
	// +kubebuilder:validation:Optional
	ExecuteFilemode *bool `json:"executeFilemode,omitempty" tf:"execute_filemode,omitempty"`

	// (String) The full path of the file. It must be relative to the root of the project without a leading slash / or ./.
	// The full path of the file. It must be relative to the root of the project without a leading slash `/` or `./`.
	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// (Boolean) Enable overwriting existing files, defaults to false. This attribute is only used during create and must be use carefully. We suggest to use imports whenever possible and limit the use of this attribute for when the project was imported on the same apply. This attribute is not supported during a resource import.
	// Enable overwriting existing files, defaults to `false`. This attribute is only used during `create` and must be use carefully. We suggest to use `imports` whenever possible and limit the use of this attribute for when the project was imported on the same `apply`. This attribute is not supported during a resource import.
	// +kubebuilder:validation:Optional
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// (String) The name or ID of the project.
	// The name or ID of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/namespaced/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.NamespacedReference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.NamespacedSelector `json:"projectSelector,omitempty" tf:"-"`

	// (String) Name of the branch to start the new commit from.
	// Name of the branch to start the new commit from.
	// +kubebuilder:validation:Optional
	StartBranch *string `json:"startBranch,omitempty" tf:"start_branch,omitempty"`

	// (String) Update commit message.
	// Update commit message.
	// +kubebuilder:validation:Optional
	UpdateCommitMessage *string `json:"updateCommitMessage,omitempty" tf:"update_commit_message,omitempty"`
}

// FileSpec defines the desired state of File
type FileSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            FileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FileInitParameters `json:"initProvider,omitempty"`
}

// FileStatus defines the observed state of File.
type FileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// File is the Schema for the Files API. The gitlab_repository_file resource allows to manage the lifecycle of a file within a repository. -> Timeouts Default timeout for Create, Update and Delete is one minute and can be configured in the timeouts block. -> Implementation Detail GitLab is unable to handle concurrent calls to the GitLab repository files API for the same project. In addition, retries are performed in case a refresh is required because another application changed the repository at the same time. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/repository_files/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,gitlab-v2}
type File struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.branch) || (has(self.initProvider) && has(self.initProvider.branch))",message="spec.forProvider.branch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filePath) || (has(self.initProvider) && has(self.initProvider.filePath))",message="spec.forProvider.filePath is a required parameter"
	Spec   FileSpec   `json:"spec"`
	Status FileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileList contains a list of Files
type FileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []File `json:"items"`
}

// Repository type metadata.
var (
	File_Kind             = "File"
	File_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: File_Kind}.String()
	File_KindAPIVersion   = File_Kind + "." + CRDGroupVersion.String()
	File_GroupVersionKind = CRDGroupVersion.WithKind(File_Kind)
)

func init() {
	SchemeBuilder.Register(&File{}, &FileList{})
}
