// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ProjectMembershipInitParameters struct {

	// (String) The access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the project membership. Format: `YYYY-MM-DD`
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/cluster/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// (Number) The id of the user.
	// The id of the user.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/cluster/gitlab-v2/v1alpha1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in gitlab-v2 to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in gitlab-v2 to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

type ProjectMembershipObservation struct {

	// (String) The access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the project membership. Format: `YYYY-MM-DD`
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (Number) The id of the user.
	// The id of the user.
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ProjectMembershipParameters struct {

	// (String) The access level for the member. Valid values are: no one, minimal, guest, planner, reporter, developer, maintainer, owner
	// The access level for the member. Valid values are: `no one`, `minimal`, `guest`, `planner`, `reporter`, `developer`, `maintainer`, `owner`
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// MM-DD
	// Expiration date for the project membership. Format: `YYYY-MM-DD`
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (Number) The ID of a custom member role. Only available for Ultimate instances.
	// The ID of a custom member role. Only available for Ultimate instances.
	// +kubebuilder:validation:Optional
	MemberRoleID *float64 `json:"memberRoleId,omitempty" tf:"member_role_id,omitempty"`

	// encoded path of the project.
	// The ID or URL-encoded path of the project.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/cluster/gitlab-v2/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in gitlab-v2 to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`

	// (Number) The id of the user.
	// The id of the user.
	// +crossplane:generate:reference:type=github.com/dana-team/provider-gitlab-v2/apis/cluster/gitlab-v2/v1alpha1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in gitlab-v2 to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in gitlab-v2 to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

// ProjectMembershipSpec defines the desired state of ProjectMembership
type ProjectMembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectMembershipInitParameters `json:"initProvider,omitempty"`
}

// ProjectMembershipStatus defines the observed state of ProjectMembership.
type ProjectMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectMembership is the Schema for the ProjectMemberships API. The gitlab_project_membership resource allows to manage the lifecycle of a users project membership. -> If a project should grant membership to an entire group use the gitlab_project_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/api/members/
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gitlab-v2}
type ProjectMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessLevel) || (has(self.initProvider) && has(self.initProvider.accessLevel))",message="spec.forProvider.accessLevel is a required parameter"
	Spec   ProjectMembershipSpec   `json:"spec"`
	Status ProjectMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectMembershipList contains a list of ProjectMemberships
type ProjectMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectMembership `json:"items"`
}

// Repository type metadata.
var (
	ProjectMembership_Kind             = "ProjectMembership"
	ProjectMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectMembership_Kind}.String()
	ProjectMembership_KindAPIVersion   = ProjectMembership_Kind + "." + CRDGroupVersion.String()
	ProjectMembership_GroupVersionKind = CRDGroupVersion.WithKind(ProjectMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectMembership{}, &ProjectMembershipList{})
}
